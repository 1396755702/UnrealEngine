INTSourceChangelist:2586091
Availability: Public
Title: 언리얼 엔진 4.8 릴리즈 노트
Crumbs: %ROOT%, Engine
Description:4.8 릴리즈 노트

[TOC(start:2 end:2)]

[PUBLISH:Licensee]
## 빌드 정보

[REGION:simpletable]
| 항목 | 정보 |
| ---- | ---- |
| **Labels** | [INCLUDE:#labels] |
| **Built from Changelist #** | 2582554 (//depot/UE4-QA/Promotable-CL-2582554) |
| **Branched from Changelist #** | 2577408 (//depot/UE4-Releases/4.8/Promoted-CL-2577408) |
| **Branched from Changelist #** | 2522625 (//depot/UE4/Promoted-CL-2522625) |
| [REGION:tablesection]IDEs[/REGION] ||
| **Visual Studio Version** | Microsoft Visual Studio 2013 12.0.21005.1 REL |
| **Xcode Version** | 6.3 |
| [REGION:tablesection]SDKs[/REGION] ||
| **DirectX** | June 2010 |
| **HTML5** | 1.25.0 |
| **Linux Toolchain** | v4_clang-3.5.0_ld-2.24_glibc-2.12.2  _(downloadable from [](http://cdn.unrealengine.com/qfe/v4_clang-3.5.0_ld-2.24_glibc-2.12.2.zip))_ |
| **Oculus Runtime** | 0.6.0 |
| **PlayStation 4** | 2.5 (2.0 for Morpheus) |
| **Steam** | 130  |
| **Xbox One** | April 2015 XDK (Requires Visual Studio 2012) |
[/REGION]

<!--
[EXCERPT:Labels]
[REGION:plainlist]
* QA_APPROVED_UE4_BUILD_4.8.0_Release
* QA_APPROVED_UE4_BUILD_CURRENT  
* QA_APPROVED_UE4_BUILD_MINIMUM
[/REGION]
[/EXCERPT:Labels]
-->
[/PUBLISH:Licensee]

이 릴리즈에는 언리얼 엔진의 뛰어난 개발자 커뮤니티 일원들의 변경사항 189 개가 포함되어 있습니다. 언리얼 엔진 4.8 에 기여해 주신 모든 분들께 감사드립니다:

3dluvr, Adrian Gasinski (gasnica), Adrian Irwin (adrianirwin), Albino Rodrigues (Bino-), Alexander O'Mara (AlexanderOMara), Andrew Zhilin (zoon), Angelo Miner (angjminer), Artem V. Navrotskiy (bozaro), Ash Matheson (Nuclearfossil), Audiokinetic Inc. (audiokinetic), Ben Rog-Wilhelm(zorbathut), BhaaL (BhaaLseN), Black Phoenix (PheonixBlack), Błażej Szczygieł (zaps166), Cengiz Terzibas (yaakuro), Christopher P. Yarger (cpyarger), codetackler, Craig Wilson (hamo2k1), Dainius Masiliūnas (GreatEmerald), Daniel Mahashin (dmahashin), Daniel Zeligman (dzeligman), David Palacios (hevedy), Derek van Vliet (derekvanvliet), devbm, Dewitt Buckingham (DaJoker29), Eugene Elkin (eelkin2000), Ezekiel Warren (zaucy), gatools, Henrik Danielsson (TwoD), Jackson Egan (Sneagan), JaredTherriault, Jason (Abatron), Jason Maskell (TamedTornado), Jay Mattis (braindx), jdh84, Jeff Rous (JeffRous), Jefferson Pinheiro (Ixiguis), Jeremy (OPTIPlanet), jlamarche, Joshua Sheard (jsheard), karolz, Kazumasa Ohashi (KazumasaOhashi), Korshikov Anton (tnako), korypostma, Lee Berger (MrCrowbar), Leon Rosengarten (lion03), Leszek Godlewski (inequation), Lucas Dohring (nykac), Lukasz Baran (iniside), Luna Duclos (PSG-Luna), Marat Radchenko (slonopotamus), Marc Kamradt (MarcKamradt), Marco Antonio Alvarez (surakin), marynate, Maurice Laveaux (mlaveaux), Michael Allar (Allar), nsf, Omar Pakker (Omar007), Paul Eremeeff (PaulEremeeff), Pierdek, PjotrSvetachov, radu-danciu, Rama (EverNewJoy), Rene Rivera (grafikrobot), Richárd Németh (hsdxpro), Richard Biely (richardbiely), Robert Chubb (SaxonRah), Robert Williams (Rottbott), Salamanderrake, Sasha Petrovich (xulture), Satheesh (ryanjon2040), Sebastian Köcke (byte3), Sébastien Rombauts (SRombauts), Stephen Whittle (stephenwhittle), Simon Taylor (simontaylor81), Spencer Brown (JedTheKrampus), thk123, Thomas Mayer (tommybear), threadlock, Tobias Mollstam (mollstam), Tore Lervik (hallatore), Will Stahl (merlin91), x414e54, Yohann Martel (ymartel06), zombiesnu

## 주요 기능

### 에디터 안전성 및 삶의 질 개선

언리얼 엔진 4.8 에 정말 큰 초점을 맞춘 부분인데요. 언리얼 엔진 새 버전을 릴리즈할 때마다 수백종의 버그와 많은 신기능을 추가하곤 하지만, 이번 언리얼 엔진 4.8 에서는 에디터 및 게임 안전성 향상은 물론, 엔진 사용시 자주 접하게 되는 문제와 자잘한 기능 요청을 다수 처리하고자 열심히 노력했습니다. 그 결과 엔진 런타임 및 에디터의 안정성이 향상되었기를 바라며, 앞으로의 릴리즈마다 안전성에 계속해서 신경쓰도록 하겠습니다.

### SteamVR/HTC Vive 지원

언리얼 엔진에 이제 Valve 의 SteamVR API 및 HTC Vive 하드웨어가 완벽 지원됩니다!

![image alt text](image_0.jpg)

* "VR 프리뷰" 버튼으로 연결된 HTC Vive 에서 게임을 즉시 미리봅니다!

* 모든 HTC Vive 모션 콘트롤러 기능이 지원되며, 콘트롤러 버튼/터치패드 바인딩도 가능합니다.

* 방 스케일 및 착석 경험이 완벽 지원됩니다.

### Playstation 4 Morpheus VR, 120Hz 리프로젝션

이제 최신 Sony Morpheus 하드웨어가 지원되며, 템포럴 리프로젝션을 사용한 120Hz 렌더링도 지원합니다.

![image alt text](image_1.jpg)

* 이제 언리얼 엔진은 60hz 와 120hz Morpheus 개발 키트 둘 다 지원합니다.

* VR 에서의 3D 오디오 재생 역시 이번 릴리즈에 크게 향상되었습니다.

### 랜드스케이프 그래스 렌더러

새로운 그래스 시스템이 플레이어 주변 랜드스케이프의 그래스 인스턴스와 지상 잡동사니 메시를 동적으로 렌더링합니다.

![image alt text](image_2.png)

* 플레이어가 월드를 이동함에 따라 새로운 인스턴스가 추가되고, 더이상 범위에 있지 않은 인스턴스는 제거됩니다.

* 아티스트는 랜드스케이프 머티리얼을 통해 풀의 밀도를 정하는데, Landscape Grass Output 노드에 밀도를 출력하면 됩니다. 이로써 풀의 배치를 터레인 텍스처에 일치시키는 것이 가능합니다!

* 풀 인스턴스는 풀 밀도 맵에 따라 백그라운드 태스크로 순차 생성됩니다.

* 풀의 렌더링은 컬링을 구현하면서도 드로 콜을 최소한으로 유지시키는 계층형 인스턴싱 시스템을 사용해서 효율적으로 렌더링됩니다. LOD 전환은 픽셀 단위로 이루어지며, 템포럴 AA 로 인해 거의 끊기지도 않습니다.

* 자세한 구성법은 아래 "랜드스케이프 그래스 툴" 부분을 참고하세요!

### 계층형 레벨 오브 디테일 시스템

새로 등장한 Hierarchical LOD (계층형 LOD) 기능은 메시 그룹별로 LOD 를 자동 생성해 주는 기능입니다! 멀리서 볼 때의 드로 콜과 폴리곤 수를 대폭 줄여줍니다. 오픈 월드 게임에 뛰어납니다!

![image alt text](image_3.jpg)

* 합칠 메시 그룹은 자동으로 찾습니다. Simplygon 이 있는 경우 사용해서 한 그룹의 로우 디테일 메시를 생성합니다. 없는 경우, 각 메시의 LOD 버전을 (*Merge Actors* 기능을 사용해서) 합칩니다. 머티리얼은 가능한 경우 자동으로 병합시켜 섹션 (머티리얼) 수를 줄입니다.

* 계층형 LOD 를 사용하려면, *월드 세팅* 에서 *Enable Hierarchical LOD System* (계층형 LOD 시스템 활성화)를 True 로 설정합니다. 활성화 이후 *LODSystem* 섹션에서 세팅 편집이 가능할 것입니다.

* 개별 액터마다 별도의 *Enable Auto LOD Generation* (자동 LOD 생성 활성화) 옵션을 꺼서 이 옵션을 선택할 수 있습니다.

* LOD 메시는 '레벨 빌드' 프로세스의 일환으로 생성되며, 빌드 메뉴의 *LOD 빌드* 를 선택해서도 가능합니다.

### 프로시저럴 폴리지 생성기 (실험단계)

거대한 (또는 작거나 중간 크기라도) 폴리지 인스턴스 구역을 빠르게 순차 생성하는 실험단계 기능이 새로 생겼습니다.

![image alt text](image_4.png)

* Foliage Type (폴리지 타입) 애셋에 시뮬레이션 도중 식물군의 성장 및 확산 방식을 조절할 수 있는 프로퍼티가 생겼습니다.

* 다수의 프로시저럴 폴리지 타입을 동시 시뮬레이션하여 전체 숲 조성이 가능해 졌습니다!

### 돌려보기 가능 네트워크 리플레이

언리얼 엔진 게임에 완벽한 게임 리플레이 녹화 및 재생 기능이 지원됩니다. 4.8 에 새로 등장한 기능으로, 네트워크 리플레이 재생 중 특정 시간대로 "스크러빙" 하여 돌려보는 것이 가능합니다!

![image alt text](image_5.jpg)

Shooter Game 에서 이 기능을 확인해 보세요.

* 메인 메뉴에서 새 게임을 호스팅합니다.

* 봇으로 채웁니다 (재미지게 하기 위해서요).

* "Record Demo" (데모 녹화) 기능이 켜져있는지 확인합니다.

* 경기를 진행합니다.

* 충분히 찍었으면 메인 메뉴로 빠져나갑니다.

* 메인 메뉴에서 "Demos" (데모)를 선택합니다.

* 리플레이 브라우저에서 저장한 리플레이를 찾은 다음 선택하여 재생합니다.

 

리플레이 재생 도중:

* 마우스 휠로 재생 속도를 조절합니다.

* 화면에 일시정지/재생 버튼이 있습니다.

* 타임라인 바 아무데나 클릭하여 해당 위치로 스크러빙 가능합니다!

 

기본적으로 엔진은 리플레이를 로컬에 저장하도록 환경설정되어 있습니다. 리플레이 스트리머를 쉽게 바꿀 수 있는 시스템이 있어, 이를 통해 리플레이를 로컬에 저장하는 스트리머를 사용하거나, 스트리밍 지원 클라우드에 리플레이를 저장하도록 디자인된 스트리머를 사용할 수도 있습니다. 자세한 내용은 앞으로의 릴리스에 공개됩니다!

### 하이 퀄리티 뎁스 오브 필드 및 톤 매핑

![image alt text](image_6.gif)(convert:false)

* "Circle DOF" (원형 DOF) 라는 뎁스 오브 필드 알고리즘이 새로 생겼습니다.

    * 원형 보케와 인/아웃 포커스가 멋지게 전환되는 하이 퍼포먼스 DOF 기법입니다.

    * 원형 DOF 는 물리적 카메라 파라미터를 통해 제어됩니다: fstop, 초점 길이, 초점 거리

    * 거리 기반 블러링을 지원, 대기에 퍼지는 빛의 산란 효과를 시뮬레이션합니다.

* 새로운 필름같은 색 및 톤 반응

    * Academy Color Encoding System (ACES) 에 일치됩니다 ([http://www.oscars.org/science-technology/sci-tech-projects/aces](http://www.oscars.org/science-technology/sci-tech-projects/aces))

    * 부가적인 컬러 그레이딩 및 화이트 밸런스를 추가했습니다.

    * 32x32x32 LUT 에 구워넣어 전보다 50% 빨라졌습니다.

    * 활성화는 r.TonemapperFilm 1 입니다.

### 폴리지 에디터 디자인 변경

폴리지 에디터가 최근 디자인이 변경되었습니다! 사용성이 개선되었을 뿐만 아니라, 새로운 레이아웃을 통해 한 번에 팔레트에서 보다 많은 수의 폴리지 타입 작업을 더욱 쉽게 할 수 있게 되었습니다.

![image alt text](image_7.jpg)

* "Add Foliage Type" (폴리지 타입 추가) 버튼으로 폴리지 뷰에서 바로 새로운 폴리지 타입을 쉽게 생성할 수 있습니다.

* 폴리지 썸네일에 표시여부 토글 및 애셋 저장용 버튼뿐 아니라, 총 인스턴스 수까지도 알 수 있습니다.

* 다중 선택을 통해 한 번에 다수의 폴리지 타입 활성화 또는 비활성화가 가능합니다.

### 오픈월드용 다이내믹 내비게이션 메시

대규모 오픈 월드에 다이내믹 내비메시를 지원하는 전혀 새로운 시스템이 생겼습니다.

![image alt text](image_8.gif)(convert:false)

* 엔진에서는 이제 필요한 영역에 요청이 있을 때 동적으로 내비메시를 생성합니다.

* 이 기능을 켜려면, 프로젝트의 내비게이션 시스템을 이 모드로 환경설정하고 연관된 액터에 Navigation Invoker Component 를 추가합니다.

### 새로운 언리얼 예제 캐릭터

새로운 고해상도 버전의 언리얼 예제 캐릭터가 템플릿에 포함되었습니다!

![image alt text](image_9.jpg)

* 고해상도 모델과 모바일 디바이스에 적합한 저해상도용, 두 가지 버전이 있습니다.

* 포함된 것은 고해상도 버전으로, 저해상도 캐릭터는 마켓플레이스에서 무료로 구하실 수 있습니다!

### 언리얼 모션 그래픽 UI 용 커브 편집

언리얼 모션 그래픽에 커브 에디터가 생겼습니다!

![image alt text](image_10.png)

* 위젯 애니메이션에서 수치 값 트랙을 선택, 새로운 커브 에디터를 사용하여 그 값을 애니메이팅 가능합니다.

* 새로운 Transport (이동) 제어 버튼으로 애니메이션을 미리보면서 재생, 되감기, 반복도 가능합니다.

### 반투명 표면에 스크린 스페이스 리플렉션

이제 반투명 표면이 화면상의 다른 오브젝트를 동적으로 반사시킬 수 있습니다!

* 반투명 머티리얼에 'Screen space reflections' (스크린 스페이스 리플렉션) 옵션으로 활성화시킵니다.

![image alt text](image_11.jpg)

### 빠른 창 전환 (Ctrl+Tab)

이제 Ctrl+Tab 키로 여러가지 애셋 에디터와 툴 전환을 위한 팝업 메뉴를 띄울 수 있습니다.

![image alt text](image_12.jpg)

* Ctrl+Tab 또는 Shift+Ctrl+Tab 키를 누르면 최근 열었던 순서대로 애셋을 순환시켜 보여주며, Ctrl 키를 놓으면 선택된 애셋을 활성화시킵니다.

* 현재 선택된 애셋에 대해 에디터에서 툴 탭을 활성화시킬 수도 있으며, 마우스를 사용해서 콘텐츠 브라우저에 애셋을 표시할 수도 있습니다.

### 랜드스케이프 그래스 툴

풀 렌더링 시스템에 메시 인스턴스를 구성하는 에디터 신기능이 추가되었습니다.

![image alt text](image_13.jpg)

* 각 풀 유형은 새로운 '랜드스케이프 그래스 타입' 애셋으로 부연 설명되며, 각 그래스 타입은 다수의 스태틱 메시를 지정하여 다변화시킬 수 있습니다.

* 랜드스케이프의 머티리얼에서 그래스 덴시티 (풀 밀도) 맵이 생성됩니다. Landscape Grass Output 노드를 랜드스케이프 머티리얼에 추가시키고, 하나 이상의 Landscape Grass Type 애셋을 할당해야 합니다. 각 그래스 타입별로 새로운 입력 연결이 나타나며, 이를 통해 풀의 밀도를 지정할 수 있습니다.

* Landscape Layer Sample 노드를 직접 연결하면 랜드스케이프 레이어에 풀 밀도를 지정하는 것이 가능합니다. 노드 망을 연결해서 표면 노멀이나 고도에 따라 풀 배치를 자동 제거한다든가, 다수의 랜드스케이프 레이어를 사용한다든가 하는 복잡한 배치 규칙을 만드는 것도 가능합니다.

### 액터 블루프린트 인스턴스의 프로퍼티 편집

서브클래스에서와 마찬가지로, 블루프린트의 컴포넌트 섹션에 추가된 컴포넌트의 프로퍼티도 액터 단위로 변경 가능합니다.

* 액터 프로퍼티와 마찬가지로, 변경된 컴포넌트 프로퍼티 역시 블루프린트에 적용 버튼으로 블루프린트 디폴트에 적용시킬 수 있습니다.

* 몇 가지 주의점: 컨스트럭션 스크립트로 생성된 컴포넌트는 변경 불가능하고, 컨스트럭션 스크립트로 컴포넌트상에서 변경된 프로퍼티 역시 인스턴스에서 변경 불가능하며, 액터 디테일 패널에 읽기전용으로 나타납니다. 하지만 컨스트럭션 스크립트에서 프로퍼티 값을 디폴트로 명시적 설정하는 경우, 전혀 설정하지 않도록 하는 것과 구분할 수가 없어서 인스턴스 레벨에서 편집 가능할 것입니다.

### 애셋 사이즈 매퍼

애셋이 메모리를 얼마나 차지할지 궁금한 적 있던가요? 자, "**Size Mapper**" (사이즈 매퍼)라는 에디터 신기능으로 알아내는 데 도움이 됩니다!

![image alt text](image_14.gif)(convert:false)

* 모든 종속성을 포함해서 애셋에 사용된 메모리를 표시해 줍니다. 마우스 휠을 사용해서 레퍼런싱된 애셋을 깊이 파고 내려갈 수도 있으며, 더블클릭으로 콘텐츠 브라우저에 해당 애셋으로 점프할 수도 있습니다.

* 한 번에 다수의 애셋 사이즈를 확인할 수도 있습니다! 사이즈 매퍼는 선택된 애셋에 공유된 모든 애셋을 별도의 탑 레벨 그룹 안에 표시해 줍니다.

* 이 기능은 모든 에디터에서 접근 가능합니다:

* **콘텐츠 브라우저**:  애셋 (또는 애셋이 가득 들어있는 전체 폴더)에 우클릭한 다음 "Size Map" (사이즈 맵) 을 선택하면 됩니다.

* **레벨 에디터**:  액터에 우클릭한 다음 "Size Map" (사이즈 맵), 또는 액터를 선택한 상태로 Alt+Shift+M 을 누르면 됩니다.

* **레퍼런스 뷰어**:  노드에 우클릭한 다음 "Size Map" (사이즈 맵)을 선택합니다.

* **아무 애셋 에디터**:  파일 메뉴를 열고 "Size Map" (사이즈 맵)을 선택합니다.

### 공유 에디터 레이아웃 및 키바인딩

에디터 레이아웃 및 키바인딩 세팅이 모든 프로젝트에 공유됩니다!

예전에는, 모든 프로젝트가 별도의 레이아웃/키바인딩 세팅을 저장하고 있었어서, 프로젝트를 전환할 때마다 레이아웃 재배치 작업을 하려면 번거로웠습니다. 앞으로는 보다 많은 에디터 개인설정을 모든 프로젝트에 공유되는 전역 설정으로 옮기도록 하겠습니다.

### 그래프 에디터내 와이어 작업

이제 아무 그래프 에디터에서나 와이어 직접 작업이 가능합니다!

![image alt text](image_15.gif)(convert:false)

* Alt+좌클릭으로 연결을 끊습니다.

* Ctrl+좌클릭 드래그로 연결을 다른 핀으로 옮깁니다.

* 와이어에 커서를 올려 강조하거나 관련된 핀의 툴팁을 확인합니다.

* 더블클릭으로 재경유 노드를 삽입합니다 (블루프린트 그래프 전용)

### 프로시저럴 메시 컴포넌트 (실험단계)

새로운 프로시저럴 메시 컴포넌트를 통해 C++ 나 블루프린트를 사용해서 실행시간에 메시를 생성할 수 있습니다.

![image alt text](image_16.jpg)

* 기존 커스텀 메시 컴포넌트와 비슷하지만, (머티리얼) 다중 선택, 콜리전 지원, 노멀 / 탄젠트 / UV / 버텍스별 컬러 지정같은 기능이 많이 추가되어 있습니다.

* 메시 버텍스 위치와 UV 를 준 상태에서 부드러운 노멀과 탄젠트를 생성하는 함수가 포함된 유틸리티 라이브러리도 포함시켰습니다.

### 자동 컨벡스 콜리전 메시 강화

스태틱 메시 에디터를 사용하여 모델의 콜리전 메시를 자동 생성할 때, 생성된 메시의 퀄리티가 훨씬 향상되고 완료 시간도 훨씬 빨라질 것입니다!

![image alt text](image_17.jpg)

### 환경설정 가능 애니메이션 노티파이 트리거

애니메이션 노티파이 트리거 발동 시점 조절에 도움이 되는 세팅이 모든 노티파이에 새로 추가되었습니다:

![image alt text](image_18.jpg)

* **Notify Trigger Chance** 노티파이 트리거 확률 - 0.0 에서 1.0 사이 수치로 노티파이 발동을 위한 확률을 나타냅니다 (0.0 = 발동 안됨, 1.0 = 항상 발동)

* **Notify Filter Type** 노티파이 필터 유형 - 노티파이에 적용할 필터링 모드로, 현재 두 가지가 있습니다:

    * *No Filtering* 필터링 없음 - 노티파이가 (Trigger Chance 세팅을 통과했다 가정하고) 항상 발동됩니다.

    * *LOD* LOD - 소유 메시가 이 LOD 이하일 경우에만 이 노티파이가 발동됩니다. 예를 들어 세팅이 2 이면 LOD 는 메시 컴포넌트가 LOD 0 또는 1 에 렌더링중일 때만 트리거가 발동됩니다.

### 요청시 애셋 쿠킹 ("Cook on the Side")

* "Cook on the Side" 는 새로운 프로젝트 세팅으로, 게임을 디바이스에서 매우 빠르게 시작시킬 수 있습니다.

* 게임에 이 기능을 켜려면, 프로젝트 세팅의 Cooker 섹션에서 "Enable cook on the side" 옵션을 확인하면 됩니다.

    * 켜면, Launch On (실행) 버튼은 에디터 안에서, 요청이 있을 시, 네트워크를 통해 모든 애셋 쿠킹을 합니다. 이를 통해 ("Cook on the Fly" 기능을 사용할 때와 비슷하게) 게임 시작이 훨씬 빨라집니다.

    * 게임을 디버거같은 것에서 실행중일 때는, -filehostip=xx.xx.xx.xx (에디터 실행중인 컴퓨터의 IP 주소) 옵션을 붙여서 실행해 줘야 합니다.

* 4.8 이전에 이 기능은 실험단계 기능으로 있었습니다. 이제 4.8 에서는 완벽 지원됩니다!

### **다운로드 가능 콘텐츠 (DLC) 지원**

* DLC (다운로드 가능 콘텐츠) 쿠킹이 지원됩니다. 이를 통해 나중에 사용자에게 배포시킬 수 있는 Pak 파일을 만들 수 있습니다.

    * 선택을 통해 DLC 가 (에픽에서 주기적으로 바꾸는) Engine 콘텐츠를 레퍼런싱하지 않도록 할 수 있습니다.

    * 언리얼 프론트엔드에서, 커스텀 프로파일을 만든 다음, Cook -> Release / DLC / Patch Settings -> Include Engine Content 를 선택합니다. 

### **콘텐츠 패치 지원**

이제 기존 게임 릴리즈에서 변경된 콘텐츠 파일만 포함된 패치 파일을 생성할 수 있습니다!

![image alt text](image_19.jpg)

* 새로운 애셋을 원래 발매된 게임에 있던 파일과 비교하여 생성합니다. (위와 같이) 새로 생긴 언리얼 프론트엔드 세팅을 확인해 보세요.

* 게임 발매시 프로젝트 런처의 "Create release version" (릴리즈 버전 생성) 박스를 체크한 다음 이름을 ("1.0" 식으로) 짓습니다.

* 그 릴리스 기준 패치를 생성하려면, 프로젝트 런처에서 "generate patch" (패치 생성) 박스를 체크합니다.

### 현지화 대시보드

이제 현지화 대시보드를 실험단계 기능으로 사용 가능합니다. 이 기능을 사용해서 프로젝트의 현지화 파이프라인을 관리할 수 있습니다.

![image alt text](image_20.jpg)

* 현지화 타겟 (현지화 데이터 세트) 관리 및 대상 컬처 (언어, 지역, 스크립트) 지정이 가능합니다.

* 기존 현지화 데이터 관련 현안 관리는 물론, 현지화 데이터 관련 모든 부분이 여기에 모여있습니다.

### Paper2D:  스프라이트 텍스처에 직접 칠하기

스프라이트 컴포넌트는 페인트 모드에서 선택 및 페인트 가능합니다.

![image alt text](image_21.gif)(convert:false)

* 소스 텍스처, 부가 텍스처, 머티리얼을 통해 레퍼런싱된 텍스처 등을 선택해서 칠할 수 있습니다.

* 주: 텍스처 페인트 모드만 지원되며, 버텍스 페인트 모드는 현재 스프라이트 컴포넌트와 작동하지 않습니다.

### Paper2D:  타일 맵이 실험단계 기능에서 초기 접근 미리보기 단계로 승격

![image alt text](image_22.png)

* 이제 블루프린트에서 타일 맵 컴포넌트로 프로그래밍적 작업하는 것이 (질의를 통해서는 처음부터 만드는 것이든) 완벽 지원됩니다.

* 타일 맵 컬러는 이제 레이어 단위는 물론 전체 타일 맵 단위로도 제어 가능합니다.

* 이제 Staggered Isometric (시간차 등각 투영) 및 Staggered Hexagonal (시간차 육각 투영)이 지원되며, 모든 모드에서 그리드/커서 미리보기가 향상되었습니다.

* 회전 및 반전 타일이 지원됩니다.

* 작업/편집방식이 여러모로 개선되었습니다 (레이어 작업용 키바인딩, 예상대로 작동하는 드래그 앤 드롭, Shift+좌클릭+드래그로 기존에 칠한 타일 선택 가능, 등).

* 콜리전 지오메트리와 커스텀 메타데이터 키를 타일 세트 에디터에서 타일 단위로 지정할 수 있게 되었습니다.

	![image alt text](image_23.png)

### Paper2D:  다수의 짝 텍스처를 요하는 스프라이트 지원

스프라이트용 머티리얼에 부가 텍스처 '슬롯'을 정의하여 각 스프라이트 애셋 내 실제 텍스처를 정의하여, 다중 텍스처 스프라이트를 쉽게 사용할 수 있게 되었습니다.

* 이것을 사용하기 좋을 몇 가지 예제라면, 부가 마스크 텍스처가 필요한 커스텀 머티리얼 (예: 진동형 발광 눈/선), 노멀 맵이 할당된 라이팅포함 스프라이트, 안드로이드에서의 ETC1 압축용으로 반투명 텍스처를 (하나는 알파 데이터가 들어간) 불투명 텍스처 둘로 나누는 것입니다.

* 머티리얼에 SpriteTextureSampler 노드를 배치, 각각 소스 텍스처에서 샘플링할지 부가 텍스처 중 하나에서 샘플링할지를 정의합니다.

* 스프라이트 애셋에 부가 텍스처를 연결합니다.

	![image alt text](image_24.png)

* 스프라이트를 생성하거나 스프라이트 시트를 임포트할 때, 소스 폴더에 베이스 텍스처와 같은 이름에 _N 또는 _Normal 접미사가 붙은 것이 있는지 자동 검사한 다음, 있으면 0 번 부가 텍스처 슬롯에 자동으로 연결해 줍니다. 이 부분은 프로젝트 세팅 (Paper2D - Import) 에서 환경설정 가능합니다.

* 주: 각 텍스처가 반드시 같은 크기일 필요는 없지만, 특정 스프라이트에 해당하는 부분은 각각 같은 상대 위치여야 합니다 (스프라이트당 정의되는 소스 구역은 딱 하나입니다).

### Paper2D:  빠른 2D 레벨 레이아웃을 위한 스냅 레이어

2D 스냅 레이어는 2D 게임 (또는 게임플레이가 2D 인 3D 게임) 작업시 레벨 레이아웃 관리를 편하게 해 줍니다.

* 스냅 레이어를 사용하면 지정된 레이어에 액터를 자동 또는 수동 스냅시킬 수 있습니다 (예: 전경, 배경, 플레이 공간).

* 스냅 레이어 기능에 대한 세팅은 프로젝트 세팅 - 2D 에 있습니다.

	![image alt text](image_25.jpg)

* 전체 기능을 켜거나 꺼서, 에디터 뷰포트 내 스냅 레이어 콘트롤 존재 여부를 제어할 수 있습니다.

* 스냅 축과 스냅 깊이 / 이름 역시도 커스터마이징 가능합니다.

* 레이어 스냅 모드가 켜졌을 때, 새로 배치되는 액터는 자동으로 활성 스냅 레이어에 달라붙습니다.

* 언제든지 (심지어 꺼졌을 때도) 키보드 단축키 시리즈를 사용해서 활성 스냅 레이어에 갖다붙이거나 레이어 변경이 가능합니다.

	![image alt text](image_26.jpg)

* 현재 레이어 스냅 (Ctrl+SpaceBar)

* 선택 레이어를 한 단계 위로 이동 (Ctrl+PageUp, 활성 레이어 역시 변경)

* 선택 레이어 한 단계 아래로 이동 (Ctrl+PageDown, 활성 레이어 역시 변경)

* 선택 레이어를 맨 위 레이어로 이동 (Shift+Ctrl+PageUp, 활성 레이어 역시 변경)

* 선택 레이어를 맨 아래 레이어로 이동 (Shift+Ctrl+PageDown, 활성 레이어 역시 변경)

* 활성 스냅 레이어 앞으로 순환 (Alt+PageUp)

* 활성 스냅 레이어 뒤로 순환 (Alt+PageDown)

### Paper2D:  대화식 스프라이트 추출 대화창

스프라이트 추출 대화창은 텍스처에서 스프라이트를 분리해 내는 데 대해 보다 세밀한 제어가 가능하여, Paper2D 에 사용할 애셋 임포트/준비 작업이 빠르고 쉬워집니다.

* 대화창을 띄우는 방법은 콘텐츠 브라우저에서 텍스처 맥락 메뉴에 스프라이트 액션 - 스프라이트 추출을 하거나, 기존 스프라이트의 경우 소스 구역 편집 모드에서 툴바 버튼을 사용하면 됩니다.

	![image alt text](image_27.gif)(convert:false)

* 생성되는 스프라이트에 대한 이름 규칙과 시작 오프셋을 지정하면 됩니다.

* 모드가 두 가지 있는데, Automatic (자동) 및 Grid-based (그리드 기반)입니다.

    * 자동은 연속 픽셀군을 식별하여 각각을 하나의 스프라이트로 취급하는 것으로, 여러 종류의 애셋이 잘 돌아가지만, 높이가 다르거나 파티클 시스템처럼 스프라이트를 너무 많이 만드는 플립북 애니메이션의 경우에는 커스텀 피벗이 필요할 수 있습니다.

    * 그리드 기반은 한 그리드 셀의 폭/높이를 지정할 수 있는 것으로, (같은 텍스처를 공유하는 다른 크기 그리드가 있는 경우) 옵션을 통해 추출할 셀의 폭/높이를 지정할 수 있습니다.

### Paper2D:  그룹 스프라이트 컴포넌트

 그룹 스프라이트 컴포넌트는 하나 이상의 스프라이트 애셋으로 된 다수의 인스턴스를 최소한의 뱃치를 통해 한꺼번에 그리는 것이 가능합니다 (별개의 머티리얼 또는 텍스처는 여전히 뱃치에서도 나뉩니다).

![image alt text](image_28.png)

* 그룹 작업은 꽤나 간단합니다:

    * 3D 메시의 경우 UInstancedStaticMeshComponent 를 사용하는 것과 같은 방식으로 프로그래밍적 빌드가 가능하나, 제약이 적습니다 (스프라이트와 머티리얼을 하나로 혼합/일치시킬 수 있으며, 필요한 경우 추가 드로 콜을 생성합니다).

    * 레벨 에디터에 선택된 것이 전부 스프라이트 액터인 경우 디테일 패널의 Merge (병합) 버튼을 사용해서, 선택이 섞인 경우 우클릭 맥락 메뉴를 통해 그룹 컴포넌트로 변환할 수 있습니다 (스프라이트 오브젝트가 아닌 경우는 놔두고, 스프라이트 액터는 삭제한 뒤 병합된 액터로 대체합니다).

    * 무언가 이동/위치 조정을 해야할 필요가 있는 경우 스프라이트 그룹을 다시 별개의 액터로 나눈 뒤 이동하고서 재병합하면 됩니다.

    * 렌더링 프로젝트 세팅 TranslucencySortAxis 에 따라 소팅이 가능하여, 반투명 스프라이트가 포함된 뱃치가 제대로 렌더링되게 할 수 있습니다.

* 주: 그룹 내 모든 스프라이트는 하나 또는 소수(머티리얼 및 텍스처에 필요한 최소 횟수) 드로 콜로 그려집니다. 무슨 뜻이냐면:

    * 컬링은 전체 유닛별로 이루어집니다. 올 오어 낫띵, 모든 인스턴스를 그리느냐 아니면 아무 인스턴스도 그리지 않느냐지요. 맵의 한 쪽 끝에서 다른 쪽 끝까지 이어지는 스프라이트를 그룹으로 삼지는 않는 것이 좋을 것입니다.

    * 소팅은 전체 유닛별로 이루어집니다. 반투명 전경 스프라이트 조금, 반투명 배경 스프라이트 조금 있는 경우, 같이 그룹으로 묶지 않는 것이 좋습니다. 소트 버튼을 통해 서로를 기준으로 올바르게 소팅되기는 하지만, 중간의 반투명 플레이어가 그 사이를 지나가지는 못합니다. 그 둘의 앞 또는 뒤에만 그려지기 때문입니다.

    * 이런 종류의 소팅 문제는 반투명 머티리얼에만 해당하는 것으로, 마스크드 머티리얼에는 이런 문제가 없지만 이항 (0 또는 1) 불투명도에만 통합니다.

### 'Interpolate To' 컴포넌트

새로운 "Interpolate To" Movement 컴포넌트를 액터에 드롭할 수 있습니다. 그러면 액터가 자동으로 움직입니다!

![image alt text](image_29.gif)(convert:false)

* 다수의 보간 지점 지정은 물론, (루핑, 핑퐁 등) 여러가지 작동방식 옵션이 가능합니다.

### 대규모 안드로이드 게임 지원

Google Play Store 에서의 .obb (큰 데이터) 파일 다운로드를 지원합니다.

![image alt text](image_30.png)

* 가끔 데이터 파일이 스토어에서 다운로드되지 않는데, 이를 통해 게임 다운로드 및 실행이 보장됩니다.

* 다운로드 화면의 커스텀 백그라운드 이미지 지원이 가능합니다.

### 윈도우에서 iOS 프로젝트 빌드 (원격)

SSH 를 사용해 원격 맥에서 iOS 코드 프로젝트를 빌드하는 기능이 지원됩니다.

![image alt text](image_31.png)

* 요구사항:

    * Xcode 가 설치된 맥에 로그인해야 합니다.

    * **system keychain** 에 iOS Signing Certificate 가 설치되어 있어야 합니다.

    * 윈도우용 [DeltaCopy](http://www.aboutmyip.com/AboutMyXApp/DeltaCopy.jsp) 또는 다른 SSH 및 Rsync 소프트웨어가 필요합니다.

* Generate SSH Key 버튼으로 로컬 인증서를 생성해야 컴파일시 암호를 요구하지 않습니다.

    * 키를 소스 콘트롤에 체크인하여 팀과 공유할 수 있습니다.

    * DefaultEngine.ini 의 bUseRsync 를 false 로 설정하는 것으로 지원되지 않는 기존의 (UnrealRemoteTool) 방식을 계속해서 사용할 수는 있습니다.

### 버텍스 애니메이션 머티리얼용 모션 블러 및 안티앨리어싱

World Position Offset 을 사용한 버텍스 애니메이션이 있는 머티리얼은 이제 정확한 모션 벡터 출력이 가능합니다. 모션 벡터는 순차 애니메이션에서 픽셀별 모션 블러가 가능합니다. 추가적으로 템포럴 안티앨리어싱 및 디스턴스 필드 앰비언트 오클루전 역시 바람직하지 못한 블러링 방지를 위해 올바르게 재투영 가능합니다.

World Position Offset 으로 애니메이팅되는 나무에서의 픽셀별 속도 시각화입니다.

![image alt text](image_32.png)

* 새로운 프로젝트 세팅 'Accurate velocities from Vertex Deformation' (버텍스 변경해서 정확한 속도)를 켜야합니다. 이 기능은 베이스 패스 도중 모션 벡터가 출력되도록 만드는데, 이런 머티리얼 사용 여부에 따라 약간의 퍼포먼스 비용이 발생합니다. 이 세팅을 변경하면 에디터를 재시작해야 합니다.

* 'Support accurate velocities from Vertex Deformation' (버텍스 변형에서 정확한 속도 지원) 세팅을 통해 머티리얼별로 이 기능을 끌 수 있습니다.

* Speedtree 바람 노드는 'Accurate Wind Velocities' (정확한 바람 방향) 옵션을 켜야합니다.

* 참고로 이 기능은 시간 변환에 따른 속도만 지원하며, 블루프린트나 게임 코드로 설정된 파라미터는 지원되지 않습니다.

### 멀티 스레드 비동기 애셋 로딩

쿠킹된 빌드는 패키지 스트리밍에 타임 슬라이스 방식 대신 패키지 스트리밍 전용 스레드를 사용할 수 있습니다. 이 옵션은 프로젝트에 새로 생긴 환경설정 옵션으로 켤 수 있습니다. 그러면 애셋 비동기 로딩 시간이 최대 3 배 빨라집니다!

* PostLoad 의 경우 여전히 메인 스레드에서 타임 슬라이스 방식으로 이루어지는데, 대부분의 PostLoad 함수가 스레드 안전성이 확보되지 않았기 때문입니다.

* 이제 UObject 와 UStruct 용으로 정의된 Serialize 함수 모두 스레드 안전성이 확보되어야 합니다.

* 위 제약으로 인해 비동기 로딩 스레드는 기본적으로 꺼져 있는데, 모두에게 코드가 스레드 안전성 요건을 갖췄는지 확인할 시간을 드리기 위함입니다. 비동기 로딩 스레드는 [Core.System] 섹션 아래 AsyncLoadingThreadEnabled 세팅으로 켤 수 있습니다.

* 비동기 로딩 스레드는 멀티스레드를 지원하지 않는 플랫폼이나 데디케이티드 서버에서는 자동으로 꺼집니다.

* UObject 생성은 이제 스레드 안전성이 확보되어 워커 스레드에서 수행 가능합니다. 여기에는 모든 UObject 파생 클래스 생성자 역시 스레드 안전성이 확보되어야 합니다.

* StaticFindObject, FindObject, FindObjectFast 함수 역시도 이제 쓰레드 안전성이 확보되었습니다. 워커 스레드에 사용되고 반환값이 스택에서만 레퍼런싱된 경우, 해당 오브젝트가 어떤 것에도 레퍼런싱되지 않은 것으로 가비지 콜렉터가 간주할 수 있다는 점을 염두에 두시기 바랍니다.

* 현재 영역이 워커 스레드에서 실행중인 동안에는 GC 실행을 막는다는 점만 빼면 FScopeLock 와 비슷한 기반으로 작동하는 FGCScopeGuard 헬퍼 구조체를 도입했습니다.

* 워커 스레드가 FGCScopeGuard 영역 안에서 코드를 실행하는 경우 가비지 콜렉션을 생략시키는 TryCollectGarbage 함수를 도입했습니다. TryCollectGarbage 는 이제 레벨 틱 코드에 기본으로 사용됩니다.

* 비동기 로드율은 `stat levels` 를 통해 접근 가능하며, 이제 PostLoad 를 계산에 넣습니다.

## 릴리즈 노트

### AI

* AI: EQS 에 블루프린트 지원

    * 이제 블루프린트에서 인바이언먼트 쿼리 시스템(EQS)을 사용할 수 있습니다!

	![image alt text](image_33.jpg)

	* 쿼리 실행시 '쿼리 인스턴스' 를 얻는데, 여기에는 쿼리가 끝나면 발동되는 On Query Finished Event 라는 이벤트가 있습니다. 인스턴스에는 쿼리 결과 접근을 위한 함수도 있습니다.

* Perception Component 에 주어진 맥락에서 인지되는 모든 액터를 구하는 함수를 추가했습니다.

* 뱃치 길찾기 EQS 테스트를 추가했습니다. 단일 지역의 다수 항목에 대한 점수를 매기는 퍼포먼스는 더 좋으나, 서로간에 멀리 떨어져 있는 소수 항목에 대해서는 적합하지 않습니다.

* DestroyAllPawnsExceptTarget 콘솔 명령을 추가, 가리키는 중인 논-플레이어 폰 이외 모든 것을 소멸시킵니다.

* 다중 컨텍스트에 대해 EQS 테스트의 스코어/필터링에 대한 새로운 모드를 추가했습니다.

* EQS 쿼리에서 하나의 결과를 선택하는 모드를 추가했습니다: 최고 (상위 `5%`) 항목 중 랜덤, 좋은 (상위 `25%`) 항목 중 랜덤 입니다.

* EQS 제너레이터에 PhysX 기반 투영이 지원됩니다.

* AI 인지 시스템이 개선 및 수정되었습니다.

    * AI 감각이 새로운 폰을 이 감각 자극원으로 자동 등록 요청하도록 할 수 있는 방법을 추가했습니다.

    * 감각이 이제 자극에 대해서 AI Perception 컴포넌트의 On Perception Updated 를 (시각처럼) 인지 상태가 변했을 때만 호출되도록 할 것인지, (청각처럼) 업데이트때마다 할 것인지를 지정할 수 있습니다.

    * 기본적으로 모든 폰이 시각 자극원으로 자동 등록되도록 만들었습니다.

    * 액터에 추가하면 그 액터가 AI 인지 시스템에 자동 등록되게 만드는 컴포넌트를 추가했습니다.

    * AI 노이즈 이벤트, 대미지 이벤트, 예측 업데이트 요청을 쉽게 만들 수 있는 블루프린트 함수를 추가했습니다.

* 표시여부 검사시 AI 가 자신의 폰을 무시하지 않도록 고쳤습니다.

* 블랙보드 컴포넌트가 블루프린트 스폰 가능하도록 하여, 블루프린트 사용자가 AI 콘트롤러 밖에서도 사용을 시작할 수 있도록 만들었습니다.

* 블랙보드의 키 이름을 키의 디테일 탭에서 편집가능하도록 만들었습니다.

* AI 에디터(비헤이비어 트리, EQS)에서 중첩 노드, 복사 & 붙여넣기, 드래그 & 드롭 작업이 통합 지원됩니다.

* 블랙보드 애셋에 대한 에디터 시간 변경사항이 해당 애셋에서 파생된 다른 모든 애셋에도 전파되도록 했습니다.

* AI Perception 컴포넌트의 Get Actors Perception 함수의 깨진 조건을 고쳐, while 함수가 어떤 정보도 반환하지 않아 무용지물이던 것을 고쳤습니다.

* AI 콘트롤러의 버그를 잡아, 이미 유혀한 폰이 설정되어 있는 상태에서 Null 폰을 빙의하기 위해 AI 콘트롤러를 호출한 경우 발생하던 크래시를 고쳤습니다.

* Blackboard 컴포넌트의 ClearValue (값 소거) 함수가 이름대로 작동하지 않던 것을 고쳤습니다.

* 인바이언먼트 쿼리 시스템 쿼리 에디터의 메뉴가 주어진 에디터 세션 도중 생성된 새 블루프린트 클래스를 포함하도록, 그리고 새로이 삭제된 클래스를 제거하도록 개선시켰습니다.

* 다수의 AI 인지 버그픽스 및 개선을 통해 블루프린트에서 사용가능한 상태로 만들었습니다.

* AISenseConfig_Blueprint 를 abstract 마킹하여 센스의 드롭다운 메뉴에 지저분하게 나타나지 않도록 했습니다.

* Character Movement Component 의 Set Avoidance Enabled 함수를 블루프린트 컨스트럭션 스크립트에 안전하지 않은 것으로 마킹했습니다. 거기서는 안전하게 호출할 수 없습니다.

* 내비메시에서의 중복 데이터 수집을 제거, 내비 메시 렌더링을 최적화시켰습니다.

#### 디버깅 툴

* 폰을 디버깅하려 했는데 맵에 내비게이션 데이터가 존재하지 않을 때 크래시가 발생하던 게임플레이 디버거 버그를 잡았습니다.

* 초기화되지 않은 블랙보드에서 비주얼 로그 스냅샷을 수집할 때 발생하던 크래시를 고쳤습니다.

#### 내비게이션

* 내비메시 타일을 동시 리빌드 갯수를 제한시키기 위한 방법이 추가되었습니다.

* 설정하면 멀티플레이어 클라이언트에서 내비게이션 시스템을 만들 수 있는 환경설정 가능 플래그를 내비게이션 시스템에 추가했습니다.

* 내비메시에 포함시킬 수 있는 총 타일 수를 제한하기 위한 환경설정 가능 옵션을 추가했습니다.

* 스태틱 메시 에디터에 스태틱 메시가 내비게이션 시스템에 어떻게 나타나는지 미리보는 기능을 추가했습니다. 그에 대한 툴바 버튼도 있습니다.

* 내비게이션 관련 액터의 내비게이션 콜리전 수집을 사후에 또는 즉시 하도록 하는 인스턴스별 환경설정 방식을 추가했습니다.

* 보다 안전한 파라미터 보정을 위해 내비메시 생성 프로퍼티의 유효성을 확인하는 방법을 추가했습니다.

* 동적인 장애물 생성을 포함해서 Shape Component 에 대한 내비게이션 익스포트를 추가했습니다.

* 내비게이션에 관련있는 프리미티브 컴포넌트에서 내비게이션 가능 지오메트리 익스포트를 생략하는 옵션을 추가했습니다.

* 내비메시 보행이 아래 놓인 지오메트리에 보다 가깝게 일치시키기 위한 옵션 레이캐스트를 추가했습니다.

* 내비메시 쿼리 크기에 대한 세로 보정을 추가했습니다.

* 내비메시 폴리곤과 보행가능 지면 사이의 높이차가 심한 영역의 내비메시 투영 방식을 고쳤습니다.

* 크라우드의 회피 질의 범위가 속도와 무관해 졌습니다.

* 커스텀 내비게이션 컴포넌트가 이제 부모 액터의 연관성을 덮어쓸 수 있습니다.

* 충돌 우회 해상도를 커스터마이징 가능한 내비게이션 시스템 세팅으로 노출시켰습니다.

* 실패한 이동 요청에 대한 AI 콘트롤러의 로그를 개선시켰습니다.

* 내비게이션 링크는 이제 스냅 반경 내 최저비용 지역으로 연결됩니다.

* 내비게이션 메시에 런타임 리빌드용 옵션이 생겼는데, 다이내믹 모디파이어 전용입니다. 완전 정적인 내비게이션 메시와 똑같지만 내비메시 모디파이어를 통한 메시 변경을 지원합니다 (동적 장애물). 완전 동적인 버전에 비하면 약간의 메모리 부하가 추가됩니다. 스트리밍을 지원합니다.

* "AI Move To" 블루프린트 노드의 Acceptance Radius 파라미터 기본값을 조정하여 AI 안전성을 높였습니다.

* "항상 로드됨" 서브레벨에서 액터 처리를 제대로 하지 못했던 내비게이션 시스템 문제를 고쳤습니다.

* 사용자가 프로젝트 세팅을 통해 내비메시 생성 프로퍼티를 변경한 데 따른 내비메시 생성 크래시를 고쳤습니다.

* 에디터가 이제 내비게이션 메시의 청크를 제대로 스트림 인 할 수 있을 것입니다. 예전에는 게임 월드에서만 작동했었습니다.

* "AI Move To" 블루프린트 노드가 동적인 액터에 제대로 이동할 수 없던 버그를 잡았습니다. 목표 액터의 위치가 변경된 경우 AI 는 그냥 경로 업데이트를 하지 않습니다.

* 경로의 최종 지점이 내비메시 위에 있지 않아서 액터로 이동이 가끔 실패하던 것을 고쳤습니다. 실제로 이 점은 보통 내비메시 너무 위에 있었습니다.

* AI 가 외부 요인에 의한 내비게이션 경로 업데이트를 제대로 받지 못하던 것을 고쳤습니다. 예로 Move Goal Actor 의 위치가 변하는 경우입니다.

* AI 가 일직선 경로를 따라가려는데 레벨에 내비게이션 데이터(내비메시)가 없는 경우 발생하던 AI 길찾기 크래시를 고쳤습니다.

* AI 길 따라가기시 경로상 마지막 부분에서 동적인 골 액터로 따라가는 도중 AI 가 내비메시를 신경쓰지 않던 문제를 고쳤습니다.

* 내비게이션 데이터의 런타임 생성 옵션을 프로젝트 세팅에서 "스태틱" 으로 설정할 수 없었던 것을 고쳤습니다.

* AI 가 핫스팟 상호작용 또는 낙하 종료 후 이동 재개시의 자동 길 다시찾기를 고쳤습니다.

* (길찾기 없이) 직접 내비게이션 경로 사용시 나던 크래시를 고쳤습니다.

* 길찾기 없는 이동에 대한 크라우드 시뮬레이션을 고쳤습니다.

* 크라우드 시뮬레이션에서 희귀하게 AI 가 벽을 뚫고 바로 보내버리던 것을 고쳤습니다.

* 과대평가형 발견적 가중치를 사용해서 길찾기를 할 때의 주기를 고쳤습니다.

* 목표 이동 또는 무효화 이후 지연된 경로의 즉각 리빌드를 고쳤습니다.

* 에디터에서의 내비메시 렌더링 관련 문제를 고쳤습니다. 이제 다른 표시 플래그 옵션과 같아졌습니다.

* 내비메시 생성시 Min Region Area 파라미터가 사용되지 않던 것을 고쳤습니다.

* 스태틱 내비메시 로드 이후 내비게이션 링크가 빠져있던 것을 고쳤습니다.

* 내비게이션 시스템이 내비게이션 데이터를 생성할 것으로 기대하지 않는 경우 내비게이션 옥트리를 생성하지 않도록 정책을 고쳤습니다.

* 단일 레이어에 (255 셀을 초과하는) 거대한 높이차가 있는 경우 내비메시 생성시 발생하던 버그를 잡았습니다.

* 내비메시 계층형 그래프 연결의 버그를 잡았습니다.

* 속도가 제대로 보고되도록 내비메시 이동을 고쳤습니다.

* 내비메시 생성 프로퍼티 변경시 내비메시가 적당한 세팅으로 리빌드되지 않던 것을 고쳤습니다.

* 느리게 움직이는 에이전트가 가끔 떨던 것을 고쳤습니다.

* 새로운 경로 수신시 경로의 시작점을 결정하는 데 있어서 Path Following Component 에 있던 문제를 고쳤습니다.

* 단일 내비게이션 폴리곤 경로가 잘못해서 그 비용을 0 이라 하던 것을 고쳤습니다.

* 내비메시의 디테일 폴리곤 내 트라이앵글화 문제를 고쳤습니다.

* 에디터에서 플레이 세션 도중 단순 Move To 함수에 보고되던 경고를 고쳤습니다.

* 내비메시 경계 근처에서의 크라우드 회피를 향상 및 최적화시켰습니다.

* Primitive Component 가 내비메시 생성에 영향을 끼쳐야 하는지 알아내는 메커니즘을 향상시켰습니다.

* 컴포넌트의 내비게이션 연관성 결정에 있어 그 신뢰성 향상을 위한 변경을 가했습니다. 내비메시 생성시 컴포넌트의 콜리전 토글 영향력에 직접 영향을 끼칩니다.

* Floating Pawn Movement 를 변경, AI 에 소유되지 않았더라도 "플레이어같은" 입력으로 제어할 수 있도록 했습니다. 이러한 종류의 제어는 현재 AI 가 경로를 따라가지 않을 때만 가능합니다.

* 씬 프리뷰가 내비게이션 시스템 인스턴스를 생성하지 않도록 만들었습니다. 내비게이션 관련 이상한 결함 다수의 원흉이었습니다.

* 내비게이션 시스템이 내비메시 생성 퍼포먼스를 높이도록 향상되었습니다.

* 월드 컴포지션 관련 내비메시 생성 문제를 고쳤습니다.

### 애니메이션

* 애니메이션 슬롯 편집 개선

* 이번 릴리즈에는 (몽타주에 사용할) 슬롯 이름 변경 및 삭제 기능이 추가되었습니다.

* 이 신기능은 슬롯 그룹 창을 통해 접할 수 있습니다. 주: 사용자는 삭제 전 기존 몽타주 내 해당 슬롯에 대한 레퍼런스를 먼저 해결해야 합니다.

* 슬롯 매니저는 레퍼런스를 검색하여 통합 전 작업을 수행하겠냐고 물어봅니다.

	![image alt text](image_34.png)

* Humanoid Rig 에 커스텀 필드를 5 개 추가, 게임 전용으로 추가하는 데 쓸 수 있습니다.

* 본 이름에 음영을 추가, 페르소나 뷰포트에서 렌더링됩니다.

* 페르소나에서 애니메이션 편집 도중 프레임을 삽입하는 기능을 추가했습니다.

* 에디터 개인설정에 애니메이션 에디터 세팅 페이지를 추가했습니다.

    ![image alt text](image_35.png)

* 프로젝트 세팅에 애니메이션 세팅 페이지를 추가했습니다.

    ![image alt text](image_36.png)

* 페르소나의 애셋 미리보기 메뉴에 필터링을 추가, 붙일 수 없는 항목이 표시되지 않도록 했습니다.

* 액터 병합 도중 머티리얼 병합에 머티리얼 이름 로그를 추가했습니다.

* Look at 콘트롤러 보간/제한 옵션을 추가했습니다.

* AnimInstance 에 Montage_Pause 함수를 추가했습니다.

* 네이티브 트랜지션 룰에 대한 네이티브 지원을 추가했습니다.

* 상태 진입/종료 콜백에 대한 네이티브 지원을 추가했습니다.

* 스켈레탈 메시 업데이트율 최적화를 위해 모든 것에서의 루트 모션 지원을 추가했습니다.

    * 매 프레임 틱 필요 없이 루트 모션이 가능합니다.

    * 추후 일정 기간 이후의 포즈를 계산하여 그에 대한 보간을 합니다.

* 애님 노티파이 에디터 변경사항:

    * 기존 노티파이 노드에 대한 우클릭 메뉴에 "Replace with" (다음으로 대체) 옵션을 추가했습니다.

    * 동시에 다수의 애니메이션을 지우면 잘못된 노티파이가 지워지던 문제를 고쳤습니다.

* 애니메이션 스테이트 머신의 자동 트랜지션 룰 프로토타입

    * 트랜지션 노드에 넣을 수 있는 옵션으로, 소스 스테이트에 시퀀스 플레이어 노드가 딱 하나 있을 때만 사용 가능합니다.

    * 'can take transition' (트랜지션 수용 가능) 룰 계산식은 Player.CurrentTime + CrossfadeDuration >= Player.SequenceLength 입니다.

    * 이 옵션을 켜면 블루프린트에서 정의된 트랜지션 룰은 무시되고, C++ 에서 자동 룰을 직접 평가하여 룰이 충분할 때마다 속도와 작업방식상의 이점을 얻을 수 있습니다.

* Skeletal Mesh Component 의 Find Socket 함수를 블루프린트 시스템에 노출시켰습니다.

* 피직스 바디/콜리전 모양이 애니메이션에 일치되도록 업데이트하는 코드를 최적화시켰습니다.

* 최적화된 스테이트 머신 틱

    * 트랜지션 평가용 할당 및 재할당 대부분을 방지합니다.

    * C++ 룰이 있는 경우 블루프린트 트랜지션 룰 호출을 피합니다.

* 페르소나에 "Auto align floor to mesh" (바닥을 메시에 자동 정렬) 옵션을 껐다켰다 토글시키는 옵션을 추가했습니다.

	![image alt text](image_37.png)

* 예전에는 자동 정렬이 켜진 상태였습니다. 그러면 페르소나에서 메시 경계 하단에 정렬되도록 바닥을 이동시킵니다. 자동 정렬 옵션을 끄면 바닥을 원점으로 다시 이동시킵니다.

* 뷰포트의 표시 -> 씬 셋업 -> 바닥을 메시에 자동 정렬 메뉴를 통해 접근합니다.

* 이제 틱 도중 몽타주 이벤트를 대기열에 등록하여, 애님 노티파이 이후 발동되도록 했습니다.

* 애니메이션 임포트시 기존 모프 타겟 커브를 전부 지우는 옵션이 제공됩니다.

* 리타게팅 창 검색시 본 이름, 표시명, 노드명이 포함되도록 하는 기능을 추가했습니다.

* 애셋 저장이 필요함을 제대로 마킹해주는 애님 노티파이 스테이트를 애니메이션에 추가했습니다.

* 이제 페르소나에서 메시에 있지 않은 본을 클릭하여 본 선택을 해제시킬 수 있습니다.

* 리타게팅 옵션을 스켈레톤 탭의 고급 옵션으로 변경했습니다. 여러가지 다른 옵션이 많이 들어있습니다.

* 압축 종료후 애님 압축 대화창이 자동으로 닫히도록 변경했습니다.

* 콘텐츠 브라우저에서 애니메이션을 새로 만들지 못하도록 했습니다. FBX 파일을 임포트하는 것으로 애니메이션 애셋을 생성해야 합니다.

* FBX 임포트/익스포터는 이제 메시, 본, 머티리얼, 모프 타겟 이름에 UTF8 을 지원합니다.

* 애디티브 애니메이션에 루트 모션이 소거되지 않던 것을 고쳤습니다. 페르소나에서 프리뷰 메시가 움직이지 않아야 할 때 움직이게 만들었었습니다.

* 루트 모션의 곱하기 순서를 고쳤습니다.

* 싱크 그룹에서 애니메이션간의 블렌딩시 루트 모션 가중치 문제를 고쳤습니다.

* 애니메이션 그래프에서 기존 "Two Bone IK" 노드 선택시 발생하던 크래시를 고쳤습니다.

* 애니메이션 시스템을 깨뜨리던 다양한 음수 재생 속도 경우를 고쳤습니다.

    * 음수 재생 속도 도중 루트 모션 출력을 고쳤습니다.

    * 재생 속도가 -1 이고 현재 위치가 0 인 몽타주가 진행되지 않던 문제를 고쳤습니다.

    * 음수 재생 속도가 있는 세그먼트 포함 애님 몽타주의 역재생시 크래시를 고쳤습니다.

    * 음수 재생 속도 포함 몽타주 재생시 발생하던 무한 루프를 고쳤습니다.

    * 컴포짓 애니메이션에서의 음수 재생 속도 사용을 고쳤습니다.

    * Single Node Anim Instance 가 "is finished" 로직 수행시 애셋 재생 속도를 계산에 넣도록 변경했습니다.

* Blend Space 입력 미리보기가 처음 열었을 때는 작동하지 않던 문제를 고쳤습니다.

* Native Transition Delegate 가 컨듀잇 엔트리 룰 처리시에는 검사하지 않던 문제를 고쳤습니다.

* 리타겟 트랜슬레이션 옵션이 다른 압축 세팅에서 에디터 크래시가 나던 문제를 고쳤습니다.

* 본 드롭박스를 선택하면 리타겟 매니저에서 검색한 이후 표시되지 않던 문제를 고쳤습니다.

* 길이를 리샘플 레이트로 나눌 수 없는 애니메이션 임포트시 애니메이션 길이 계산이 잘못되던 것을 고쳤습니다.

* 시뮬레이션중이 아닐 때는 애니메이션 녹화를 할 수 없던 것을 고쳤습니다.

* 액터 병합 도중 출력 패키지 생성시의 버그를 고쳤습니다.

* "modify bone" 노드 본 이름을 None 으로 설정시 크래시를 고쳤습니다.

* 단일 키로 애니메이션 리타게팅을 시도할 때의 크래시를 고쳤습니다.

* 마스터 포즈 컴포넌트에서 본이 숨겨져 있을 때 슬레이브 본 숨김을 고쳤습니다.

* 부모가 구조적으로 변경되고 자손은 데이터 전용 블루프린트일 때 자손 애님 블루프린트의 인덱스 불일치가 잘못된 동작 및 크래시를 내던 것을 고쳤습니다.

* 노티파이 트랙 패널에서 패널 세로 스크롤이 트랙 패닝보다 우선시되던 문제를 고쳤습니다.

* 업데이트 속도가 단일 액터의 모든 스켈레탈 메시 컴포넌트에 제대로 적용되지 않던 문제를 고쳤습니다.

* Play Particle Effect 블루프린트 노티파이에 위치 오프셋 값이 제대로 걸리지 않던 것을 고쳤습니다.

* 컨스트럭션 스크립트에 마스터 포즈 컴포넌트가 할당될 수 있었던 것을 고쳤습니다.

* 몽타주가 발동된 이후 Blend Out Time 이 변경되면 몽타주가 멈추지 않던 것을 고쳤습니다.

* 모프 타겟 식별자가 가끔 로드시 깨지던 것을 고쳤습니다.

* 모프 타겟 로딩시 순서로 인해 똑똑한 이름이 깨지던 문제를 고쳤습니다.

* 싱크 그룹 포함 시퀀스 플레이어 노드에 대한 노드 제목 표시를 고쳤습니다.

* 몽타주의 애니메이션 시퀀스 끝에 있는 노티파이가 블렌드 아웃 때문에 발동되지 않던 것을 고쳤습니다.

* 더블 버퍼 본으로 인한 피직스 본 블렌딩 문제를 고쳤습니다.

* 재생중인 몽타주 변경시 페르소나의 플레이 상태가 리셋되는 것을 고쳤습니다. 

* 블렌드스페이스 프리뷰 관련 잠재적 크래시를 고쳤습니다.

* 컴포넌트 스페이스가 액터 스페이스에 일치하지 않을 때의 루트 모션 계산을 고쳤습니다.

* 애님 블루프린트 리타겟 도중 에임 오프셋이 제대로 변환되지 않던 것을 고쳤습니다.

* 레벨에 배치된 스켈레탈 메시 액터가 디테일 패널에서 애니메이션 변경시 애니메이션을 업데이트하지 않던 것을 고쳤습니다.

* 소켓이 붙어있는 본이 현재 LOD 의 일부가 아닌 경우 스켈레탈 메시의 소켓 위치가 잘못되던 것을 고쳤습니다. 

* 페르소나 프리뷰 인스턴스 삭제로 인해 발생된 스테이트 머신 업데이트 크래시를 고쳤습니다.

* Parallel Anim Evaluation 로 실행시 Spring Bone Controller 관련 크래시를 고쳤습니다.

* 스켈레탈 메시의 머티리얼 변경시 되돌리기가 정상 작동하지 않던 것을 고쳤습니다.

* 다수의 숨겨진 페르소나 인스턴스가 더이상 에디터 퍼포먼스를 갉아먹지 않도록 페르소나 내 뷰포트 표시여부 계산을 고쳤습니다.

* 스켈레톤 리임포트를 향상시켰습니다. 스켈레톤의 계층구조가 리임포트 도중 대폭 변경된 경우, 모든 애니메이션 애셋을 고칠 것입니다.

* Mixamo Fuse 로 생성된 메시 임포트 지원이 개선되었습니다.

* 에디터 리로드시 노티파이 스냅 문제를 개선시켰습니다.

* FBX 파일에서 커브 탄젠트 임포트 방식을 개선시켰습니다.

* 애님 노드 업데이트 방식이 약간 최적화되었는데, 하나 이상의 포즈가 아닌 입력 핀이 그래프의 표현식 또는 변수에 연결된 경우, 빠른 호출 경로를 사용합니다.

* 레퍼런스 스켈레톤에 대한 레퍼런스가 아닌 그냥 복사를 하던 애니메이션 코드를 최적화시켰습니다.

* 스테이트 머신 틱을 최적화시켰습니다.

    * 트랜지션 평가용 대부분의 할당 및 재할당 부분이 최적화되었습니다.

    * C++ 룰이 있을 때는 블루프린트 트랜지션 룰 호출을 피합니다.

* 스켈레탈 메시 LOD 에 버텍스가 0 인 경우의 크래시를 방지했습니다.

### 오디오

* 이제 각 PIE 창에 대해 고유의 오디오 디바이스 인스턴스가 생성될 것입니다.

    * 이를 통해 각기 다른 플레이어 관점에서 보다 정확한 오디오 재현이 가능합니다.

    * 한 디바이스는 에디터의 "메인" 오디오 디바이스이자 "실시간" 오디오가 재생되며, 새로운 PIE 세션에는 고유의 오디오 디바이스가 새로 생성됩니다.

    * 새로운 오디오 디바이스는 저사양 머신에서 에디터 퍼포먼스에 영향을 끼칠 수 있으므로, 현재 기본 오디오 디바이스 수는 2 입니다 (메인 오디오 디바이스에 1, PIE 세션에 1). PIE 세션이 1 이상이면 메인 오디오 디바이스를 사용하게 됩니다.

    * 실행되는 모든 PIE 세션에 대해 새로운 오디오 디바이스를 만들도록 하려면, 새로 생긴 고급 멀티플레이어 옵션이 있습니다.

		![image alt text](image_38.jpg)

* 오디오 컴포넌트의 Is Playing 함수가 이제 Pure 블루프린트 함수가 되었습니다.

* 내부 사운드 큐를 사용하는 앰비언트 사운드를 복사해 붙여넣어도 정상 작동합니다.

* 오디오 컴포넌트에 대한 통계 표시가 연관된 애셋을 포함시키지 않던 문제를 고쳤습니다.

* 소스 .wav 리임포트시 재생중이던 사운드가 재시작되지 않던 버그를 잡았습니다.

* 사운드 큐 에디터가 실행 경로를 표시하지 않던 문제를 고쳤습니다.

* "Log Reverse" 감쇠 함수 관련 수학 오류를 고쳤습니다.

* 오디오 애셋에 대한 메모리 통계 추적 관련 문제를 고쳤습니다.

* 사운드 큐의 Sound Node Random 에서 임의 가중치 선택 알고리즘을 고쳤습니다.

* 안드로이드 플랫폼의 사운드 소스 볼륨 세팅이 선형 볼륨에 정확히 일치되고 0.0 이면 들리지 않도록 고쳤습니다.

* 사운드 큐에 대한 최대 거리 계산시 Sound Node Param Cross Fade 의 요소로 거리를 사용하던 것을 제거했습니다.

* 멀티 채널 사운드에 사용되는 공간화가 해당 사운드 웨이브 재생시마다 한 번이 아닌, 사운드 웨이브 애셋마다 딱 한번씩만 보고됩니다.

* 사운드 큐 에디터가 닫히면 재생중이던 사운드 큐 미리듣기가 중지됩니다.

### 자동화

* 애니메이션 그래프의 로테이션 멀티플라이어 본 콘트롤러 노드에 애디티브 플래그를 추가했습니다.

* 엔진 자동화 테스트는 이제 System 과 Project, 두 카테고리로 나뉩니다.

    * 'system' 카테고리는 프로젝트에 무관한 테스트 또는 툴 용입니다.

    * 'project' 카테고리는 특정 프로젝트 전용 테스트 또는 툴 용입니다.

* 스태틱 메시 UV 검사를 리팩터링하여 이제 'complex' 테스트가 되었습니다.

    * 모든 메시를 한꺼번에가 아닌, 개별 메시를 검사할 수 있습니다.

    * 스태틱 메시 UVs 검사는 더이상 엔진 콘텐츠 애셋에 실행되지 않습니다.

* 애셋 유형 열기 자동화 테스트가 다시 'complex' 테스트가 되었습니다.

    * 이를 통해 애셋 유형이 동일한 모든 애셋에 대해 한꺼번에가 아닌 개별 애셋별로 이 테스트를 실행할 수 있습니다.

    * 애셋 유형열기 테스트는 언리얼 프론트엔드 내 자동화 테스트 계층구조의 툴 섹션에서 찾을 수 있습니다.

* 연결된 모바일 디바이스 나열을 위한 자동화 스크립트를 추가했습니다.

* 콘텐츠에 의존하는 특정 복합 자동화 테스트는 애셋 레지스트리의 전체 로드를 요합니다. 이제 자동화 프레임워크는 테스트 실행 전 레지스트리 로드를 기다립니다.

* exFAT 파일 시스템에서의 쿠킹 프로세스를 고쳤습니다. 타임스탬프 저장 방식으로 인해 실패하고 있었습니다.

* 에디터 자동화 테스트의 Load All Maps (모든 맵 로드) 테스트는 더이상 엔진 콘텐츠 폴더에서 찾은 맵을 대상으로 실행되지 않습니다.

### 블루프린트

* 블루프린트: 드래그 앤 드롭으로 새 핀 생성

    * 함수 및 매크로 입구/결과 노드, 접힌 그래프 노드 (및 해당 그래프의 입구/결과 노드), 커스텀 이벤트 노드상에 핀 연결을 드래그 앤 드롭해 놓으면 핀 연결이 생성됩니다.

    * 이 기능을 사용하려면, 그냥 핀 연결을 끌어 노드 위에 놓으면 됩니다:

	![image alt text](image_39.gif)(convert:false)

	* 그 결과 새로운 핀이 생기고, 이미 이름도 지어져 있고 연결도 되어 있습니다.

* Get 노드가 유효성 검사 가능

    * 이제 아무 GET 변수 노드에 우클릭한 다음 "impure" 노드로 변환하면 값의 유효성에 따라 분기됩니다. 오류 처리가 쉬워집니다.

	![image alt text](image_40.png)

    * GET 노드에 우클릭한 다음 "Convert to Validated Get" 를 선택하는 것으로 기능이 토글됩니다!

	![image alt text](image_41.png)

* "실행 경로가 반환 노드로 끝나지 않습니다." 블루프린트 컴파일러 노트를 추가했습니다.

* "경로가 절대 실행되지 않습니다." 블루프린트 컴파일러 노트를 추가했습니다.

* "경로가 절대 실행되지 않습니다." 블루프린트 컴파일러 노트를 추가했습니다.

* Actor SetOwner 를 이제 블루프린트에서 호출 가능합니다.

* 블루프린트 그래프 메뉴에 "타겟 컨텍스트" 메뉴를 추가, 사용자에게 메뉴의 맥락을 더욱 자세히 제어할 수 있도록 했습니다. 사용자는 이제 오브젝트 핀에서 끌어올 때, 그 블루프린트에 속하는 함수를 검색할 수 있습니다.

    ![image alt text](image_42.png)

* 블루프린트 노드 우클릭시 해당 노드의 문서를 열람할 수 있는 메뉴 옵션을 추가했습니다.

    ![image alt text](image_43.png)

* 블루프린트 에디터 세팅에 옵션을 추가하여, 디테일 패널 내 컴포넌트 트리 뷰에서 컨스트럭션 스크립트에 추가된 컴포넌트의 표시여부를 제어할 수 있습니다.

    * 에디터 개인설정 -> 블루프린트 에디터 -> 디테일 뷰에서 컨스트럭션 스크립트 컴포넌트 숨김 (기본은 켜짐)

* Blueprint Spawn Actor From Class 노드에 옵션 "Owner" 파라미터를 추가했습니다.

* 새 블루프린트에 배치되는 기본 노드의 활성화/비활성화용 블루프린트 에디터 세팅을 추가했습니다. 기본적으로 켜져있습니다.

* 열거형 비동일성 테스트를 위한 블루프린트 노드 (!=) 를 추가했습니다.

* 리니어 컬러를 반환하는 블루프린트용 Get Light Color 블루프린트 접근자를 추가했습니다.

* 오브젝트에서 스트링으로의 자동 형변환을 받을 수 있는 GetDisplayName 을 추가했습니다.

* UObject 의 정확한 오브젝트 이름을 반환하는 GetObjectName 을 추가했습니다.

* 새로운 increment (증가), decrement (감소), negate (부정) 매크로를 새로 추가했습니다.

* 역방향 이동하는 재경유 노드용 방향 전환이 지원됩니다. '상투' 효과를 피할 수 있습니다.

    ![image alt text](image_44.png)

* 블루프린트 Call Function 노드는 이제 현지화된 함수 이름이 표시됩니다.

* 블루프린트 검색이 멀티프로세서를 더욱 잘 활용하여, 일부 머신에서는 검색속도가 배가됩니다.

* 다수의 컴포넌트 변수를 블루프린트에 드래그 앤 드롭하여 전부 노드로 배치되도록 할 수 있습니다.

* 변수 드래그 앤 드롭으로 카테고리를 변경했던 것도 되돌리기 가능합니다.

* 재경유 노드 코멘트 핀 기능 구현을 변경, 사용자에게 커서를 올렸을 때 현재 디스플레이에 대한 대안을 제공합니다.

* 두 날짜 시간 빼기를 블루프린트에 노출시켰습니다.

* 제대로 호출되지 않던 이벤트 디스패처를 고쳤습니다.

* 제스처 키가 이제 블루프린트 바인딩 가능합니다.

* 교정된 이름과 교정되지 않은 이름으로 검색할 때 클래스, 구조체, 열거형, 오브젝트 검색을 위한 핀 유형 클래스 검색을 개선시켰습니다.

* "지역과 언어" 에서 모든 그래프 에디터의 노드와 핀 현지화 토글이 가능합니다.

* PIE 실행 도중 무한 루프 메시지가 이제 모달 대화창이 아닌 메시지 로그 대화창에 게시됩니다.

* 블루프린트에 역보간 함수를 추가했습니다.

* 하나의 Append 노드에 우클릭하여 '핀 추가'를 하는 것으로 여러 스트링을 덧붙일 수 있게 되었습니다.

* 블루프린트에 Grip Snap 노드를 추가했습니다.

* 전에는 3D 벡터에만 가능했었던 보간 함수를 이제 2D 벡터에도 사용 가능합니다.

* Select 노드를 맥락 메뉴에서 만들 때, 끌어온 핀을 Select 노드의 인덱스 핀에 연결합니다.

* Join String Array 함수를 추가했습니다.

* 이제 블루프린트를 통해 Light Component 클래스 서브클래싱이 가능합니다.

* Math 표현식 노드가 로컬 변수를 지원합니다.

* 타이머용 함수를 새로 추가, 이벤트의 이름이 아닌 이벤트의 델리게이트를 받습니다.

* 오브젝트 및 클래스 핀은 이제 파라미터 메타데이터에 따라 나열 항목을 필터링합니다.

* 플레이어 스타트가 이제 블루프린트를 통해 서브클래싱 가능합니다.

* 레벨 뷰포트에서 액터를 대체하면 레벨 블루프린트에서도 모든 레퍼런스가 자동 대체됩니다.

* 스트리밍 레벨 LOD 가 이제 블루프린트에 노출되었습니다.

* 스트리밍 레벨은 이제 Is Streaming State Pending 함수를 블루프린트에 노출시킵니다. 이를 사용해서 서브레벨이 완전 스트림 인/아웃 되었는지 검사할 수 있습니다.

* 블루프린트를 통해 정의된 액터 컴포넌트의 서브클래스는 이제 자체적으로 Destroy Component 호출 가능합니다.

* Render To Texture 블루프린트 카메라 오리엔테이션을 뒤집어 월드 스페이스에서의 노멀 맵 렌더링 방식에 일치시켰습니다. 이를 통해 캡처된 텍스처의 채널을 뒤집을 필요가 없어졌습니다.

* Render To Texture 블루프린트는 이제 플립북용 모션 벡터 렌더링이 가능합니다. 모션 벡터는 프레임 모핑에 사용하여 적은 프레임으로도 부드러운 결과를 내기 위해 쓰입니다. Flipbook_MotionVectors 라는 비슷한 머티리얼 함수가 있는데, 다른 프로그램에서 생성된 모션 벡터와 함께 사용할 수도 있습니다. 임포스터에도 곧 등장합니다.

* Render to Texture 블루프린트에 두 가지 모드가 새로 생겼습니다:

    * "Random Tiling Physics Drop" 은 목록에서 주어진 수만큼의 메시가 면에 충돌하는 시뮬레이션을 한 다음, 그 결과를 자동으로 타일링 텍스처로 변환합니다. 강둑이나 타일식 자갈을 만드는 데 좋습니다. 콜리전을 꺼서 풀이나 꽃처럼 간단한 임의 메시 분포를 만들 수 있습니다. K 키를 누르면 시뮬레이션을 계속하여 겹겹이 쌓인 결과를 얻을 수 있습니다.

    * "Tiling Hand Placed Meshes" 는 캔버스에 걸쳐 배치된 메시 각각을 자동으로 감싸서 타일링 텍스처를 만드는 모드입니다. 이 모드는 고해상도의 원본 바위에서 타일식 바위 텍스처를 만들 때 가장 좋습니다.

* 고급 사용자가 환경설정 파일에서 블루프린트 기본값을 설정한 다음 각기 다른 프로젝트와 환경설정 구성상에서 커스터마이징할 수 있도록 하는 기능을 추가했습니다.

    * 이 옵션은 블루프린트 변수 디테일 패널의 고급 부분에 있으며, 값 설정에 사용할 환경설정 파일을 지정해 줘야 합니다.

* 변수를 그래프에 끌어놓을 때, 배치 시작 전에만 Ctrl/Alt 를 눌러야 Get/Set 노드가 배치되는 것이 아닌, 그 중간 아무때나 눌러도 되도록 변경했습니다.

    * Ctrl + Alt 를 동시에 누른 상태에서 배치하면 Get 과 Set 노드 둘 다 배치되는 기능도 추가했습니다.

* 노드 코멘트 말풍선에 기본 코멘트 노드 제목 색을 노출, 사용자가 원하는 색을 설정할 수 있도록 했습니다.

    * 이 세팅은 에디터 개인설정의 그래프 에디터 섹션 아래 찾을 수 있으며, 이름은 Default Comment Node Title Color 입니다.

    * 이 세팅은 코멘트 노드 기본색도 조절합니다.

    * 이 세팅을 변경하면 열려있는 그래프 에디터를 닫고 다시 열어야 효과가 적용됩니다.

* 카메라 컴포넌트가 이제 Blueprintable 이 되어, 자체 독립적인 스마트 카메라를 보다 쉽게 만들 수 있습니다.

* 텍스트 및 스트링 핀이 이제 여러줄이 가능합니다. Shift+Enter 를 치면 새 줄로 넘어갑니다.

* 블루프린트에 영향을 끼치지 않는 되돌리기/다시하기 동작이 더이상 열었을 때 미저장 상태가 되도록 하지 않습니다.

* Increment, Decrement, Negate 매크로에 간략 표현을 사용합니다.

* 블루프린트 형변환 노드를 impure 에서 pure 로 변환할 때, 주변의 실행선이 자동으로 고정되어 실행 흐름이 유지됩니다.

* Spawn Actor From Class 노드가 더이상 클래스 변경시 나머지 핀의 연결을 끊지 않습니다.

* 스태틱 배열이 들어있는 네이티브 구조체가 블루프린트 내 함수의 파라미터가 될 수 있습니다.

* Absolute (int) 와 Sign (int) 함수가 키즈멧 매쓰 라이브러리에서 보통의 작명 규칙을 따르도록 업데이트되었습니다.

* 블루프린트 에디터에서 네이티브 C++ 컴포넌트 디폴트 편집시 디테일 뷰에 액터 프로퍼티가 더이상 나타나지 않습니다.

* 유예식 종속성 로딩에 자잘한 픽스가 여럿 추가되었습니다 (4.7 에 추가된 시스템으로, 블루프린트 순환 종속성 로드 문제를 해결했었습니다).

* 블루프린트 에디터의 노드 메뉴가 잘못된 입력시 크래시가 나던 것을 방지하는 보호 기제를 강화시켰습니다.

* 오브젝트 핀을 연결하는 인터페이스 핀이 지원됩니다. 변환 노드는 이제 생성시 자동 주입되며, 형변환 노드는 어떤 유형이든 받습니다.

* 새로운 부모 변수와 충돌을 일으키는 블루프린트 변수를 잡아내는(catch) 기능이 지원됩니다. 이름 충돌을 피하기 위해 자손의 변수 이름을 자동 변경합니다.

* 블루프린트에서 함수 핀을 추가하거나 이름변경하면, 그 함수를 현재 사용하는 부분도 제대로 새로고쳐집니다.

* Set member in .. 노드의 모든 입력 핀은 기본적으로 숨겨집니다.

* 매크로 입력에 대해 자동 생성된 배열은 공백입니다. 예전에는 기본적으로 엘리먼트가 하나 있었습니다.

* 블루프린트 노드는 반환 노드에 도달한 이후 실행되지 않습니다. 그림의 Print String 노드는 실행되지 않습니다.

    ![image alt text](image_45.png)

* 블루프린트 부모를 변경하면 더티 마킹됩니다.

* 블루프린트는 더이상 Cull Distance Volume 활성화/비활성화 시도를 하거나, 동적으로 Cull Distance 변경이 불가능합니다.

* 블루프린트 디테일에서 액터 클래스 내 Tick 카테고리 표시를 숨길 수 있습니다.

* 내 블루프린트 창에서 더이상 타임라인 변수를 복제할 수 없습니다.

* 블루프린트 "불필요한 형변환" 오류를 경고로 변경했습니다.

* 블루프린트 팔레트 툴팁이 해당 노드의 툴팁을 보다 밀접하게 반영하도록 변경했습니다.

* 블루프린트 버전비교 툴의 Changelist 번호가 더이상 쉼표로 표시되지 않습니다.

* 레벨 에디터 툴바의 블루프린트 드롭다운을 통해 게임모드에 가해진 변경사항은 게임모드/레벨 을 더티 마킹합니다.

* 커스텀 이벤트의 리플리케이션을 변경하면 즉시 노드의 제목이 갱신됩니다.

* 이제 핀 값 변경을 되돌릴 수 있습니다.

* 블루프린트 클래스 애셋 인스턴스의 컴포넌트 프로퍼티 값을 변경하면, 예전 값에 레퍼런싱된 컴포넌트 인스턴스 상의 델리게이트에 바인딩된 이벤트가 소거됩니다. 이를 통해 값이 바뀔 때마다 기존 바인딩이 지속되던 문제가 해결됩니다.

* 코멘트 풍선 색이 코멘트 노드에 설정된 프로퍼티를 따라갑니다.

* 마우스/화면 위치에서 월드로의 변환, 그리고 화면 위치로의 역변환이 Resolution Quality 감소시 정상 작동합니다.

* pure 에서/로의 형변환 노드가 되돌리기/다시하기 작업에 추가됩니다.

* 블루프린트 게임 인스턴스가 할당된 쿠킹 프로젝트가 더이상 크래시가 나지 않습니다.

* 이름에 공백이 포함된 핀이 있는 커스텀 이벤트를 복사해 붙이면 더이상 각 단어마다 개별 핀이 생성되지 않습니다.

* 이름이 공백이 포함된 접힌 그래프 노드를 복사해 붙이면 더이상 핀 연결 데이터를 잃지 않습니다.

* 애셋 레지스트리 태그를 구하려 하는 레벨 내 블루프린트와 그 부모를 지울 때 발생하던 크래시를 고쳤습니다.

* None 오브젝트에서 네이티브 함수로 Text 가 전달되었을 때의 크래시를 고쳤습니다.

* 다른 블루프린트를 기반으로 블루프린트를 만들어도 더이상 "노드 추가" 작업이 유발되지 않습니다.

* Current Max Draw Distance 는 블루프린트에서 읽을 수만 있지, 쓸 수는 없습니다.

* 블루프린트에서 스폰된 데칼과 이미터가 더이상 의도치 않게 가비지 콜렉팅되지 않습니다.

* 블루프린트에 기본 배치된 이벤트에 코멘트 풍선이 정상 표시됩니다.

* 사용자 정의 구조체에서의 기본값이 블루프린트의 값을 제대로 덮어씁니다.

* 블루프린트 함수 내 실행시간의 Divide-by-zero (및 기타) 경고는 명령줄에 -scriptstackwarnings 를 붙인 경우 스크립트 콜스택에 포함됩니다.

* Do Once Multi Input 이 이제 영어 이외의 언어에서도 작동합니다.

* 내 블루프린트 창의 다른 액션 위에 로컬 변수를 끌어 놓으면 그렇게 할 수 없다는 오류가 납니다.

* 블루프린트 노드 맥락 메뉴 필터에 많은 양의 텍스트를 붙여넣어도 에디터가 버벅이지 않습니다.

* 범위가 현재 블루프린트인 함수 노드가 포함된 험수 노드를 펼쳐도 더이상 Call Function 노드가 없어지지 않습니다.

* Get Actor Eyes Viewpoint 를 블루프린트에 노출시켰습니다 (Pawn 클래스).

* 사용자 정의 함수의 'const' 특성을 고급 옵션으로 노출시켜 다른 블루프린트 함수가 'const' BlueprintImplementableEvent 오버라이드에서 호출되도록 했습니다.

    * 참고로 'const' 와 'pure' 는 함수 특성으로써 블루프린트 에디터에 다른 의미를 갖습니다. 'pure' 는 실행 핀이 함수 호출 노드에 나타나도록 할 것인가를 제어하며, 진짜 순수 함수성은 현재 집행되지 않습니다.

    * 또는 고급 섹션을 노출시키고 'const' 를 체크하면 함수 그래프 내 읽기전용 'self' 맥락을 집행하는 몇몇 컴파일 시간 체크가 활성화됩니다.

* 배열 분할 노드 핀이 블루프린트 로드시 재결합될(, 그래서 특정 선 연결이 끊어질) 수 있었던 버그를 잡았습니다.

* 씬 컴포넌트 제거시 블루프린트 리컴파일 도중의 크래시를 고쳤습니다.

* 덮어쓴 함수에 로컬 변수 추가시 크래시를 고쳤습니다.

* 데이터 전용 블루프린트의 "외부 오브젝트에 그래프 링크됨" 오류에 대해 고쳤습니다.

* 클래스 뷰어( 또는 클래스 선택기 인스턴스)에 새로운 블루프린트가 즉시 나타나지 않던 것을 고쳤습니다.

* 별도의 기본 서브오브젝트가 있는 블루프린트 생성 컴포넌트 포함 액터가 들어있는 맵 저장시의 외부 오브젝트에 그래프 링크됨 오류를 고쳤습니다.

* 컨스트럭션 스크립트 재실행에 의해 곧 소멸될 컴포넌트가 재등록되어 발생되는 되돌리기/다시하기 이후 문제를 고쳤습니다.

* 게임 동작 사용에 의한 블루프린트 미리보기 창 결과 관련 문제를 고쳤습니다.

* 되돌리기/다시하기 시 소멸된 블루프린트 생성 컴포넌트가 액터에 붙은 채 남아있을 수 있던 문제를 고쳤습니다.

* 컴포넌트 복사하기/붙여넣기에 의해 유발되는 "외부 오브젝트에 그래프 링크됨" 오류를 고쳤습니다.

* 컴포넌트 차이 확인 시도시의 블루프린트 병합 툴 크래시를 고쳤습니다.

* 우클릭 맥락 메뉴 사용시 크래시를 유발하던 Physics Collision Handler Blueprint 내 버그를 잡았습니다.

* 블루프린트 부모변경 및 컴포넌트 순서변경시 크래시가 나던 블루프린트 컴포넌트 계층구조 내 버그를 잡았습니다.

* 배열이 아닌 핀에서 드래그할 때 배열 노드 옵션을 표시하지 않던 블루프린트 맥락 메뉴 내 버그를 잡았습니다.

* 맥에서 블루프린트 에디터 뷰포트에 선택된 컴포넌트를 삭제할 수 없었던 버그를 잡았습니다.

* 블루프린트에서 기본값을 덮어쓰는 노드를 컨스트럭션 스크립트에서 제거해도 기본값으로의 복원을 막을 수 있었던 버그를 잡았습니다.

* 상위 클래스에서 블루프린트 함수 이벤트 삭제시 크래시가 날 수 있었던 버그를 잡았습니다.

* 지워진 이벤트를 구현하는 블루프린트가 있는 레벨 로드시 크래시가 날 수 있었던 버그를 잡았습니다.

* "다음을 사용해서 블루프린트 생성..." 옵션을 통해 콘텐츠 브라우저에서 생성된 블루프린트 내 맥락 메뉴를 열 때 크래시가 날 수 있었던 버그를 잡았습니다.

* 자손이 열린 블루프린트에 변경을 가한 이후 블루프린트 맥락 메뉴를 여는 도중 크래시를 유발할 수 있던 버그를 잡았습니다.

* (애셋 삭제 중단이 일어난 후) 블루프린트 에디터를 연 뒤 잠시 후 랜덤 크래시를 유발할 수 있었던 버그를 잡았습니다.

* 로드시 이벤트 디스패처 노드에 바인딩된 액터를 깨뜨릴 (관련된 액터의 이벤트 트리거시 더이상 발동되지 않을) 수 있었던 버그를 잡았습니다.

* 블루프린트 이벤트 디스패처 노드가 잘못된 시그너처를 갖도록 만들 수 있었던 버그를 잡았습니다.

* 블루프린트 인터페이스를 다른 블루프린트에서 제거하기 전 삭제할 때 크래시가 날 수 있었던 버그를 잡았습니다.

* 에디터에서 플레이 도중 블루프린트의 디폴트를 변경할 수 있도록 하던 버그를 잡았습니다.

* 블루프린트가 완전 컴파일되기 전까지 새로운 Function Call 노드에 오류 마킹을 하던 버그를 잡았습니다.

* 타임라인 노드 이름을 변경하면 타임라인 변수 노드가 업데이트되지 않는 버그를 잡았습니다.

* 블루프린트 맥락 메뉴에 콘텐츠 브라우저에서 선택된 애셋에 연관된 AddComponent 옵션이 표시되지 않던 버그를 잡았습니다.

* Multi Gate 노드에서 여러 함수의 다중 실행시 메모리가 뭉개져 크래시가 날 수 있었던 버그를 잡았습니다.

* 블루프린트 에디터의 디테일 탭에서 닫고 다시 열면 크래시가 날 수 있었던 버그를 잡았습니다.

* Get Data Table Row 노드에서 출력 유형이 로드시 복원되어 핀 연결이 해제될 수 있었던 버그를 잡았습니다.

* Restrict To Class 메타데이터 키워드의 부적합한 처리로 인해 유발되던 크래시를 고쳤습니다.

* 블루프린트 에디터 내 기본값 입력 노드에 포커스가 있는 상태에서 F7 키로 블루프린트를 컴파일할 때의 크래시를 고쳤습니다.

* 변수가 선택된 와중에 블루프린트 에디터를 닫을 때의 크래시를 고쳤습니다.

* C++ 클래스를 기반으로 블루프린트 생성 도중 선택된 대상 폴더가 없을 경우의 크래시를 고쳤습니다.

* Custom Event 노드 붙여넣기를 되돌릴 때의 크래시를 고쳤습니다.

* 매크로 블루프린트 라이브러리 또는 함수 블루프린트 라이브러리 생성 후 기본 이벤트를 스폰하려 했을 때의 크래시를 고쳤습니다.

* 블루프린트 디폴트에 가한 변경사항이 먼저 블루프린트를 컴파일하기 이전까지 저장되지 않던 순환 종속성 버그를 잡았습니다.

* 블루프린트 클래스 디폴트 에디터에서 메시 컴포넌트의 머티리얼을 변경해도 블루프린트 클래스의 인스턴스에 적용되지 않던 퇴보를 고쳤습니다.

* 이벤트 덮어쓰기용 '부모 함수로의 호출 추가' 를 고쳤습니다.

* PIE 세션에서 애니메이션 블루프린트가 고아로 끝나, 이벤트 그래프 디버깅 도중 디버그 필터 메뉴에 가용 인스턴스가 둘 이상 될 수 있었던 문제를 고쳤습니다.

* 종속성 부모/자손 블루프린트 관련해서, 자손의 프로퍼티 값이 로드시 리셋될 수 있었던 문제를 고쳤습니다.

* Format Text 노드 관련 동작 되돌리기/다시하기 이후의 블루프린트 컴파일 관련 문제를 고쳤습니다.

* Format Text 노드 삭제 이후의 블루프린트 컴파일러 오류를 고쳤습니다.

* "Directions are not Compatible" (방향이 호환되지 않습니다) 블루프린트 오류를 고쳤습니다.

* 부모와 자손 액터가 같은 블루프린트 클래스 유형일 때 컴파일 이후의 리인스턴싱 도중 액터에 붙은 것이 깨지던 것을 고쳤습니다.

* 그래프의 이름 충돌로 인해 유발되던 크래시를 고쳤습니다.

* 데이터 전용 그래프에 이벤트 그래프가 매달리는(hanging) 것에 의해 유발되던 크래시를 고쳤습니다.

* 버려진 클래스가 맥락 메뉴 데이터베이스에 의해 레퍼런싱되어 유발되던 크래시를 고쳤습니다.

* 블루프린트 컴파일 도중 DateTime 변수에 의해 유발되던 크래시를 고쳤습니다.

* 명령줄을 통해 실행된 블루프린트 디프 또는 블루프린트 병합 툴 종료시 발생하던 크래시를 고쳤습니다.

* 노드에서 삭제된 구조체에 대한 핀 확장시의 크래시를 고쳤습니다.

* 레벨에 있는 액터의 부모 클래스가 리컴파일될 때의 크래시를 고쳤습니다.

* 액터의 생성자에서 호출된 컴포넌트 상의 이벤트가 삭제될 때의 크래시를 고쳤습니다.

* 액터의 리인스턴싱이 필요한 경우 블루프린트에 변경사항을 적용할 때의 크래시를 고쳤습니다.

* 블루프린트의 자손 부모변경 이후 즉시 컴파일할 때의 크래시를 고쳤습니다.

* 블루프린트가 인터페이스 함수를 사용할 때, 다른 인터페이스의 파라미터로 받는 경우의 크래시를 고쳤습니다.

* 핫 리로드시 애님 블루프린트에 의해 유발되는 크래시를 고쳤습니다.

* 트랜스폼 구조체의 회전값 편집시의 크래시를 고쳤습니다.

* 널 오브젝트에서 Text 프로퍼티를 읽었을 때의 크래시를 고쳤습니다.

* Timeline Play Rate Blueprint 노드를 복사하여 다른 블루프린트에 붙여넣었을 때의 크래시를 고쳤습니다.

* 블루프린트에서 Canvas Render Target 오브젝트 사용시의 크래시를 고쳤습니다.

* 블루프린트 이름변경 도중의 크래시를 고쳤습니다.

* 블루프린트 부모변경 도중의 크래시를 고쳤습니다.

* 블루프린트 컴파일 도중의 크래시를 고쳤습니다.

* 상속된 변수가 자손 블루프린트에서 설정될 때의 에디터 크래시를 고쳤습니다.

* Make Struct 노드에서 사용자 정의 구조체에 텍스트 배열 추가시의 잘못된 어서트를 고쳤습니다.

* 로컬 블루프린트를 변경할 필요가 없을 때의 블루프린트 병합 처리를 고쳤습니다.

* 블루프린트 함수 라이브러리 로드 이후 같은 라이브러리 내 다른 함수를 레퍼런싱하는 함수가 들어있는 블루프린트 함수 라이브러리 애셋을 저장할 수 없었던 것을 고쳤습니다.

* 원형 종속 블루프린트 실행시 TRASHCLASS 오류와 함께 크래시를 유발할 수 있었던 문제를 고쳤습니다.

* 블루프린트가 다른 오브젝트 블루프린트를 기반으로 할 수 없게 만들던 문제를 고쳤습니다.

* 마티네 파티클 트랙에 트리거를 추가하면 관련된 마티네 블루프린트 노드에 중복 핀이 생기게 만들던 문제를 고쳤습니다.

* 블루프린트에 사용된 중복 구조체의 기본값이, 특정 조건에서 원래 기본값으로 리셋되던 문제를 고쳤습니다.

* 노드 새로고침 또는 리로드시 몇몇 Ease 노드 핀이 자체적으로 리셋되던 문제를 고쳤습니다.

* 로컬 변수를 여러 번 편집하는 데 있어서, 벡터나 트랜스폼 편집시 종종 보이던 문제를 고쳤습니다.

* 다른 출력 핀을 끌어놓을 때 출력 핀 오브젝트의 멤버 함수가 나타나지 않던 것을 고쳤습니다.

* 다른 출력 핀을 끌어놓을 때 일부 출력 핀 오브젝트의 멤버 함수가 나타나지 않던 것을 고쳤습니다.

* 블루프린트에 새 변수나 이벤트 디스패처 추가시의 작명 규칙 문제를 고쳤습니다. 이제 블루프린트의 다른 항목같은 포맷이 될 것입니다: New[Type]_[Number].

* 블루프린트 생성 컴포넌트에 대한 되돌리기/다시하기 버퍼에 의해서만 레퍼런싱된 오브젝트가 가비지 콜렉팅되는 것을 고쳤습니다.

* 블루프린트 컴파일을 막을 수 있던 컴포넌트 변수와 컴포넌트 노드 사이의 이름 충돌 가능성을 고쳤습니다.

* 블루프린트 로드 도중 불필요한 경고가 많이 발생되던 문제를 고쳤습니다.

* 에디터에서 플레이 발동 이후 블루프린트가 더티 마킹되던 문제를 고쳤습니다.

* 이벤트 디스패처 이름변경 및 제거 관련 문제를 고쳤습니다.

* Make Array 노드의 새로고침 작동방식을 고쳤습니다. 기존에는 어느 핀이 분할(split)되었는지 기억하지 않았습니다.

* 액터 컴포넌트 블루프린트에 정의된 리플리케이티드 변수를 고쳤습니다. 이 변수가 이제 실제로 리플리케이트됩니다.

* 독립형 게임 내 게임 인스턴스의 Receive Init 이벤트에서 특정 함수 호출시의 여러 크래시를 고쳤습니다.

* 블루프린트의 스플라인 메시 컴포넌트가 맵이 로드될 때마다 콜리전 데이터에 대해서 DDC 에 새 항목을 매번 추가하던 것을 고쳤습니다.

    * 이로 인해 DDC 크기가 엄청나게 커졌으며, 같은 맵을 작업중인 사람이 여럿인 네트워크 공유 DDC 의 경우 특히나 더했습니다.

* Cross Product 노드의 이름이 제대로 "X" 라벨이 붙도록 고쳤습니다.

* 일부 Set/Break Struct 노드에 대한 블루프린트 초기 로드시 나타나는 후미 숫자와 문자를 고쳤습니다.

* 네이티브 C++ 컴포넌트에 정의된 프로퍼티 변경 되돌리기/다시하기를 고쳤습니다.

* 클래스 뷰어에 관련된 에디터 종료 도중 블루프린트 관련 크래시를 고쳤습니다.

* 블루프린트 바인딩 가능하지 않은 키는 더이상 키 선택기 드롭다운에 나타나지 않습니다.

* For Loop With Break 및 For Each Loop With Break 가 더이상 Break 이후 인덱스가 증가하지 않습니다.

* Format Text 노드는 더이상 자체적으로 중단점을 설정할 수 없습니다.

* 함수 툴팁에 다른 툴팁을 사용할 것이 없는 경우 처리된 함수 이름이 표시됩니다.

* 함수 라이브러리에서의 함수는 블루프린트의 숨겨진 카테고리 메타데이터에 따라 블루프린트 맥락 메뉴에서 필터링되지 않습니다.

* 숨겨진 코멘트 버블이 더이상 무관한 동작중에 다시 나타나지 않습니다.

* 노드 제목 새로고침이 개선 및 최적화되었습니다.

* 매크로에 대한 입력 핀을 다시 '와일드카드' 유형으로 설정할 수 있습니다.

* Function Call 노드의 입력 핀이 핫 리로드 이후 제대로 업데이트됩니다.

* 반환값과 입력 파라미터가 없는 함수가 내 블루프린트 드롭다운에 덮어쓰기 가능한 것으로 나타납니다.

* Float to Int 변환은 기본적으로 작은 정수가 아닌 그냥 소수점을 버립니다. 기존 블루프린트의 작동방식은 변하지 않습니다.

* 바이트코드 레퍼런스 그래프 이름의 스트링은 더이상 블루프린트를 컴파일할 때마다 변하지 않습니다.

* 몇몇 블루프린트 수학 노드의 기본값이 개선되었습니다. 기존 블루프린트에는 영향을 끼치지 않습니다.

* 블루프린트 클래스의 기본값을 사라지게 만드는 원인 하나를 고쳤습니다.

* 자손 블루프린트 클래스 애셋의 저장을 수 있었던 비호환 매크로 동작의 그래프 추가가 더이상 가능하지 않습니다.

* 유효 레벨 스크립트 블루프린트 액션 수집시 오직 에디터 월드만 고려되도록 하는 사소한 픽스가 있었습니다.

* 컴파일 이후 리인스턴싱 도중 레퍼런스를 찾을 때 약간의 퍼포먼스 향상이 있었습니다 (전체적인 블루프린크 클래스 컴파일 시간이 약간 감소했습니다).

* 한 번에 여러 수학 표현식 노드를 변경해도 더이상 크래시가 나지 않습니다.

* 'Edit Anywhere' 마킹된 네이티브 C++ 컴포넌트는 이제 블루프린트 에디터 디테일 패널에서 'None' 으로 설정한 이후에도 다시 편집할 수 있습니다.

* 새로 생성된 블루프린트는 더이상 컴파일이 필요한 것으로 마킹되지 않습니다.

* 내 블루프린트 창의 우클릭 메뉴에서 매크로 라이브러이에 있는 덮어쓰기 함수로의 옵션이 더이상 주어지지 않습니다.

* 블루프린트 컴파일시, 특히나 다른 블루프린트에서 많이 파생시킨 블루프린트를 상세 모드로 컴파일할 때 "파일 체크아웃 필요!" 스팸이 더이상 발생하지 않습니다.

* 내 블루프린트의 덮어쓰기 가능 함수 목록이 이제 클래스 계층구조에 대해 숨겨진 카테고리와 함수를 제대로 숨깁니다.

* 로컬 변수를 범위 외부에 붙여넣는 것이 더이상 유효한 것으로 표시되지 않습니다.

* 블루프린트 클래스 컴포넌트 에디터의 컴포넌트 붙이기/떼기 동작으로 인한 상대 트랜스폼 업데이트는 이제 블루프린트 클래스의 인스턴스에 즉시 적용됩니다.

* 블루프린트 에디터 로드시 중복 미리보기 액터 생성 패스를 제거했습니다 (약간의 퍼포먼스 향상이 있었습니다).

* 블루프린트의 맥락 메뉴에서 반복된 컴포넌트 함수 옵션을 제거했습니다.

* 블루프린트 변수를 "Editable" 마킹하여 다른 블루프린트에서 접근할 수 있도록 하는 데 대한 요건을 제거했습니다.

* 코멘트 블록에 @return 대신 @returns 사용시 return 핀 툴팁 시작에 붙던 's' 를 제거했습니다.

* Find Sessions 노드가 세션을 찾을 때 과도하게 상세했던 로그 몇을 제거했습니다.

* 블루프린트 에디터의 레거시 노드 메뉴 시스템을 제거했습니다.

* 그래프를 스폰하는 Custom Event 노드 및 기타 노드를 제거하면 이름이 해제됩니다.

* 매크로 핀 이름을 변경하면 더이상 같은 이름의 핀이 있는 그래프 내 매크로 이름이 변경되지 않습니다.

* 씬 기반 유형에서 비-씬 기반 유형 사이로 컴포넌트 기반 블루프린트 클래스 애셋 부모를 변경해도 더이상 액터 기반 블루프린트 클래스 애셋의 컴포넌트 계층구조가 깨지지 않습니다.

* 접힌 그래프 내 함수 로컬 변수 대체가 작동합니다.

* 재경유 노드는 이제 애니메이션 컴파일 이후 애니메이션 그래프에서 정상 작동합니다.

* 키바인딩을 통한 그래프 내 모든 노드 선택시 더이상 그래프 목록 내 공백 노드로 인한 어서트가 발생하지 않습니다.

* 자손 노드 겹칩으로부터 부모 노드가 자동 추가되는 것을 막는 픽스가 추가되었습니다.

* 내 블루프린트 패널 내 하위 항목의 카테고리가 더이상 함수의 섹션속에 잘못 들어가지 않습니다.

* "Access None ..." 오류를 억제시켰습니다.

* "No value will be returned by reference." (레퍼런스에 의해 반환되는 값이 없을 것입니다) 라는 잘못된 경고를 억제시켰습니다.

* Switch On String 노드는 기본적으로 디테일 뷰에 설정된 대로 대소문자 구분을 따르지 않습니다.

* Custom Event 노드는 이제 표준 비-멀티캐스트 델리게이트 핀에서 끌었을 때 적합한 시그너처 생성을 처리합니다.

* Days In Month 블루프린트 함수는 이제 잘못된 달 사용시 어서트 대신 경고를 로그에 냅니다.

* Render to Texture 블루프린트는 시각화 버퍼 익스포트시 'r.BufferVisualizationDumpFrames 1' 콘솔 명령을 입력해서 처리하므로, 더이상 "고해상도 스크린샷" 대화창을 사용할 필요가 없습니다.

* 게임플레이 태그 위젯 관련해서 그래프 창의 줌 레벨이 변경되었을 경우 팝업 메뉴를 사용할 수 없게되던 문제를 고쳤습니다.

    * 메뉴의 내용을 잘라버리기 보다는, 줌 레벨에 맞춰 팝업 메뉴의 스케일을 조절합니다.

* 재경유 노드와 다른 노드에서 코멘트 풍선 작동방식이 다르던 것을 고쳤습니다.

    * 이제 재경유 노드 코멘트도 다른 코멘트와 마찬가지로 핀 및 표시/숨길 수 있습니다.

* 숨겨진 재경유 노드 위에 커서를 올리면 코멘트가 표시됩니다.

    * 에디터에서 새줄 모디파이어 키 코멘트 풍선이 있는 노드가 비슷한 예제에 일치하지 않는 문제가 해결됩니다.

* 코멘트 풍선에서 텍스트 편집시 새줄을 삽입하려면 Shift + Enter 를 입력해야 합니다.

* 에디터에서 플레이 범위의 애셋을 현재 편집중일 때 에디터에서 플레이 종료시 열린 애셋 에디터도 자동으로 종료시키는 기능을 추가했습니다.

* 메인 에디터의 액터 디테일 패널에서 블루프린트 컴포넌트 인스턴스 편집시의 문제를 고쳤습니다.

* 컴포넌트 블루프린트를 컴파일하면 컴포넌트 값이 철지난 것으로 잘못 표시되던 것을 고쳤습니다.

* 이제 컴포넌트 블루프린트 컴파일을 추적, 액터 디테일 패널의 관련 부분을 최신 상태로 업데이트합니다.

* 블루프린트 문서 노드 관련 텍스트 표시여부 문제를 고쳤습니다. 예전에는 검정 바탕에 검정 글씨였어서 읽을 수 없었습니다. 이제 연한 바탕에 표시되도록 변경되었습니다.

* 여러줄 코멘트 풍선의 텍스트가 에디터 표준에 맞는 삽입 방식으로 변경되었습니다. 코멘트에 새 줄을 삽입하려면 이제 Ctrl + Enter 를 눌러야 합니다.

* 중첩된 코멘트를 사용자가 선택하기 어려웠던 문제를 고쳤습니다.

* 코멘트가 다른 코멘트를 포함하도록 크기변경할 때의 버그를 잡았습니다. 포함된 모든 코멘트의 상대 깊이를 수정하여 나중에도 선택이 가능하도록 했습니다.

* 커스텀 이벤트에 파라미터가 있을 때 에디터 블류틸리티에 크래시가 유발되던 문제를 고쳤습니다.

* 함수를 그래프에 끌어놓을 때 오쏘리티브 클래스가 아닌 스켈레톤 클래스를 사용해서 자손 클래스에 배열 파라미터 핀이 사라지던 문제를 고쳤습니다.

* 글로벌 에디터 유틸리티 기반 블루프린트 함수 감지를 수정, 액터 디테일 패널을 통해 Call In Editor 액터 블류틸리티에 블루프린트 편집가능 변수를 노출시켰습니다.

* 블루프린트 디버거의 감시값이 스스로 범위를 벗어났다고 잘못 보고하는 문제를 고쳤습니다.

* 맵 변경시 사용가능한 레벨 스크립트 블루프린트 액션 업데이트를 개선시켜 보다 동적으로 유지되도록 했습니다.

* 실제 타임라인 노드 이름이 사용자에게 명료하게 드러나도록 타이밍 컴포넌트 작명 방식을 변경했습니다.

* 블루프린트 컴포넌트의 부모를 액터 컴포넌트 및 파생 클래스 이외의 것으로 잘못 변경하지 못하도록 했습니다.

* 코멘트 풍선의 표시여부나 핀 상태가 읽기전용 그래프에 있을 때는 변하지 않도록 했습니다.

* 외부 레벨 스크립트에서의 레벨 스크립트 액션이 현재 블루프린트에 잘못 배치되지 않도록 했습니다.

* 소유 그래프가 읽기 전용일 때 노드에 잘못된 핀의 추가/제거가 불가능하도록 했습니다.

* 읽기 전용 그래프에서 노드 코멘트 풍선의 표시여부 상태를 변경하지 못하도록 했습니다.

    * 이 변화 이후 소유 그래프가 읽기 전용인 경우, 풍선의 제목줄 토글 버튼이 더이상 표시되지 않습니다.

* 사용자가 레퍼런스 뷰어에서 코멘트 텍스트 편집을 하지 못하도록 했습니다.

* 코멘트 풍선에 힌트 텍스트 표시를 위한 우회 코드를 제거하고 텍스트 필드 위젯에 힌트를 표시하는 새로운 함수성을 활성화시켰습니다.

* 코멘트 노드에서 그 코멘트 풍선 관련 올바른 함수성을 복원했습니다. 여기서 코멘트 풍선의 디자인 목표는 코멘트 노드 제목을 읽기 힘들 만큼 줌 레벨이 변경되었을 때 표시하기 위함입니다.

* 공백 레벨을 컴파일하는 경우 어서트가 발생하던 블루프린트 액션 데이터베이스 새로고침 버그를 잡았습니다.

* 컴파일 도중 맵 레벨 스크립트 이름변경 및 재생성 방식 관련해서 어서트가 유발되던 문제를 고쳤습니다.

* 읽기 전용 그래프에서 코멘트 풍선이 코멘트 텍스트를 변경할 수 있었던 문제를 고쳤습니다.

* 커브가 타임라인에 소유된 것처럼 외부 커브를 포함한 타임라인이 커브를 깊이 복사(deep copy)하려 하는 문제를 고쳤습니다. 외부 커브는 이제 레퍼런스를 원래대로 놔둔 채 건너뜁니다. 추가적으로 소유된 커브의 깊은 복사는 이제 블루프린트 리인스턴싱 도중 과다하게 깊이 복사되지 않습니다.

* 블루프린트 그래프 액션 관련 특정 상황에서 레벨 전환시 가비지 콜렉션이 실패하게 만드는 문제를 고쳤습니다.

* 머티리얼 표현식에서 코멘트 풍선 관련 다음과 같은 문제를 고쳤습니다.

    * 코멘트가 영향을 끼치는 코멘트 텍스트 대신 커스텀 이벤트 이름으로 적용되던 것.

    * 블루프린트 컴파일 또는 닫을 때 코멘트가 사라지는 것.

    * 코멘트 풍선과 머티리얼 표현식 프로퍼티 사이의 비일관성.

* 블루프린트 디버거에 변수가 영역 밖인 것으로 표시되던 문제를 고쳤습니다.

* 기존에 간과되었던 배열 노드에서 빠져있는 코멘트 풍선을 구현했습니다.

* 액터를 블루프린트로 변환할 때 사용자가 선택한 컴포넌트 이름이 보존되도록 액터 작업방식을 변경했습니다.

* 맥락 메뉴를 통해 코멘트를 입력했을 때 코멘트 스트링 콘텐츠에 따라 풍선이 자동으로 표시/숨겨지도록 코멘트 풍선을 업데이트합니다.

* 카테고리가 없는 함수는 현재 선택된 레벨 액터에 대해 표시될 때 블루프린트 노드 맥락 메뉴에 "Class" 카테고리로 들어가지 않습니다.

* "Apply Changes to Blueprint" (블루프린트에 변경사항 적용)을 되돌리면 에디터가 유효하지 않은 상태로 남아서, 되돌리기/다시하기 또는 선택된 컴포넌트를 이동하면 크래시가 나던 문제를 고쳤습니다.

* 내 블루프린트 창에서 선택을 위해 위 아래 화살표 키를 사용하면 제대로 선택됩니다.

* 변수 이름변경시 더이상 그 이름을 활용하는 수학 표현식 노드를 깨뜨리지 않습니다.

* 이제 컴포넌트 블루프린트 클래스가 그 부모 클래스를 변경할 때, 레벨 에디터 내 선택된 액터의 컴포넌트 트리를 새로고칩니다.

* 블루프린트 애셋 삭제시, 자손 블루프린트가 삭제 착수될 때에도 부모변경 및 리컴파일되지 않을 것입니다.

* 내 블루프린트 창에서 함수를 끌어오면, 마우스 데코레이터가 즉시 표시됩니다.

* PIE 에 들어설 때, 레벨 블루프린트 내 Function Call 노드에 영역이 없다는 로그 오류가 더이상 생기지 않습니다.

* 블루프린트의 이벤트 노드를 붙여넣을 때, 해당 이벤트의 유령 노드 버전이 있는 경우, 그 노드는 새로이 붙여넣은 이벤트를 위해 제거될 것입니다.

### 코어

* HSV 기반 리니어 컬러 인터폴레이션 함수를 추가했습니다 (블루프린트 및 C++)

    * 새 블루프린트 함수: "Lerp Using HSV (Linear Color)" (C++ 에서는, FLinearColor::LerpUsingHSV 를 호출하면 됩니다)

    * HSV 스페이스에서 컬러를 보간하여, 색조(hue) 사이 최단 경로를 구합니다. 알파도 보간합니다.

* 'togglecvar' 콘솔 명령을 추가, 두 값 사이에 임의의 CVar 토글이 가능합니다 (키 바인딩을 해 두면 좋습니다).

* 엔진이 환경 변수 읽기에 실패했을 때의 경고 로그 메시지를 추가했습니다.

* 월드 사이의 전환이 일어날 때 레퍼런스가 남아 기존 맵의 가비지 콜렉션을 막는 현상을 피하기 위해 월드에 들어있는 모든 오브젝트는 가비지 콜렉션 마킹됩니다.

    * 이를 통해 Seamless Travel 전환과 Load Map 전환이 일치됩니다.

* 이제 쿠킹된 빌드에서 Alt+Enter 키를 치면 전체화면으로 토글됩니다.

* 자동 월드 오리진 리베이싱 동작(거리, 3D, 2D)을 환경설정 파일에서 조정할 수 있게 되었습니다.

* 콘텐츠 프로젝트에 써드 파티 개발자의 플러그인을 포함시킬 수 있도록 했습니다. 게임 실행 도중 게임과 그것을 만드는 플러그인을 연결시켜 줍니다.

* Child Actor Class 를 캡슐화하여 블루프린트에 Set Child Actor Class 를 노출시켰습니다.

* (디스크 공간 부족 등) OS 상태의 결과로 벌어질 수도 있는, 자동 저장 실패 와중의 에디터 크래시를 고쳤습니다. 이제 크래시 없이 사용자에게 그에 대한 오류 및 크래시를 로그에 기록합니다.

* 원점에서 매우 먼 곳에서 렌더링할 때의 float 정밀도를 향상시켰습니다. 이 변화로 카메라나 버텍스 떨림과 같은 미묘한 버그 방지가 가능합니다.

* 프로젝트의 PackageFileUE4Version 이 현재 실행중인 엔진보다 높은 경우 프로젝트 열기를 중단하는 보호장치를 추가했습니다.

* 커다른 프로파일러 데이터 세트의 로딩 시간을 개선했습니다.

* 이제 비동기 로딩 취소가 가능합니다.

    * 블루프린트에서 Cancel Async Loading 함수를 통해 가능합니다.

    * 네이티브 C++ 함수는 CancelAsyncLoading() 입니다.

    * 콘솔 명령은 "CANCELASYNCLOAD" 입니다.

* 레벨 스트리밍 오브젝트에 "Disable Distance Streaming" 라는 프로퍼티가 새로 생겼습니다. 블루프린트에서 특정 스트리밍 레벨에 대해 임시로 거리 기반 스트리밍을 끄고자 할 때 사용합니다.

* 'stat levels' 출력에 패키지 임포트 로딩 진행상황을 로드 백분율로 포함시키도록 개선되었습니다.

* 다운로드 크기 축소를 위해 템플릿 데이터에서 피처 팩 만드는 방식을 변경했습니다.

* 틱 부하를 줄이고 태스크 그래프를 최적화시켰습니다.

* 콘솔 변수가 변경되었는지 검사하는 기능을 제거했습니다.

* stat 을 사용한 메모리 할당 프로파일러를 추가했습니다.

    * 게임에 프로파일러를 붙이려면 "-memoryprofiler" 파라미터를 붙여 실행하고, "stat stopprofile" 로 프로파일러를 중지하면, <game>\Saved\Profiling\UnrealStats 폴더에 확장자가 ue4statsraw 인 파일이 새로 생성됩니다.

    * 결과를 확인하려면 언리얼 프론트엔드 명령을 사용합니다: "UnrealFrontend.exe -run=MEMORYDUMP -INFILE=<filename.ue4statsraw>", 그러면 모든 메모리 할당이 포함된 CSV 파일이 두 개 생성됩니다.

* 스탯 그룹 "LoadTimeVerbose" (로드 시간 상세)를 새로 추가, 기본적으로 꺼져있는 이 그룹은 매우 잦은 통계 모티너링에 사용되며, 퍼포먼스 감소를 막기 위해 기본으로는 꺼져 있고, 현재는 메모리 프로파일러가 활성 상태일 때만 사용됩니다.

* 메모리 프로파일러 정확도 향상을 위한 통계를 추가했습니다.

* 스레드 풀에 실행중인 태스크에 대한 퍼포먼트 통계를 추가했습니다.

* "StopFPSChart" 명령 실행 이후 통계 위치가 파일 탐색기를 통해 열립니다.

* 오디오 워커 압축해제용 통계가 개선되었으며, 웨이브 이름도 포함됩니다.

* 에디터에서 이제 플러그인 브라우저의 사용자 플러그인 대한 메타데이터 변경이 가능합니다.

* 에디터는 이제 설치 루트 디렉토리의 UE4CommandLine.txt 파일에 저장된 부가 명령줄 인수를 검사합니다. 이 파일을 만들어 에디터에 항상 실행시킬 인수를 설정할 수 있습니다.

* Flush Level Streaming 함수는 이제 블루프린트에 노출됩니다. Flush Level Streaming 은 모든 레벨 스트리밍이 끝날 때까지 게임 스레드를 블록합니다.

* 이제 Timeline Set Playback Position 에 재생 위치 변경 이후 핀 업데이트 발동 여부를 결정할 불리언 파라미터가 생겼습니다.

* 60 fps 이상의 더 나은 퍼포먼스를 위한 통계 처리를 조정했습니다.

* 태스크 그래프 비주얼라이저가 화면에 보다 많은 요소를 표시하도록 조정했습니다.

* 패키지 저장 도중 중복 오브젝트를 건너뛰도록 하는 검사를 추가했습니다. 이를 통해 엔진이 일관되지 않은 상태에 있을 때 저장시 애셋이 깨지는 것을 막습니다.

* 매우 작거나 비어있는 깨진 패키지를 열 때 엔진 크래시를 막기 위한 보호장치를 추가했습니다.

* 이제 쿠킹된 빌드에서 Alt+Enter 키를 치면 전체화면 모드로 전환됩니다.

* 붙은 액터가 더이상 월드 오리진에서 튀어나와 소멸 과정의 일부로 오버랩 이벤트를 유발시키지 않게 되었습니다.

* Begin Play 는 더이상 Pending Kill (곧 소멸) 마킹된 액터에서 호출되지 않습니다.

* 대소문자 고정 검색 패턴을 사용하는 스트링 대체/비교/찾기 작업 다수를 대소문자 구분하도록 변경했습니다. 마침표나 나눗셈표시 검색시의 불필요하게 비싼 대소문자 구분 작업을 피할 수 있습니다.

* 부모 클래스 변수 값 변경이 핫 리로드 이후에도 제대로 업데이트됩니다.

* Owner Only 같은 커스텀 리플리케이션 조건이 이제 커스텀 델타 시리얼라이제이션 검사를 합니다. 기존에는 항상 조건을 무시하고 리플리케이트 했었습니다.

* 날짜 & 시간 오브젝트가 이제 32 비트가 아닌 64 비트 값을 사용해서 정확한 유닉스 날짜 타임스탬프를 제공합니다.

* 동적으로 스폰된 스태틱 액터/컴포넌트는 이제 Cull Distance Volume 에 영향을 받습니다.

* 위치가 없는 액터는 네트워크 우선권 계산시 0,0,0 에 있는 것으로 간주되어, 카메라 위치에 따라 리플리케이션 차이가 나게 만들던 버그를 잡았습니다.

* 컴포넌트 바인딩된 이벤트가 델리게이트 시그너처를 소유하는 클래스에 제대로 바인딩되도록 고쳤습니다. 이벤트 이름변경 관련 문제가 해결됩니다.

* 복잡한 구조체 파라미터로 RPC 호출시의 크래시를 고쳤습니다.

* 소유 액터 없이 자손 액터 컴포넌트를 사용했을 때의 크래시를 고쳤습니다.

* PIE 에서 심리스 레벨 트랜지션을 할 때 가비지 콜렉션이 기존 월드를 비우는 데 실패해서 발생하던 크래시를 고쳤습니다.

* 액터가 클라이언트에서 Begin Play 를 두 번 호출하게 만들 수 있었던 문제를 고쳤습니다.

* 심리스 트래블 도중 기존 레벨에서 넘어와서 Begin Play 가 이미 호출된 액터에 Begin Play 가 다시 호출되던 문제를 고쳤습니다.

* 새로운 폰 빙의 해제(depossess) 및 빙의(possess)시 Client Restart 가 호출되지 않던 것을 고쳤습니다.

* 여러줄 자막 사용시 각 줄마다 한 번씩 표시되지 않고 같은 줄이 여러번 표시되던 것을 고쳤습니다.

* (이펙트 등의) 디스토션이 있는 (메시 등의) 스태틱 프리미티브가 화면에 존재하지 않는 경우 디스토션을 사용하는 다이내믹 프리미티브가 전혀 렌더링되지 않게 만드는 버그를 잡았습니다.

* 유효하지 않은 패키지 버전의 패키지 로딩시 진행상황 보고 오브젝트가 제대로 비워지지 않아 발생하던 크래시를 고쳤습니다.

* 프로젝트의 엔진 환경설정 파일에서 같은 셰이더 포맷이 두 번 지정되었을 때의 스타트업 어서트를 고쳤습니다.

* 콘솔 변수가 특정한 순서로 설정될 때의 check() 를 고쳤습니다.

* 게임 환경설정 디렉토리 밖의 파일 편집시 기본 ini 문법이 사용되지 않도록 의도했던 환경설정 시스템 버그를 고쳤습니다.

* 이벤트 디스패처에 Pointer Event 가 전달되었을 때의 크래시를 고쳤습니다.

* 디스트럭터블이 APB 에서 임포트된 대미지 파라미터를 무시하던 것을 고쳤습니다.

* 액터의 Attachment Replication 구조체를 철지난(out of date) 것으로 만들어 클라이언트의 첨부 계층구조를 망가뜨릴 수 있었던 문제를 고쳤습니다.

* 비동기 로딩 플러시 관련 문제를 고쳤습니다.

* 저장 도중 충분히 (약 4 GB) 커다란 파일에 대해 발생하던 라이트매스 크래시를 고쳤습니다.

* 맵 저장 전 애셋이 저장되지 않은 경우 맵에 애셋 레퍼런스가 빠질 수 있었던 현상을 고쳤습니다. 이 상황은 에디터에 새로 생성되는 오브젝트에 일어날 수 있었습니다.

* 엔진 시동시 환경설정 파일을 병합할 때 엔진을 멈추게 만들 수 있었던 것을 고쳤습니다.

* 새로 스폰된 틱 그룹이 두 번 실행되지 않도록 고쳤습니다.

* 기본 오브젝트에서 그 인스턴스로의 프로퍼티 변경 전파를 고쳤습니다.

* 심리스 트래블 도중의 희귀한 크래시를 고쳤습니다.

* 에디터의 BSP 연산 중 주어진 오브젝트의 클라이언트 또는 서버 로드 금지 여부를 나타내는 플래그를 실수로 지우던 것을 고쳤습니다.

* 부팅시 크래시가 날 수 있었던 텍스처 DDC 스레드 문제를 고쳤습니다.

* 언리얼 스웜에서의 간헐적 "Error: A 32 bit processes cannot access modules of a 64 bit process." (오류: 32 비트 프로세스는 64 비트 프로세스의 모듈에 접근할 수 없습니다) 를 고쳤습니다.

* 머신에 네트워크 어댑터가 둘 이상 있을 때 언리얼 스웜이 IP 주소를 자체적으로 해석하도록 수정했습니다.

* 가비지 콜렉션 퍼포먼스를 향상시켰습니다.

* 컨스트럭션 스크립트 도중의 동적인 데이터 변경이 (실행시간에 다른 방식으로는 변경 불가능한) 무버블 이외의 컴포넌트를 타겟으로 할 수 있도록 메소드를 개선시켰습니다.

* 링커 순환 종속성 픽스: CDO 생성 시도 전 부모 디폴트 서브오브젝트가 로드되도록 합니다.

    * 파생 블루프린트의 컴포넌트가 부모 블루프린트의 기본값을 상속하지 않도록 합니다.

* 프로파일러 - "필터와 프리셋" 창이 이제 선택된 프로파일에 따라 제대로 업데이트될 것입니다.

* 프로파일러 - 프로파일러에 라이브 데이터 미리보기 실행 상태에서 애셋을 열때의 크래시를 고쳤습니다.

* 몇몇 임시 메모리 할당을 워커 스레드로 옮겨 텍스처 스트리밍 도중의 버벅임 확률을 줄였습니다.

* 환결설정 캐시의 최종 사용자 ini 에서 엇나간 '/' 글자를 제거했습니다.

* shipping 빌드의 블루프린트에서 발동된 단순 통계 명령이 더이상 게임을 멈추게 만들지 않습니다.

* 통계 - 계층형 뷰에 빠진 통계를 추가했습니다.

* 통계 - 'stat groupname+' 명령 사용시 hud 에 모든 통계가 보일 것입니다.

* 통계 - 통계를 처음부터 캡처할 때의 크래시를 고쳤습니다.

* 통계 - 스레드 소멸시의 메모리 누수를 고쳤습니다 (리눅스, 맥)

* 통계 - 스태틱 메시에 대해 잘못된 메모리 계산을 고쳐, 디스턴스 필드 메모리 사용량을 추가했습니다.

* 기본값과 값이 다른 구조체가 제대로 저장됩니다.

* "Access None" 오류를 억제시켰습니다.

* 레벨 전환 사이에 존재하는 오브젝트의 타이머 함수가 이제 새 레벨에도 계속해서 발동됩니다.

* UAT 가 리눅스 이외 플랫폼상의 심볼릭 링크를 건너뛰지 않습니다 (데이터 중복제거가 활성화된 윈도우 서버에서의 프로젝트 패키징이 수정됩니다).

* 패키징된 게임에서 생성된 환경설정 파일을 업데이트했습니다.

* 더이상 쓰이지 않는 ini 파일을 합쳤습니다.

* XML 파서가 이제 특성 스트링의 중첩된 '=' 글자 및 이름붙인 개체를 제대로 파싱 가능합니다.

### 에디터 및 툴

* 콘텐츠 전용 프로젝트에 대해 빌드 세팅 지정 및 플러그인 활성화가 가능하도록 했습니다.

    * 프로젝트를 코드 기반 프로젝트인 것으로 간주하도록 만듭니다.

    * 에디터는 선택된 옵션으로 프로젝트 빌드를 시도할 것입니다.

    * 이를 통해 사용자는 비표준 플러그인 활용은 물론 다양한 옵션으로 기본 게임 실행파일 컴파일도 가능할 것입니다.

* 플러그인 생성 마법사 추가

    * 주: 마법사 플러그인은 초기 접근 미리보기 단계로, 기본적으로 꺼져있으며, 플러그인 브라우저에서 켜줘야 사용할 수 있습니다.

    * 그 후 메인 메뉴의 파일 - "플러그인 추가..." 로 불러올 수 있으며, 현재 세 개의 템플릿이 포함되어 있습니다:

        * 공백: 함수성 없는 최소한의 플러그인을 생성합니다.

        * 기본: 메인 프레임 툴바에 버튼이 추가된 플러그인을 생성합니다.

        * 고급: 메인 프레임 툴바의 버튼을 통해 불러오는 표준 탭 창을 생성합니다.

* 오디오 리임포트 개선

    * 모니터링중인 디렉토리 내에 대한 이름변경 및 이동을 자동 감지하여 올바르게 반응합니다.

    * 사용자는 이제 모니터링된 디렉토리에 대해 가상 매핑된 경로를 지정할 수 있습니다 (이를 통해 새로운 콘텐츠 파일이 지정된 매핑 디렉토리를 기준으로 애샛을 자동 생성하도록 창을 띄우는 것이 가능합니다).

    * 모니터링 대상 디렉토리에서 와일드카드를 통해 특정 파일 추가/제거가 가능합니다.

    * 초기 에디터 로드시 애셋 소스 변경사항을 무시하는 옵션을 추가했습니다. 소스 콘트롤 작업시 정말 유용한데, 에디터를 실행할 필요 없이 최신 파일을 받아, 그 변경사항을 전부 리임포트하지 않아도 되기 때문입니다.

* 자동 애셋 체크아웃

    * 에디터 개인설정에 "자동 체크아웃" 모드를 도입했습니다.

    * 이제 옵션을 통해 애셋이 변경되면 창을 통해 사용자의 확인을 받는 대신 자동으로 체크아웃되도록 할 수 있습니다.

    * 추가적으로 (다른 사용자가 독점 체크아웃 했다던가, 헤드 리비전이 아니든가 해서) 체크아웃 불가능한 애셋을 변경하려 하는 경우, 경고창이 뜹니다.

* 세 가지 직교 뷰포트 모드 새로 추가

    * 월드를 모든 각도에서 시각화시켜 볼 수 있게끔, 직교 뷰포트 모드 목록에 오른쪽, 아래, 뒤 를 추가했습니다.

* 이제 원근 뷰포트와 직교 뷰포트 둘 다에서 피벗 위치를 조정할 수 있습니다.

    * 이동 위젯을 Alt+휠버튼으로 끌면 어느 뷰포트 모드에서는 피벗 위치가 이동됩니다.

* 레벨 툴바에 소스 콘트롤 액션 버튼을 추가했습니다.

    * 레벨 툴바에 소스 콘트롤 버튼이 새로 생겼습니다.

    * 여기서 여러가지 소스 콘트롤 관련 작업을 할 수 있으며, 현재 소스 콘트롤 접속 상태를 확인할 수도 있습니다. 예전에 에디터 창 우상단에 있던 아이콘은 제거되었습니다.

* 에디터 레이아웃과 키바인딩 세팅은 이제 모든 프로젝트 공용으로 저장됩니다.

* 프로퍼티에 단위를 지정할 수 있는 기능이 추가되었습니다.

    * 이제 트랜스폼 및 회전시 기본으로 단위가 표시됩니다. 프로젝트 세팅 -> 에디터 -> 외형에서 프로젝트 단위로 커스터마이징 가능합니다.

    * 단위는 Units= 메타 태그로 지정할 수 있습니다.

* 액터 맥락 메뉴에 "오브젝트를 뷰에 스냅" 을 추가했습니다.

* 이제 픽셀 텍스처당 64 비트 익스포트가 가능합니다. (.tga 도 .bmp 도 64 비트 텍스처를 지원하지는 않기에) 익스포트된 텍스처의 비트 깊이가 감소되기는 합니다.

* A.R.T. OSX 포트가 이제 사용가능합니다.

* 블루프린트 애셋을 레퍼런싱하는 액터는 이제 에디터에서 Ctrl+E 를 누르면 레퍼런싱된 다른 애셋에 대해 선호하는 블루프린트를 엽니다.

* 크래시 리포트 클라이언트에 "재시작" 버튼을 추가했습니다.

* 콘텐츠 브라우저의 엔진 콘텐츠를 표시/숨길 수 있는 블루프린트 호출가능 함수를 추가했습니다.

* 하드웨어 세팅 변경시 에디터 재시작 버튼을 추가했습니다.

* 옵션을 통해 추가시킬 수 있는 웹 브라우저용 더미 플러그인을 추가시켰습니다.

* 그래프 에디터에서의 줌 레벨 관련 키바인딩을 추가했습니다. 기본 키는 줌 인/아웃에 +/- 입니다.

* 클래스를 '수퍼 서치' 등록하여 검색 스트링 처리 결과 반환뿐 아니라 그에 따른 동작도 가능하게 하는 메소드를 추가했습니다.

* 출력 로그 창 안에 우클릭 드래그를 하는 새로운 스크롤 모드를 추가했습니다. SMultiLineEditableText 위젯의 다른 인스턴스에도 똑같이 적용됩니다.

* 애셋 에디터에서 L+클릭으로 프리뷰 라이트 방향을 바꿀 때의 시각화를 추가했습니다 (마우스 버튼을 놓은 뒤 1 초 동안 유지됩니다).

* Cable 컴포넌트에서 Attach End To 위치를 구하고 설정하는 블루프린트 호출가능 함수를 추가했습니다.

* 플레이어 콘트롤러에 환경설정 가능 Hit Result Trace Distance 프로퍼티를 추가, 액터 마우스 클릭 및 터치 인터페이스에 사용되는 트레이스 거리의 커스터마이징이 가능합니다.

* 크로스페이드 파라미터 표시 개선을 위한 커스터마이제이션을 추가했습니다.

* 특정 환경설정 파일에서 프로젝트 세팅을 편집할 수 있는 함수성을 추가했습니다.

    * 프로퍼티 단위로 활성화됩니다.

    * 다수의 iOS 프로젝트 세팅에 활성화됩니다 (Enable Game Center 등).

* 가비지 콜렉터 호출 전 스트리밍 플러싱을 활성화시킬 수 있는 ini 옵션을 추가했습니다.

    * 엔진 ini 의 [Core.System] 섹션 아래 FlushStreamingOnGC 값을 통해 활성화시킬 수 있습니다.

* 웹 브라우저 오류에 대한 로그 메시지를 추가했습니다.

* 뷰포트 클라이언트에서 언리얼 위젯의 기본 표시여부 설정을 위한 메소드를 추가했습니다.

* 저장 대화창에서 취소가 아닌 거절할 수 있는 옵션을 추가했습니다. 모두 저장 대화창은 이제 '저장' 또는 '취소' 옵션만 제공합니다.

* 스크립트 플러그인에 대한 스크립트 임포트시 스크립트 콘텐츠 유효성 검사를 추가했습니다. 스크립트 플러그인에 커스텀 파일 확장자가 지원됩니다.

* 패키지 안에 오브젝트의 이름을 지정하지 않고 StaticLoadObject 로 오브젝트를 로드하는 기능이 지원됩니다. 그러한 경우에는 짧은 패키지 이름을 오브젝트 이름으로 간주합니다.

* 튜토리얼에 '수퍼 서치' 박스로 검색할 수 있는 태그를 넣을 수 있는 기능을 추가했습니다.

* 에디터 시작시 마지막 열었던 레벨을 로드하는 기능을 추가했습니다.

* 월드에 스플라인 컴포넌트 인스턴스 시각화시 다수의 스플라인 키 포인트를 선택할 수 있는 기능을 추가했습니다. 그런 다음 모든 포인트에 (트랜스폼, 유형 변경 등의) 작업을 한꺼번에 할 수 있습니다.

* 레벨 에디터 뷰포트에 우클릭한 다음 "Go to" 를 선택하여 클릭한 위치로 뷰포트 카메라를 이동시키는 기능을 추가시켰습니다.

* RHI 뷰포트에 대한 픽셀 포맷을 지정하는 기능을 추가했습니다.

    * 지정된 RHI 뷰포트에 대해 어떤 백 버퍼 포맷을 사용할 것인지 제어할 수 있도록 해줍니다. (Metal, gnm 등) 일부 RHI 에서는 있을 필요가 없으니 무시됩니다.

* Draw Debug Directional Arrow (디버그 방향 화살표 그리기) 함수에 Thickness (두께) 파라미터를 추가했습니다.

* 콘텐츠 브라우저 행열에 툴팁이 지원됩니다. 에디터 빌드에 Asset Registry Tag Metadata 클래스를 추가, 부가 태그 정보 보고용입니다.

* 다양한 지오메트리 모디파이어 위젯에 툴팁 텍스트를 추가했습니다.

* 웹 브라우저 창에 LoadString 을 사용하도록 추가, html 코드를 직접 표시할 수 있도록 했습니다.

* SCS 에디터 뷰포트에 뷰 모드 메뉴를 추가했습니다.

* 런처 빌드에 디렉토리 검색 추가를 위해 .uprojectdirs 존재여부 검사를 가능하도록 했습니다.

* 이제 셰이더가 컴파일중인 경우 자동저장이 유예됩니다.

* 사용가능 플랫폼 에디터 모듈은 이제 하드코딩 보다는 검색됩니다.

* 블루프린트 애셋의 맥락 메뉴에 "Create Child Blueprint Class" (자손 블루프린트 클래스 생성) 옵션을 추가, 기본 이름으로 블루프린트 에디터에서 즉시 여는 대신 콘텐츠 브라우저에서 애셋을 새로 만들어 바로 이름을 변경할 수 있도록 했습니다.

* 텍스처 에디터 기본 배경을 체크무늬로 변경했습니다. Saturation 뷰 옵션 이름을 Desaturation 으로 변경했습니다.

* 즐겨찾기 메뉴의 상한선이 없도록 변경했습니다. 즐겨찾기는 이제 가장 최근 추가/열었던 것이 목록 상단에 오도록 정리됩니다. 메인 메뉴에는 즐겨찾기 레벨 다섯 개까지만 표시되고, 나머지는 하위 메뉴에 들어갑니다.

* 입력 세팅 UI 에서 전에는 읽기 힘들었던 구두점 키에 대해 (콤마 등) 전체 이름을 사용하도록 변경했습니다.

* 파일에 쓰는 데 관련된 오류의 경우 그 오류가 발생한 파일명을 포함하도록 변경했습니다.

* 텍스처 에디터가 마스크 채널보다는 알파를 사용할 것 같은 몇몇 종류의 텍스처에 대해 알파 채널을 기본적으로 표시하도록 변경했습니다.

* 웹 브라우저 뷰포트가 로컬 사이즈를 사용하도록 변경, 어플리케이션 스케일이 변경되면 이미지의 줌 레벨도 변경되도록 했습니다.

* 기본 씬 루트 컴포넌트 편집 방식을 변경했습니다.

    * 공백 액터에 디폴트 씬 루트가 있습니다. 기존에는 처음 추가한 씬 컴포넌트에 의해 삭제되었었습니다.

    * 디폴트 씬 루트는 이제 지우거나 루트 위치에 다른 씬 컴포넌트를 끌어올 때까지 남아있습니다.

    * 부모 제거시 자손 컴포넌트의 부모변경 방식도 형제 관계 유지를 위해 약간 변경되었습니다.

* 데이터 테이블 에디터의 사용성에 약간의 개선이 있었습니다.

    * 데이터 테이블 에디터의 모양과 느낌이 새로워져, 열 크기 임의조정, 행 순서 변경, 되돌리기 / 다시하기 기능 등이 완벽 지원됩니다.

	![image alt text](image_46.jpg)

    * 이제 데이터 테이블 에디터 안에서 애셋과 클래스 프로퍼티를 편집할 수 있으며, 이제 배열 프로퍼티가 익스포트/임포트 프로세스에 지원됩니다.

	![image alt text](image_47.jpg)

    * 이제 데이터/커브 테이블을 CSV 또는 JSON 파일로 익스포트하고, JSON 에서 데이터/커브 테이블을 임포트할 수도 있습니다 (물론 기존 CSV 도 지원합니다).

* 레벨 뷰포트로 텍스처 애셋이나 머티리얼을 끌어오면 이제 커서 데코레이터 창이 유지됩니다. 텍스처나 머티리얼을 적용할 수 없는 씬 컴포넌트 위에 커서를 올린 경우 '허용되지 않음' 이라 표시됩니다.

* 이제 에디터 세션에서 원근 / 직교 뷰포트의 뷰 모드 설정을 기억합니다.

* 웹 브라우저 창 크기가 제대로 설정되도록 했습니다.

* 실험단계 및 초기 접근 단계 경고 배너가 블루프린트 및 레벨 에디터 컴포넌트 트리 양쏙에서 컴포넌트가 선택되는 디테일 패널에 표시됩니다.

* 여러줄 편집가능 텍스트 위젯에서 복사해올 때 윈도우에 새줄 시퀀스가 잘못되던 문제를 고쳤습니다.

* 직교 모드 확대 상태에서 드래그 시작 위치가 틀려지는 문제를 고쳤습니다. 드래그 시작 트리거가 스케일이 적용된 데이터로 결정되었기 때문입니다. 이제 RawDelta 프로퍼티를 사용합니다.

* 블루프린트를 통해 닫힌 루프 프로퍼티 설정/해제시 스플라인이 업데이트되지 않던 문제를 고쳤습니다.

* (고해상도 또는 일반) 스크린샷을 찍을 때의 여러가지 문제를 고쳤습니다. 모든 에디터/게임 창 유형에 정상 작동합니다. 기본 이미지 포맷은 이제 .png 입니다.

* 심플리곤이 있는 경우, 새로 만들 필요 없이 LOD 재생성이 가능합니다.

* 애셋 삭제 대화창 "레퍼런스 대체" 부분의 필터링을 개선, 블루프린트 애셋을 부모 클래스로도 필터링할 수 있게끔 했습니다.

* 스플래시 화면이 초기화 진행 상태를 보다 정확히 반영하도록 개선시켰습니다.

* 텍스처 임포트시의 노멀맵 감지 경험법칙을 개선시켰습니다. 이제 알파가 있는 노멀맵을 제대로 식별할 것입니다.

* 큰 배열 프로퍼티가 많을 때 디테일 패널 표시가 조금 최적화되었습니다.

* 디테일 패널의 BSP Surfafce Properties 카테고리에, 이제 스케일이 선택된 표면 스케일로 초기화됩니다.

* 레벨 에디터 뷰포트 트랜스폼 위젯은 이제 이동 불가능한 액터에 대해 숨겨지는데, 씬 컴포넌트가 없기 때문입니다.

* 레벨 익스포트가 이제 스켈레탈 메시, 자손 액터 컴포넌트 (재귀), 카메라를 포함한 모든 것을 지원합니다.

    * 에디터 유저 세팅의 Keep Hierarchy (계층구조 유지) 옵션도 지원합니다 : 현재 붙은 계층구조를 유지합니다.

* 게임을 독립형으로 실행할 때에도 현지화 실행 및 콘솔 명령이 작동합니다.

* 에디터 전반적으로 동작 및 탭에 아이콘이 빠진 부분이 다수 추가되었습니다.

* 액터 병합 툴의 스킨이 변경되어 이제 별도의 탭을 갖습니다. 실험단계 세팅에서 켜 준 다음, 창 메뉴에서 그 탭을 열어주기만 하면 됩니다. 그런 다음 병합하고자 하는 액터를 선택한 뒤, '액터 병합'을 선택합니다.

* 에디터에 탭을 닫는 명령이 추가되었습니다.

    * Close Major Tab (주요 탭 닫기) 명령은 포커스 상태의 주요 에디터 탭을 닫습니다 (기본키 Ctrl+F4)

    * Close Minor Tab (사소 탭 닫기) 명령은 현재 창의 활성 사소 탭을 닫습니다. 활성 사소 탭은 탭 제목줄에 강조되어 있는 탭을 말합니다.

* 에디터에서 플레이(PIE)에 서브레벨이 이미 에디터에 로드되어 있어도 디스크에서 강제로 스트림 인 시키는 옵션이 새로 생겼습니다. '에디터 개인설정->플레이->에디터에서 플레이 도중 서브 레벨 스트리밍'.

    * 보통 PIE 는 게임 월드가 스트림 인 하고자 하는 레벨을 이미 메모리에 복제합니다. 이 옵션이 설정된 PIE 는 실제 게임플레이 도중의 레벨 스트림 인 방식과 유사한 작동방식을 보입니다.

    * 참고로 에디터에서 변경은 했으나 저장은 하지 않은 레벨은 계속해서 스트리밍 되기 보다는 복제됩니다.

* 프로파일러: 네임드 이벤드 목록 크기를 변경하는 기능을 추가했습니다.

* 프로젝트 타이틀이 이제 PIE 창에 표시됩니다.

* Actor Locking (액터 고정) 에디터 기능의 이름을 Actor Pilot (액터 파일럿)으로 변경했습니다.

    * 액터 파일럿은 이제 뷰포트의 무관한 메뉴가 아닌 액터의 맥락 메뉴에서 시작됩니다. 마찬가지로 파일럿은 액터의 맥락 메뉴를 통해 멈출 수 있으며, 파일럿이 시작되면 보이는 뷰포트 툴바에서도 가능합니다.

* 클래스 뷰어의 "블루프린트 클래스 생성" 대화창을 다시 만들었습니다.

* 러시아어 키보드에 이제 기본 콘솔 키가 매핑되어 있습니다.

* 스플라인 메시 컴포넌트에 커브의 바운드를 메시 바운드가 아닌 수치로 지정할 수 있는 Min/Max Boundary 프로퍼티가 생겼습니다.

* 스플라인 메시 컴포넌트에 대한 바운드 계산이 주어진 커스텀 경계를 토대로 올바르게 계산되도록 고쳤습니다.

* 레벨 뷰포트 맥락 메뉴의 선택 서브메뉴에 일반적이지 않거나 폐기된 항목을 제거시켰습니다.

* 텍스처 LOD 세팅은 이제 디바이스 프로파일별로 환경설정 가능합니다.

    * 타겟 플랫폼 및 디바이스에 따라 텍스처 LOD 를 지정할 수 있는 사용자 제어권이 크게 향상됩니다.

    * 에디터에서 뷰->개발자 툴->디바이스 프로파일을 통해 환경설정 가능합니다.

* "액터 병합" 툴은 이제 메시의 LOD 도 병합해 줍니다.

* "액터 병합" 툴에 머티리얼도 병합시킬 수 있는 옵션이 생겼습니다. 각 소스 머티리얼의 컴포넌트(베이스 컬러, 노멀, 러프니스 등)는 하나의 텍스처로 평탄화(flatten)시켜 텍스처 아틀라스에 배치해 넣습니다. 불투명 머티리얼만 지원합니다.

* 언리얼 위젯, 특히나 회전 위젯의 일반적인 느낌이 개선되어, 사용자의 마우스 이동에 부드럽게 반응할 것입니다.

* 메시지 로그 시스템은 이제 깨진 콘텐츠 수리와 같은 일회성 동작 수행을 위한 버튼 추가를 지원합니다. 버튼을 눌러 동작이 수행되면, 버튼은 제거됩니다.

* LOD 임포트시 이제 OBJ 파일 포맷이 지원됩니다.

* 이제 지오메트리 모드의 펜 툴을 통해 에지가 자체 교차하는 지오메트리를 만들 수 없습니다.

* 심플리곤 메시 프록시 툴은 이제 메탈릭, 러프니스, 스페큘러 머티리얼 프로퍼티를 지원합니다.

* 씬 컴포넌트 서브클래스의 트랜스폼 및 벡터 프로퍼티를 레벨 에디터에서 조작할 수 있습니다.

    ![image alt text](image_48.png)

    * 씬 컴포넌트와 액터 서브클래스의 편집가능 프로퍼티는 C++ 에서 meta=(MakeEditWidget) 또는 블루프린트에서 "Show 3D Widget" 을 사용하여 태그 가능합니다.

    * 트랜스폼 또는 벡터 프로퍼티 배열에도 작동하는데, 배열 각 요소마다 위젯이 하나씩 표시됩니다.

* 팩토리 임포트 소팅 및 우선순위 방식이 업데이트되었습니다.

* 존재하지 않는 바이너리 패키징시 사용자에게 경고창이 뜹니다.

* 이제 게임내 콘솔 자동완성 목록에 유효한 stats 콘솔 명령이 나타나며, 더이상 '알 수 없는 명령' 이라는 메시지가 출력되지 않습니다.

* 이제 블루프린트 또는 액터 디테일의 컴포넌트를 더블클릭하여 뷰포트의 포커스를 컴포넌트에 맞출 수 있습니다.

* 녹화된 무비에 UMG/Slate HUD 를 포함시킬지 여부를 지정하는 세팅을 마티네 무비 녹화 툴에 추가했습니다.

* 스태틱 메시에 MiKKTSpace 탄젠트 생성 사용을 토글하는 세팅을 다시 추가했습니다.

* 마우스 캡처 뾰족부분이 접히거나 히트 테스트에 보이지 않도록만 조정했습니다. 기존에는 테두리가 보여 클릭을 막고 있었습니다.

* 모든 사용자 포커거는 PIE 에서 메인 뷰포트에 설정되며, PIE 뷰포트에 직접 클릭하기 전까지는 두 번째 이상의 플레이어 콘트롤러는 콘트롤을 받지 못합니다.

* 스태틱 메시로 변환된 BSP 는 더이상 레벨에 BSP 브러시를 남겨두지 않습니다.

* 여기에서 플레이 위치에 스냅이 적용되지 않도록 변경했습니다.

* 피처 팩 삽입시 임포트할 폴더 이름을 교정했습니다.

* 작은 아이콘 모드에서 커브 애셋 에디터에 아이콘이 표시되지 않던 문제를 고쳤습니다.

* 렌더 타겟 리임포트 시도시의 크래시를 고쳤습니다. 렌다 타겟은 소스 아트 데이터에서 생성되지 않으므로 리임포트 불가능합니다.

* 터치 인터페이스 레이아웃에서 이미지 애셋을 없음으로 설정해야 할 때 실행중인 게임/PIE 크래시를 고쳤습니다.

* FBX 임포트 도중 머티리얼을 찾지 못한 경우 스켈레탈 메시에 어떤 머티리얼 편집도 허용되지 않던 것을 고쳤습니다.

* 새 에디터 또는 창에서 PIE 중일 경우, (Pause 키로) PIE 세션 일시정지가 실제로 작동하도록 고쳤습니다.

* 자손 액터 컴포넌트를 소멸에 따른 비동기 로딩 플러시로 인해 서브레벨 스트림 인 도중 멈추는 현상을 고쳤습니다.

* "BugItGo" 콘솔 명령이 에디터에서 플레이 모드에서 작동하도록 고쳤습니다.

* 맵 로드 도중 추가된 "맵 체크" 오류 메시지가 표시되지 않던 것을 고쳤습니다.

    * 에디터에서 맵 로드시 전체 맵 체크를 하지는 않으나, 일부 오브젝트가 로드시 자체 검사를 하여 맵 체크 오류를 추가하는 것입니다.

* 월드 아웃라이너의 "select immediate children" (직계 자손 선택)이 재귀 선택되던 것을 고쳤습니다.

* 에디터에서 플레이 클라이언트 인스턴스가 현재 맵이 저장되지 않은 경우 잘못된 맵을 로드하게 만들수 있었던 버그를 잡았습니다.

* 라인 어트랙터의 시작점과 끝점 위치가 같은 경우 엔진 크래시가 날 수 있었던 버그를 잡았습니다.

* OpenGL 하에서 에디터 크래시가 날 수 있었던 버그를 잡았습니다.

* 호스트 플랫폼이 정의되지 않은 경우 자동화 테스트에 크래시가 날 수 있던 버그를 잡았습니다.

* 디테일 패널 검색시 슬레이트 브러시의 "이미지" 칸을 찾지 못하는 버그를 잡았습니다.

* 애널리틱스가 비활성화된 경우 FBX 파일 임포트의 크래시를 고쳤습니다.

* GUID 구조체 커스터마이제이션의 크래시를 고쳤습니다.

* 인스턴스가 없는 상태에서 외부 프로퍼티 유효성 검사시 프로퍼티 에디터의 크래시를 고쳤습니다.

* 소스 메시 중 하나에 할당된 머티리얼이 없을 때 심플리곤 메시 프록시 유틸리티의 크래시를 고쳤습니다.

* 패키지 스트리밍 실패 이후 게임 종료시의 크래시를 고쳤습니다.

* 저장되지 않은 레벨 이름변경시의 크래시를 고쳤습니다.

* BSP 박스에 테셀레이티드 설정시의 크래시를 고쳤습니다.

* 뷰포트가 몰입 모드일 때 컴포넌트 비주얼라이저 맥락 모드를 띄울 때의 크래시를 고쳤습니다.

* 엔진 초기화가 끝나기 전 로딩 화면에 머티리얼이 사용된 경우의 크래시를 고쳤습니다.

* 사용자 정의 구조체에 텍스트 배열 추가시의 크래시를 고쳤습니다.

* 너무 큰 폰트 텍스처 생성 시도시의 크래시를 고쳤습니다.

* 지오메트리 모드에서 에지를 돌리려 할 때 연관된 폴리곤이 일치하는 경우의 크래시를 고쳤습니다.

* 가지이 콜렉터가 찾은 오브젝트가 스트리밍 코드에 의해서만 레퍼런싱되어 유발된 스트리밍 도중 가비지 콜렉터가 발동될 때의 크래시를 고쳤습니다.

* 깨진 애셋 로드시의 크래시를 고쳤습니다. 대신 경고창이 뜹니다.

* BSP 브러시를 미러링할 때의 크래시를 고쳤습니다.

* 레벨에 레벨 이름과 같은 액터가 있는 경우, 레벨 블루프린트를 처음 열 때의 크래시를 고쳤습니다.

* 액터를 새로운 액터로 연달아 두 번 대체할 때의 크래시를 고쳤습니다.

* 에디터에서 플레이 또는 시뮬레이트 중지시의 크래시를 고쳤습니다. 뷰포트의 액터를 드래그하는 도중 키보드 단축키를 사용해서 에디터에서 플레이 또는 시뮬레이트를 시작한 경우 발생했습니다.

    * 액터를 뷰포트에 끌어온 상태에서 에디터에서 플레이 또는 시뮬레이트가 시작된 경우, 드래그 작업을 취소 및 되돌린 이후 게임을 시작합니다.

    * 에디터에서 플레이 또는 시뮬레이트 시작시 (에디터에서 되돌릴 수 있는) 다른 수정을 가한 경우, 시작 명령은 무시되고 그 이유를 설명하는 메시지가 표시됩니다.

* 페인트 모드에서 텍스처를 칠할 때의 크래시를 고쳤습니다.

* 이미 많은 수의 액터가 선택된 경우 직교 모드에서 액터를 범위 선택할 때의 크래시를 고쳤습니다.

* 텍스처 에디터에서 할당된 LOD 그룹이 BaseEngine.ini 에서 삭제된 텍스처를 열 때의 크래시를 고쳤습니다.

* 대규모 데이터 로드시의 오랜 탐색 시간으로 인해 콘텐츠를 스트리밍할 때 약간의 프레임 속도 폭증을 고쳤습니다.

* 코킹된 빌드에서 콜리전 표시를 시도하려 할 때 크래시가 날 수 있었던 문제를 고쳤습니다.

* 메시 리임포트 이후 커스텀 설정된 LOD 머티리얼이 없어지던 작은 문제를 고쳤습니다.

* 최대 텍스처 크기를 2 제곱수 이외의 텍스처로 할당 시도할 때의 에디터 크래시를 고쳤습니다.

* 월드에 스트리밍 레벨로 레퍼런싱되어 있는 레벨을 콘텐츠 브라우저에서 이름변경할 때의 에디터 크래시를 고쳤습니다.

* '되돌리기'와 칠해진 버텍스 컬러 사용시의 에디터 크래시를 고쳤습니다.

* 프로젝트 생성시 소스 콘트롤에 새 프로젝트 파일을 추가할 수 없는 경우 오류가 생성되던 것을 고쳤습니다.

* 클래스 뷰어에서 현재 선택된 클래스를 레벨에 끌어놓을 수 없었던 문제를 고쳤습니다.

* 액터의 클래스가 변경된 경우 핫 리로드 이후 액터의 루트 컴포넌트가 사라지던 문제를 고쳤습니다.

* 프로젝트나 엔진이 UE4 가 플랫폼 이름으로 사용하는 디렉토리에 위치한 경우, 전체 프로젝트 또는 엔진이 게임 빌드/생성시 제거되던 문제를 고쳤습니다.

* 프로젝트 세팅이 두 항목으로 기본 환경설정 파일을 업데이트하던 문제를 고쳤습니다.

* 스타트업 무비가 뷰포트에 렌더링되지 않던 문제를 고쳤습니다.

* 데이터 테이블 에디터가 창 레이아웃에 따라 작업이 중지될 수 있었던 문제를 고쳤습니다.

* 공전 카메라가 다음 업데이트 전까지 마우스 커서 숨김이 지연시키던 문제를 고쳤습니다.

* 출력 로그가 가끔 초기화 도중 하단으로 자동 스크롤되지 않던 문제를 고쳤습니다.

* PIE 레벨 스트리밍에서 리디렉터를 통해 월드를 로드할 때, 월드 유형이 바뀔 수 있었던 문제를 고쳤습니다.

* 애니메이션 및 UMG 블루프린트의 코너 텍스트가 잘못된 것을 고쳤습니다.

* 디테일 패널의 탐색 버튼이 값 편집이 불가능할 때는 오브젝트 프로퍼티에 사용할 수 없도록 수정했습니다.

* 브러시 트랜스폼 세팅을 디테일 패널에서 변경한 경우 실시간 업데이트되지 않던 것을 고쳤습니다.

* BSP 미러링 작업의 되돌리기가 정상 작동하도록 수정했습니다.

* 색 선택기에서 취소를 누르면 원래 색이 제대로 복원되지 않던 버그를 잡았습니다.

* 시작 시간이 설정된 사운드가 페이드 인 될때의 버그를 잡았습니다.

* 텍스처 시각화 창의 열에 클릭할 때의 크래시를 고쳤습니다.

* 디폴트 서브오브젝트의 프로퍼티를 제거하지 않고 생성을 담당하는 코드를 제거한 이후 핫 리로드 도중의 크래시를 고쳤습니다.

* 사운드큐 에디터를 열 때의 크래시를 고쳤습니다.

* 소스 구역이 여럿인 스프라이트를 반복해서 클릭할 때의 크래시를 고쳤습니다.

* 여러 애셋을 같은 이름으로 한꺼번에 임포트할 때의 크래시를 고쳤습니다.

* '이펙트 동굴' 및 '엘리멘탈' 데모 실행시 PIE 실행 또는 중지할 때의 크래시를 고쳤습니다.

* 이미 타일 맵 페인트 모드에 있는 상태에서 Shift 를 누를 때의 크래시를 고쳤습니다.

* 이름이 매우 긴 오브젝트 프로퍼티에서 디테일 패널 버튼이 클릭되지 않던 것을 고쳤습니다. 애셋 버튼 위치에 대해 약간의 조정이 있었습니다.

* 씬 아웃라이너에서 월드로 자손이 붙은 액터를 끌어 놓으면 가짜 오류 메시지가 나던 것을 고쳤습니다.

* 다중 브러시 선택 상태의 BSP 편집/돌출 작업을 수정했습니다. 딱 하나의 표면을 선택한 제한된 경우 대비 스케일도 수정했습니다.

* 탭이 활성 또는 보이는 상태가 아닐 경우의 에디터 뷰포트 그리기를 고쳤습니다.

* UMG 에디터의 디테일 패널에 빈 카테고리가 나타나던 것을 고쳤습니다.

* FBX 익스포트가 스태틱 메시에 대한 버텍스 컬러를 익스포트하지 않던 것을 고쳤습니다.

* FBX 임포트 메뉴가 잘못된 디테일 패널 오브젝트를 사용하던 것을 고쳤습니다.

* FBX 임포트 창이 가끔 스태틱 메시를 스켈레탈 메시로 임포트할 때 일관되지 않은 상태로 잠기던 것을 고쳤습니다.

* 폴리지 튜토리얼이 새로운 세팅과 UI 변화에 맞게끔 수정했습니다.

* UMG 위젯 틱 이벤트 내에 중단점이 있을 때 에디터의 그래프가 깨지던 것을 고쳤습니다.

* 타일 맵 에디터에 포커스가 있을 때 Ctrl 단축키를 사용할 수 없었던 것을 고쳤습니다.

* 폴더의 리디렉터를 고칠 때 "애셋을 로드할 수 없습니다" 알림이 잘못 나타나던 것을 고쳤습니다.

* PropertyEditor 가 지정되지 않은 경우 액터 프로퍼티가 액터 라벨에서 이름을 가져오지 않던 것을 고쳤습니다.

* 독립형 모드 실행시 특정 피직스 시뮬레이션 컴포넌트에 트랜스폼이 틀리던 문제를 고쳤습니다.

* 다이얼로그 웨이브가 잘못된 사운드 클래스로 재생되던 문제를 고쳤습니다.

* 액터를 한 레벨에서 현재 선택된 레벨로 옮길 때, 숨겨진 경우, 액터가 변형되거나 완전 삭제되는 문제를 고쳤습니다.

* 새 프로젝트의 최상외 폴더에 맵 파일명을 지을 때의 문제를 고쳤습니다.

* 액터를 새 레벨로 옮길 때 가끔 삭제되던 문제를 고쳤습니다.

* 부모 브러시가 회전 또는 스케일 조절되었을 때 BSP 표면 텍스처 트랜스폼 관련 문제를 고쳤습니다.

* 브러시 클립 툴에서 잘린 브러시를 복사/붙여넣지 못하게 하던 문제를 고쳤습니다.

* 로컬 트랜스폼 보존 옵션이 가끔 FBX 임포트 UI 에 빠지던 것을 고쳤습니다.

* 빌보드 컴포넌트 및 머티리얼 빌보드 컴포넌트에 대한 LOD 세팅이 숨겨지던 것을 고쳤습니다.

* LOD 가 있는 메시 리임포트 관련 크래시/문제를 다수 고쳤습니다 (대부분 머티리얼 인덱스 관련 문제였습니다).

* 피벗을 액터 원점에서 옮겼을 때의 오브젝트 스케일을 수정했습니다.

* 브러시 컴포넌트에 대한 직교 뷰포트 박스 선택을 수정, 더이상 에지나 버텍스를 지나지 않는 데도 모두 선택되지 않습니다.

* 쿠킹된 빌드에서 패키지 요약을 열 때의 퍼포먼스 불안정을 고쳤습니다.

* 컴포넌트를 자손이 붙은 공백 액터에 붙일 수 없었던 문제를 고쳤습니다.

* 에디터의 빌드 도중 진행상황 창 업데이트 문제를 고쳤습니다.

* 다중 씬 환경에서 씬 캡처 액터가 잘못된 씬에서 데이터를 업데이트하던 것을 고쳤습니다. 씬 캡처 액터는 이제 연관된 씬이 업데이트될 때만 업데이트됩니다.

* 씬 캡처 컴포넌트가 에디터에서 또는 블루프린트의 일부일 때 제대로 업데이트되지 않던 것을 고쳤습니다.

* 독립형 언리얼 프론트엔드를 사용해서 게임 프로젝트 빌드시의 여러 빌드 오류를 수정했습니다.

* BSP 브러시 작업을 되돌릴 때의 여러가지 크래시를 고쳤습니다.

* 로딩 화면 무비 플레이어에서 크래시가 날 수 있었던 경쟁 조건을 여럿 고쳤습니다.

* 'show volumes' 및 'show collision' 콘솔 명령을 수정, 볼륨 및 BSP 가 제대로 표시되도록 했습니다.

* 스트리밍 코드가 패키지 요약 로드 실패를 제대로 처리하지 못해 무한히 로드하게 되던 것을 고쳤습니다.

* 클래스 디폴트 오브젝트 이외의 템플릿에서 새 오브젝트 생성시의 서브오브젝트 인스턴싱을 고쳤습니다.

* 모델 오브젝트의 텍스트 익스포트를 수정, 브러시 오브젝트가 정의되기 전 앞서 선언되도록 했습니다. 이때문에 "모호한 검색" 이라는 메시지가 출력 로그에 가득차도록 만들었었습니다.

* 회전 또는 스케일 조절된 브러시에 대한 "브러시 버텍스 정렬" 작업을 수정했습니다.

* 커브 에디터에서 다른 컬러 채널처럼 알파 그래프도 편집할 수 있게끔 고쳤습니다.

* 델타 이동 기능을 되돌릴 수 없던 것을 고쳤습니다.

* "외부 프라이빗 오브젝트에 링크된 그래프" 포함 패키지 저장시의 "레퍼런싱 프로퍼티" 표시를 고쳤습니다.

* 그래픽 태블릿이 연결되면 가끔 에디터가 멈추던 것을 고쳤습니다.

* GPU 프로파일러 창을 독립형 게임에서 열었을 때 여러 텍스처가 빠지던 것을 고쳤습니다.

* PIE 종료시 레벨 에디터가 활성 탭이 아니어도 항상 포커스가 잡히던 것을 고쳤습니다.

* 마티네가 열려있을 때 직교 뷰포트에서 측정 툴이 작동하지 않던 것을 고쳤습니다.

* 언로드된 블루프린트 컴포넌트에 가끔 아이콘이 잘못되던 것을 고쳤습니다.

* 머티리얼 빌보드 컴포넌트상의 UV 좌표를 고쳤습니다.

    * 머티리얼의 실행시간 읽고 쓰기도 가능해 졌습니다.

* 공간화 활성 상태의 스테레오 사운드 플레이시의 경고를 고쳤습니다.

* 가비지 콜렉터에서 퍼지 종료 도중 영구 오브젝트 풀에 상주하는 오브젝트에서 퍼지가 소멸자를 호출하지 않던 버그를 잡았습니다.

* 에디터 비행 제어가 조합키(Ctrl, Alt, Shift, Cmd)가 눌리지 않은 상태에서만 효과를 발휘하도록 변경했습니다. [조합키]+PgUp 를 다른 동작에 바인딩하는 작업이 가능하도록 하기 위해서입니다.

* 트랜스폼 프로퍼티가 "Use 3D Widget" 마킹되어, 이제 위젯 회전이 로컬 스페이스 모드에서 제대로 표현됩니다.

* 컴파일 오류로 인해 새 클래스 추가가 실패할 때의 오류 메시지를 개선시켰습니다.

    * 클래스 자체를 추가하는데도 "클래스 추가에 실패했다"는 오류 메시지가 혼동을 야기했습니다.

    * 새 클래스 추가시 (아마도 컴파일 오류에 의해) 핫 리로드에 실패하는 경우, 이제 클래스 자체는 추가되었으나 모듈을 컴파일해 줘야 에디터에 나타난다고 알려주며, 좀 더 자세한 컴파일러 출력 확인을 위해 출력 로그를 쉽게 열 수 있는 방법을 제공합니다.

    * 클래스 마법사 또한 자동으로 닫아서 "클래스 이름이 이미 사용중"이라는 오류 메시지를 보고있지 않도록 했습니다.

* 초기 로드 도중 생성된 모든 오브젝트가 아닌, 로드된 오브젝트만 루트 세트로 마킹합니다. 이로써 블루프린트 로드 및 생성 문제 몇 가지가 해결됩니다.

* 에디터에서 플레이 시작시 진행중인 스트리밍 요청이 없도록 했습니다.

* PIE 에서의 맵 이동 실패시 기본 맵 로드를 시도하기 보다는 그냥 PIE 를 종료시킵니다. 기본 맵 역시도 로드에 실패하는 경우 치명적 오류가 날 수 있던 문제가 해결됩니다.

* 머티리얼 평탄화가 이제 씬 프로퍼티를 사용하는 머티리얼에서 더 나은 결과를 냅니다.

* 고해상도 스크린샷용 머티리얼 함수성은 이제 에디터 빌드에서만 로드됩니다.

* 타일 맵 칠하기 완료 이후 더이상 마우스 커서가 시작 지점으로 되돌아가지 않습니다.

* 버퍼 시각화 셋업 코드가 덮어쓰기 적용 이후 표시 플래그를 사용할 수 있도록 이동시켜, 에디터 이외의 모드에서도 디버그 뷰 모드가 허용되었을 때도 정상 작동합니다.

* 모듈이 사용불가일 때 키보드 단축키로 툴박스를 부를 수 없게 되었습니다.

* 에디터 재시작이 필요한 프로젝트 세팅은 이제 변경되면 토스트기 알림이 떠, 재시작하겠냐고 묻습니다.

* 레퍼런스 뷰어에서 배경에 우클릭했을 때 유효하지 않은 맥락 메뉴를 제거했습니다.

* 디테일 패널에서 프로퍼티 값을 디폴트로 리셋시키면 이제 그 변경내용이 블루프린트 자손 인스턴스에 전파됩니다.

* 일부 비인기 에디터 뷰포트 세팅을 에디터 세팅 내 고급 섹션으로 옮겼습니다.

* 게임 메뉴 빌더의 사용성 개선을 위한 개정이 조금 있었습니다.

* 메뉴 오너, 메뉴 스타일, 다양한 클릭 델리게이트 설정을 위한 함수를 추가했습니다.

* 커스텀 메뉴 아이템 추가용 템플릿 함수를 추가했습니다.

* ini 파일 파싱을 여러 번 하던 것을 멈추어 에디터 시작 시간을 빠르게 했습니다.

* 게임 뷰에서 뷰포트에 그룹 액터를 묶는 꺽쇠가 렌더링되지 않도록 했습니다.

* "액터 병합" 툴은 이제 '노멀 재계산' 옵션이 꺼진 스태틱 메시를 제대로 처리합니다.

* "액터 병합" 툴은 이제 병합된 메시에 소스 메시 애셋 이름 대신 소스 액터 이름을 사용합니다.

* 클래스 선택기 여는 속도가 빨라졌습니다.

* Git 소스 콘트롤 플러그인의 접속 오류 팝업 메시지가 복원되었습니다.

* 새 맵을 만들거나 기존 맵을 로드해도 현재 피처 레벨 모드는 지속됩니다.

* GIt 소스 콘트롤 플러그인은 이제 조금 더 여러 경로에서 필수 Git 실행파일을 검색합니다.

* 그룹 액터 피벗 위치는 이제 그룹에/서 액터 추가/제거를 제대로 업데이트합니다.

* 마티네가 열렸을 때도 직교 뷰포트에서 측정 툴이 정상 작동합니다.

* 카메라 액터 및 포스트 프로세스 볼륨의 포스트 프로세스 세팅을 비우고, 이제 디테일 패널의 Post Process Settings 필드 내 자체 카테고리에 표시됩니다.

* 내비게이션 속도 향상을 위해 레퍼런스 뷰어가 더이상 우클릭한 애셋을 로드하지 않습니다.

* 소스 메시 중 하나에 공백 머티리얼이 있을 때 더이상 심플리곤 메시 프록시 툴이 크래시가 나지 않습니다.

* 심플리곤 메시 프록시 툴이 더이상 불투명하지 않은 머티리얼이 있는 메시를 병합하려 하지 않습니다.

* UMG 팔레트 뷰가 이제 기본적으로 공통(common) 카테고리를 엽니다.

* 에디터 사용에 방해되는 자동저장 팝업을 피하기 위해서, 에디터 관련 작업이 있었던 경우 자동저장이 잠깐 중지됩니다.

* 게임 빌드시 실행 플랫폼에 대한 디바이스 프로파일만 로드되던 또다른 문제를 고쳤습니다.

* "여기에 카메라 생성" 명령이 이제 현재 카메라의 FOV 는 물론 위치와 방향까지도 복사합니다.

* 프로젝트의 시스템 세팅에서 VSync 를 켰다 하더라도 에디터 이외의 런타임에서는 더이상 에디터에서 강제로 켜지지 않습니다.

* 레벨 에디터에서 인스턴싱된 컴포넌트의 프로퍼티/어태치먼트를 변경한 이후, 컨스트럭션 스크립트에서 그 값에 의존하는 경우라면 이제 컨스트럭션 스크립트를 재실행합니다.

* 행 이름을 바꾼 뒤 엔터를 치지 않고 새 행을 선택하면, 예전 행 이름이 변경되는 반 직관적 방식이 아닌, 새로 선택한 행의 이름이 바뀝니다.

* Make Edit Widget 트랜스폼 프로퍼티에 표시되는 위젯이 이제 방향에 일치되도록 정상 회전됩니다.

* 계층구조 없이 기본 환경설정 파일을 작성해도 더이상 크래시가 나지 않습니다.

### 콘텐츠 브라우저

* 프로토타입 환경설정 가능한 애셋 태그 필터를 추가했습니다.

    * 필터 바 버튼에 대한 맥락 메뉴의 태그, 값, 비교 작업 환경설정이 가능합니다.

    * 주: 프론트 엔드 필터 관련 현재 가정으로 인해, 한 번에 하나의 필터만 활성화 가능합니다.

		![image alt text](image_49.png)

* 콘텐츠 브라우저를 통해 C++ 클래스에서 블루프린트를 파생시키는 기능을 추가했습니다.

* 디스트럭터블 메시 애셋의 썸네일 렌더러를 새로 만들어, 더이상 스켈레탈 메시 렌더러를 사용하지 않습니다. 불필요한 출력 로그 스팸이 생겼었습니다.

* 콘텐츠 브라우저의 퀵 점프 텍스트가 리셋되기 전 활성 상태로 남아있는 시간을 늘렸습니다.

* Resource Size 태그가 콘텐츠 브라우저에서 애셋의 툴팁에 나타나도록 다시 초기화시켰습니다.

* 이제 새 클래스를 추가한 이후 콘텐츠 브라우저 뷰를 동기화시키고, 새 블루프린트 클래스 추가시 블루프린트 에디터를 열기도 합니다.

* 콘텐츠 브라우저의 "콜렉션 표시"가 이제 기존 에디터 세션의 상태를 기억합니다.

* 콘텐츠 브라우저의 "폴더에서 표시" 및 "탐색기에서 표시" 맥락 메뉴 옵션이 자주 사용되는 관계로 서브메뉴에서 이동시켰습니다.

* 텍스처 썸네일 렌더러가 TEXTUREGROUP_Pixels2D 를 TEXTUREGROUP_UI 처럼 취급하도록 변경, 텍스처가 반투명으로 표시됩니다.

* 피처 팩 임포트시 깨진 데이터가 에디터 크래시 또는 멈춤을 유발하던 문제를 고쳤습니다.

* 콘텐츠 브라우저가 뷰 옵션을 통해 특정 뷰를 비활성화시킨 경우 계속해서 Engine 또는 Plugin 클래스를 살펴보던 버그를 잡았습니다.

* 블루프린트 에디터에서 시각적인 컴포넌트 노드를 전부 삭제한 경우 콘텐츠 브라우저 썸네일 아이콘이 소거되지 않던 퇴보를 고쳤습니다.

* 이름이 변경된 애셋은 콘텐츠 브라우저에서 "레벨에 사용중" 필터를 껐다 켜기 전까지 제대로 나타나지 않던 문제를 고쳤습니다.

* 콘텐츠 브라우저에서 "체크아웃됨" 필터를 수정했습니다.

* 파일이 들어있지 않은 Pak 파일을 열 때의 크래시를 고쳤습니다.

* 고유 애셋 이름 생성을 위한 로직을 개선시켰습니다.

* 콘텐츠 브라우저의 경로 변경시의 로그 스팸을 줄였습니다.

* "프로퍼티 매트릭스..." 이름을 "프로퍼티 매트릭스를 통한 대량 편집..." 으로 보다 친숙한 용어로 변경했습니다.

* 애셋 이름을 변경해도 더이상 콘텐츠 브라우저에 기타 필터가 비활성화되지 않습니다.

* 콘텐츠 브라우저에서 현재 레벨을 복제하는 기능을 복원시켰습니다.

* 애셋 발견시 이제, 애셋 뷰에서 경로 선택 이후 백그라운드 파일 검색에 더해 백그라운드 검색 결과 우선순위까지 매깁니다.

### 랜드스케이프

* 랜드스케이프 스플라인은 이제 랜드스케이프 스트리밍 레벨 사이에 메시를 분할시킬 수 있습니다.

* 랜드스케이프 스플라인 세그먼트와 콘트롤 포인트에 이제 bPlaceSplineMeshesInStreamingLevels (스트리밍 레벨에 스플라인 메시 배치)라는 옵션이 새로 생겼습니다.

    * 이 옵션은 새 스플라인에는 기본으로 켜지며, 기존 동작 유지를 위해 기존 콘텐츠에는 꺼져있습니다.

    * 이 옵션을 켠 상태로, 메시가 있는 랜드스케이프 스플라인은 그 아래 해당하는 랜드스케이프 스트리밍 레벨에 메시 컴포넌트를 자동 배치합니다.

    * 스플라인이 지나는 랜드스케이프가 두 개의 레벨로 나뉘는 경우, 메시는 랜드스케이프 컴포넌트의 레벨에 맞게끔 자동으로 나뉩니다.

* 에디터( 블류틸리티) 내 블루프린트에서 주어진 스플라인을 사용하여 랜드스케이프를 변형(deform)시키는 기능을 추가했습니다.

    * 이를 통해 순차적 랜드스케이프 변경이 가능하나, 변경은 영구적이라는 점 주의하시기 바랍니다!

* 랜드스케이프 "패턴" 브러시에 월드 스페이스 세팅을 추가했습니다.

* "랜드스케이프 홀 머티리얼" 생성 및 지정이 더이상 필요치 않습니다!

    * 랜드스케이프에 구멍을 지원하는 랜드스케이프 머티리얼을 만들려면 이제, 단순히 "Landscape Visibility Mask" 머티리얼 노드를 메인 랜드스케이프 머티리얼의 (회색으로 탈색된) "오파시티 마스크" 출력에 연결해 주기만 하면 되며, 별도의 머티리얼이나 인스턴스를 만들 필요가 없습니다!

    * 머티리얼이 (기본이자 추천 세팅인) 불투명으로 설정된 경우, 구멍이 있는 랜드스케이프 컴포넌트는 자동으로 "마스크드" 블렌드 모드를 사용하도록 변경되며, 구멍은 "그냥 작동"합니다.

    * 물론 계속해서 대신 사용할 "랜드스케이프 홀 머티리얼"을 지정할 수도 있습니다. 더이상 필요치 않지만, 구형 프로젝트의 깔끔한 업그레이드를 가능하게 하기 위한 것입니다.

* 랜드스케이프 스플라인 메시에 "Translucency Sort Priority" (반투명 소팅 우선권)을 노출시켰습니다.

* 랜드스케이프 스플라인 스프라이트는 이제 랜드스케이프 스플라인 편집 모드에 있지 않을 때 숨겨집니다.

* 랜드스케이프 액터의 LOD 세팅에 가해진 변경사항은 이제 에디터에서 서브레벨을 로드할 때 서브레벨 랜드스케이프 프록시에 전파됩니다.

* 텍스처 퀄리티 세팅을 변경해도 더이상 랜드스케이프 지오메트리에 영향을 끼치지 않습니다!

* 리토폴로자이즈 툴로 칠한 컴포넌트에 대해서, '콜리전 밉 레벨' 프로퍼티 변경 후 랜드스케이프 콜리전 작동이 멈추던 버그를 잡았습니다.

* '콜리전 밉 레벨' 프로퍼티 변경 또는 RecreateLandscapeCollision (랜드스케이프 콜리전 재생성) 콘솔 명령 실행 이후 랜드스케이프의 피지컬 머티리얼이 깨지던 버그를 잡았습니다.

* 에디터 뷰포트의 랜드스케이프 오버라이드 LOD 메뉴 항목을 사용하여 랜드스케이프의 최대 LOD 보다 큰 LOD 를 선택할 때의 크래시 또는 랜드스케이프 렌더링이 깨지던 것을 고쳤습니다.

* 랜드스케이프에 PN 테셀레이티드 머티리얼을 할당한 뒤 되돌리기를 했을 때의 크래시를 고쳤습니다.

* 랜드스케이프가 들어있는 서브레벨이 로드는 되었으나 레벨 창에 현재 숨겨진 경우 에디터에서 플레이 시작시의 크래시를 고쳤습니다.

* 컴포넌트 크기가 작거나, Forced LOD 또는 LOD Bias 가 설정된 컴포넌트가 포함된 랜드스케이프에 대한 텍스처 스트리밍시의 랜드스케이프 렌더링 크래시를 고쳤습니다. 

* Landscape Visibility Mask 노드가 머티리얼의 '오파시티 마스크' 출력 이외의 것에 연결된 경우 발생하던 머티리얼 컴파일러 오류를 고쳤습니다.

* 랜드스케이프 편집 관련 메모리 누수를 잡았습니다.

* 사용자가 보고한 랜드스케이프 브러시 코드의 잠재적 크래시를 고쳤습니다.

* '리토폴로자이즈' 툴 사용 이후 랜드스케이프 콜리전이 없어지는 문제를 고쳤습니다.

* 랜드스케이프 '컴포넌트 삭제' 툴이 붙은 폴리지 인스턴스 전부를 제거하는데 실패하는 문제를 고쳤습니다.

* 랜드스케이프 '현재 레벨로 컴포넌트 이동' 툴이 붙은 폴리지 인스턴스를 현재 레벨로 이동하는데 실패하던 문제를 고쳤습니다.

* 사용자가 새 레이어 생성을 시도할 때 '새 랜드스케이프' 툴이 크래시가 나던 문제를 고쳤습니다.

* 단일 랜드스케이프 레이어에 데이터를 임포트할 때 덮어쓰기 보다는 다른 레이어의 기존 데이터로 평균내도록 고쳤습니다.

* 한 랜드스케이프에서 다른 랜드스케이프로 복사 시도할 때 랜드스케이프 기즈고 복사/붙여넣기가 이동 및 스케일 조절되던 것을 고쳤습니다.

* 텍스처 풀이 가득찼을 때의 랜드스케이프 지오메트리 오류를 고쳤습니다.

    * 랜드스케이프 하이트맵에 대한 스트리밍은 이제 다른 텍스처보다 우선권이 높습니다 - 랜드스케이프의 지오메트리를 정의하므로, 필수 밉에 스트림 인 불가능한 경우 시각적으로 심각한 문제를 유발할 수 있습니다.

* 랜드스케이프 복사/붙여넣기 툴 사용 이후 랜드스케이프 피지컬 머티리얼이 틀려지던 것을 고쳤습니다.

* 랜드스케이프 스태틱 라이팅 오류를 고쳤습니다.

    * 랜드스케이프 구멍이 빛을 투과시키지 못했었습니다.

    * 랜드스케이프가 스태틱 라이팅에 잘못된 컬러를 반영할 수 있었습니다.

* 널 랜드스케이프 레이어가 제대로 지워지지 않는 문제를 고쳤습니다. 이때문에 나중에 페인트/비저빌리티 툴을 사용하려 하면 크래시가 났었습니다.

* 수치 오버플로우 문제로 인해 컴포넌트 크기가 매우 큰 랜드스케이프 렌더링 관련 문제를 고쳤습니다.

* 안드로이드, iOS, HTML5, 에디터 내 모바일 프리뷰어에 디플로이할 때의 랜드스케이프 렌더링 문제를 고쳤습니다. 모바일 렌더링 데이터가 쿠킹 도중 PC 데이터를 덮어써서 발생했던 문제입니다.

* 랜드스케이프 웨이트맵 페인팅 툴의 세기를 수정했습니다.

* 전체 서브레벨 LOD 사용시 실제 랜드스케이프 컴포넌트와 랜드스케이프 프록시 메시 사이의 시각적 균열과 금을 고쳤습니다.

* 랜드스케이프 조각 & 칠하기 툴이 이제 미러링된 랜드스케이프(, 즉 한 축의 스케일이 음수인 랜드스케이프)에 정상 작동합니다.

* 랜드스케이프는 이제 레이어의 피지컬 머티리얼이 변경되면 피직스 콜리전 데이터를 제대로 업데이트합니다.

* 월드 컴포지션 모드에 생성된 랜드스케이프는 더이상 툴에 의한 섹션 좌표가 조정되지 않습니다. 랜드스케이프 UV 좌표 관련 문제를 유발했었습니다.

* 랜드스케이프 편집 브러시의 깜빡이 효과를 중지시켰습니다.

* 에디터는 이제 파생 데이터 캐시(DDC)에서 비동기적으로 랜드스케이프 콜리전 데이터를 요청합니다. 에디터에서 플레이 모드에서 랜드스케이프 레벨 스트리밍시의 버벅임 문제가 해결됩니다.

* 랜드스케이프 모드 활성화 도중 레벨 창에서 서브레벨의 비저빌리티를 토글할 때 더이상 랜드스케이프 툴이 크래시가 나지 않습니다.

### Material Editor

* A new material function 'TransformToZVector' is useful for transforming vectors from worldspace into an a space defined by a Z vector. The X and Y basis vectors will be generated as orthogonal to the input Z vector.

* Added a new material function called MatLayerBlend_BlendAngleCorrectedNormals that is useful for adding an additional normal map to a Material Layer using BlendAngleCorrectedNormals without having to break the "Material Attributes" apart. Also has a mask option.

* Added three new material functions: MatLayerBlend_SeparateNormalandColorClamps: This is useful for blending two layers but clamping the alpha blend using different values for color maps and normals. MatLayerBlend_StandardWithDisplacement: This works just like _Standard but also blends the displacement layer. Very useful for landscape materials. MatLayerBlend_StandardWithMaskEdgeTint: This darkens the edge of the Top blended layer by a fraction.

* Default parameter values on parameters defined inside material functions are now obtained correctly.

* Fixed issue with menu listings for Material Expressions whose name doesn't begin with 'MaterialExpression'

* Made certain material node properties multiline in the details panel, for clarity and readability.

* New Material Function 'TransformNormals_Tangent_to_Vertex' for easily transforming normal maps for world aligned textures using the vertex normals while disregarding all tangent vectors.

* New Material Function 'WorldPosition-XY' for quickly mapping XY coordinates. Useful for quick setup of landscape or ground materials.

* New Material Layer Blend function called 'MatLayerBlend_MultiplyBaseColor' is useful for modulating the base color of a Material Layer. Has a V3 color input as well as a Scalar mask input.

* Switched the material editor to use to use the standard in-viewport toolbar

* Moved the 'preview shape' toolbar to the bottom right and removed 'real time' and 'show grid' options, which are now in the standard menu locations

* Fixed an issue where a material asset thumbnail and the preview material in the Material Editor would get corrupted when reimporting a normal map texture used by that material.

* Fixed crash that could occur when loading old Material Functions

* Fixed issue with Material flattening that produced bad normal maps on some materials

* Fixed parameter grouping for parameters defined in functions.

* Improved SphereGradient-3D material function. It now uses real world depths when calculating for camera intersection which looks like convincing 3d fog.

* Made the "Set Preview Mesh" in the Material Editor Viewport highlight when selected.

* Moved parameters to the top of the material instance editor.

* When compiling materials, the engine now no longer completely re-registers any components using the material, and instead just recreates the components' render state. This reduces the time taken when pressing the Apply button in the material editor.

### Matinee

* Added ability to use a custom Anim Blueprint for Skeletal Meshes driven by Matinee

    * This doesn't support blending yet, but you can use 'Look At' or other procedural bone controllers with Matinee animated meshes.

* Added Fade Color and Fade Audio options to Matinee camera fade tracks.

* Added 'Keep Hierarchy' option when exporting a matinee

* Matinee Export has an option to export with attachment hierarchy.

    * The option is Keep Hierarchy you can find in Matinee.  It only exports enabled tracks.  Includes Anim Tracks.

* When editing a Camera Anim, we now display the Camera Anim object's properties in the details panel by default.

* Fixed bug where quick glimpse of station occurred before start of Matinee Fight Scene.

* Fixed existing duplicate matinee groups not being overridden when importing new tracks over the top

* Fixed matinee color fade

* Fixed Matinee toggle tracks not working if bActivateSystemEachUpdate was enabled (legacy feature)

* Fixed PNG frame export from Matinee writing out bogus alpha values

* Fixed potential crash while scrubbing in Matinee with a sound key that has no sound assigned.

* Fixed preview of material parameter changes driven by curves of the animation that is played while scrubbing.

* Matinee movie recording now captures UMG/Slate huds of Hide HUD is disabled in the Matinee recording window

* Undoing a rename of a camera group now correctly undoes the same name shown in the director group

### Cascade

* Emitters with disabled LODs to remain alive so that when re-entering LOD range, the effect became visible again.

    * This caused issues with various other effects and so has been moved behind a bool in the Emitter properties called Disabled LODs Keep Emitter Alive. This is false by default.

* Fixed a bug in which collision channel settings were not being used properly after reloading a particle system. This caused all collisions to revert back to WorldStatic.

* Fixed a bug in which Skel/Vert/Surf module particles would spawn at the emitter origin

* Fixed a problem that could cause severe editor performance problems with many Cascade tabs open at a time.

* Fixed the Spawn Using Surface Normal feature in the Skel/Vert/Surf module.

### Persona

* Added a scroll bar to the notify panel to scroll through the track when zoomed

* Added context menu options to directly set trigger frame or trigger time for anim notifies

* Added option to the animation viewport to disable visualization of morph targets.

* Added resize cursor to resize handles for anim notify states

* Added search field in the Animation Detail tab

* Added support for Montage to Montage synchronization.

* Turn Table feature for Persona's Viewport.

* Disabled creating animation BP in Persona until we support multi asset opening.

* Fixed anim notify name generation not updating on property change

* Fixed APEX clothing asset files with non-ANSI filenames failing to import when selected in Persona

* Fixed crash in customization for rig asset when opening bone lists

* Fixed delete operation for anim notifies deleting the first notify with a matching name.

* Fixed delete option in animation notify context menu not working correctly on some platforms

* Fixed flickering light in Persona when used with shadow casting materials due to light movability

* Fixed incorrect notify list parsing on Mac

* Fixed morph targets not displaying in Persona after component re-registration

* Fixed preserve settings flag when reimporting clothing APB files in Persona not allowing settings to be overwritten

* Fixed private properties being shown in the details panel for anim notifies

* Fixed step forwards and backwards on Persona scrub panel snapping to frames

* Fixed the add notify menu not traversing long inheritance chains to find valid classes

* Fixed undo for changes in anim notify state duration not undoing the change

### PhAT

* Added PhAT support for scaled bones.

* Fixed orientation motor not working correctly in Phat

* When building collision for a bone, correctly apply component space matrix to propagate scale.

### Project Browser

* Made the Project Browser window a little taller so that it's clear that there's description text below the template image.

* New projects now have a random project ID set by default.

### World Outliner

* Deleting folders in the World Outliner now promotes all children to the level above instead of directly to the root.

* Prevented AI controllers (and other transient actors) from being hidden in PIE Scene Outliner

* Removed the Level Blueprint from the World Outliner view.

    * This was just an alternate route to opening the Level Blueprint, but since we can't display details for this item, we decided that it doesn't really belong in the Outliner view.

    * As before, the Level Blueprint can still be opened from the Blueprints drop-down in the toolbar.

### Static Mesh Editor

* Added socket snap-to-vertex, and socket metadata.

* Improving the Socket Manager's look and feel and enabling it by default.

* Switched the static mesh editor to use to use the full standard in-viewport toolbar

* The Transform toolbar is now only shown when something is selected that can be modified via the gizmo (collision, socket, etc...)

* Fixed issue where LODs were deleted when changing the LOD group in the static mesh editor, and LODs no longer lose custom set materials / metadata when reimported.

* Fixed socket preview mesh in the Static Mesh Editor so that it transforms as its parent socket is transformed.

* Improved the performance of scaling collision volumes in the static mesh editor.

### Source Control

* Added the ability to commit file deletions from the editor.

* Asset list now updates in "Check Out Assets" dialog when "Connect to Source Control" is pressed.

* Added implementation of Annotate File that takes a changelist

* Checking for assets to check in is now faster with SVN

* Fixed errors communicating an SVN servers when usernames or passwords contain spaces

* Fixed issue where cancelling from the "Check Out" dialog during saving assets would not cancel the whole operation.

* Fixed SVN status updates taking a long time

* Fixed URL properties in config files being truncated

* Renaming an asset with no source control now prompts the user to connect to source control or make the file writable before performing the operation.

* Source Control dialogs are no longer popped up once a file which cannot be checked out is made writable.

* Updated revision display to display strings rather than revision indices

* Allows Git provider to display revisions as hashes.

### World Browser

* Sub-levels now have a property to hide them from world composition tile view. "Hide in Tile View" in sub-level details panel.

* The Streaming Preview in world composition view now highlights LOD sub-levels in a different color to distinguish them from regular levels

* The whole sub-level LOD generation tool is now always accessible when the sub-level has a landscape actor, as generation of whole sub-level LODs for landscape does not require Simplygon.

* 'Tiled Landscape Import' now creates an empty Landscape actor in the persistent level and a Landscape Proxy actor in this sublevel for each imported tile. This allows editing common landscape properties without loading landscape tiles.

* World Composition has a new option to stream all distance dependent sub-levels needed by Matinee cinematic before starting it.  It can be enabled in the project config file: [/Script/Engine.WorldComposition] bLoadAllTilesDuringCinematic=True

* World Composition maps now work with the 'Enable Automatic Level Streaming' option (can be enabled in Settings->Previewing). Note: it only simulates visibility of the sub-levels without loading/unloading them.

* Level Bounds actor used for sub-level bounding box calculations now ignores foliage actors

* It is now possible to enable "World Composition" option even when the "Levels" window is closed.

* Layer buttons in world composition now have tooltips

* LevelBounds actor should now correctly recalculate sub-level bounding box when "Realtime Viewports" option is off

* Play in Editor (PIE) session will no longer crash when the player initiates travel from a single map to a world composition map.

### Foliage

* Added right-click menu items to the Foliage Type list allowing you to Select or Deselect all foliage instances of the foliage type

* Foliage 'Select' tool now has a command to find and select all invalid instances. Instances are considered invalid when they're not attached to any base object, or the distance to their base is further than expected.

* Foliage supports now cross-level references to their base components, so foliage can be in a different streaming level than the object it's painted on.

    * There is a new command in Levels browser that allows you to move selected foliage instances to another level. Foliage will continue to maintain a link to the object it was painted on.

* The "Foliage Settings" asset has changed its name to "Foliage Type"

    * You can now create Foliage Type assets directly in the content browser (under Miscellaneous) and filter them as well

* The foliage tool now supports seamless foliage painting across multiple levels.

    * You need to be using shared Foliage Type assets for this to work.

    * You can right-click an existing item in the foliage tool and save it as a shared Foliage Type asset, or drag a Foliage Type asset from the content browser.

* The Levels window now has a command to move selected foliage instances to another sub-level.

* The size of the brush in Foliage mode can now be adjusted in the following ways:

    * Ctrl+Scroll Mouse Wheel

    * Ctrl + Middle Mouse Button + Drag

    * Left bracket ([) to shrink and right bracket (]) to grow

* Changing foliage settings such as collision or lighting is much faster as the changes are now applied directly to the existing components instead of re-generating them. Static lighting is now only invalidated when a lighting property changes.

* Copy/pasting or duplicating actors should now correctly duplicate all attached foliage instances

* Entering foliage mode now correctly notifies other parts of the editor before clearing any actor selection

* Fixed a crash caused by foliage instances with an invalid component, seen when resizing a landscape

* Fixed a crash when opening a level that contained instanced foliage with built static lighting

* Fixed a crash when using the foliage mode Reapply tool to adjust both the density and another property simultaneously.

* Fixed a problem where undoing the deletion of the Instanced Foliage Actor didn't correctly restore foliage components.

* Fixed an issue where landscape sculpting with foliage attached left the foliage floating in mid air after an undo operation

* In the editor you may notice that maps with large amounts of foliage load faster

* It is longer possible to copy/paste or duplicate the Instanced Foliage Actor in the editor, which resulted in undefined behavior.

* Modifying shared foliage types while editing a level no longer causes foliage rendering components for other levels using the same shared foliage type to be regenerated

* Properties on non-asset Foliage Types in the foliage palette (created by drag-dropping static meshes into the palette) work with undo/redo

* After undo/redo, selection in the foliage palette is retained

* The foliage tool now detects if a shared Foliage Type's properties (eg collision or lighting) were changed while a level using the shared foliage type was not loaded. Any changes are now propagated when the level is next loaded in the editor.

### Cooker

* Added ability to specify a subset of maps to cook when packaging. This is used to make File/Package _not_ cook your entire content. See Packaging section of Project Settings.

* Added error for when engine content is accessed while cooking Downloadable Content.

* Cook on the fly now supports multiple client connections at the same time, from different platforms.

* Cooker startup time and caching in cook in editor is now faster.

* Improved caching routine for cook in editor modes

* Improves startup performance for cooker

* Improved performance for generating dependencies

* Exposed compression settings in the packaging settings in the editor

* Exposed unversioned cooking variable so you can select when you want to run with unversioned cooked content.

* Improved cook determinism.

* Iterative cooking clears out cooked content when custom versions are upgraded or when UE4 version / licensee is incrimented

* Unreal frontend now has support for creating release versions of content, creating patches, and dlc

* Cook in editor now detects important cvar changes when using iterative cooking.

* Fixed a bug where cooking would sometimes write out shaders improperly. This would result in the game showing the Default Material.

* Fixed cooked projects showing default materials when shaders have compile correctly.

* Fixed issue where cook on the side could take longer then expected to cook packages (only affects in editor cooking).

* Fixed iterative cooking asset registry getting out of date.

* Fixed iterative cooking not finding packages from previous cook.

* Fixed sorting issue when saving shader types which resulted in some shaders being recompiled unnecessarily

* also the cooked order may have been semi random resulting in different cooked content from same source content, this fixed that issue.

* Improved detection of previous cooked files when using iterative cooking.

* Made some adjustments to make cooking faster for projects with a high object count.

### Gameplay Framework

* Game Mode Customization in Blueprints

    * You can now do all sorts of things with Game Modes right in Blueprints, and various APIs in C++ have been cleaned up

    * Please reference preview engine features writeup already done here: [Engine Feature Preview](https://forums.unrealengine.com/showthread.php?67639-Engine-Features-Preview-4-22-2015)

* Added a Blueprint API for Camera Shakes.  Refactored Camera Shake code for extensibility, clarity, simplicity. Shake instance struct was removed, and instance data is now part of the Camera Shake object.

* Added Blueprint API for Camera Modifiers. Refactored Camera Modifiers for extensibility, clarity, and simplicity.

* Added Relative To Initial Transform option to Camera Anims. This provides the option to author camera animations with an initial offset, if desired (e.g. for the looping portion of a Begin->Loop->End setup).

* Added 'Character' stats category for seeing detailed stats related to Character movement code

* Exposed near and far clip plane controls for orthographic cameras

* Improved support for camera fades. Improved C++ API, added Blueprint API.

* Added support for visualizing the frustum of an orthographic camera

* Camera shakes now ignore calls to Play Camera Shake with zero or negative scales, and will allow shakes that reach zero scale to still update their oscillator so they will eventually be removed

* Fix crash opening console after removing all players from the game.

* Fixed a bug that caused some blueprints to be improperly filtered out of object libraries

* Fixed a crash in streaming pause rendering when loading streaming levels.

* Fixed an issue where the view location was incorrectly affecting the calculated projection matrix for orthographic cameras

* Fixed arrow component on Note actor

* Fixed editor crash when Set Game Paused function was called by Event Destroyed

* Fixed issue removing an active gameplay effect inside of a gameplay tag event delegate.

* Fixed issue where camera PostProcess settings could persist beyond their intended lifetime. CameraCache was only being partially cleared each frame, so old PP settings could hang around in some cases.

* Fixed potential timer leak in TimerManager when using looping timers, which could cause performance degradation over time.

* Game User Settings are now saved correctly

* Gameplay Tag custom details panel works in User Defined Structure editor.

* Scaling an actor with ChildActorComponents will now scale the child actors as well.

* Sub-levels marked as "AlwaysLoaded" will now be fully loaded before gameplay code attempts to find spawn point for players.

### Learning Resources

* Added a brief tutorial on using feature packs

* Added provision to provide a sort key to a feature pack manifest to allow finer control of ordering in menu

* Removed some unneeded entries in the DefaultEngine.ini for FirstPerson blueprint template

* Templates: Fixed an issue with animation state in the first person BP template

### In-Editor Help

* Fixed docked tutorial browser never showing tutorials

* Fixed stalls in tutorials

### Content Examples

* Added missing space in text at section Audio 1.8 of Content Examples

* Fixed a texture issue in Content Examples where adjusted normals created an undesired flickering effect

* Fixed an LOD bias issue causing performance issues with First person template.

* Fixed an overlap that was causing z-fighting in Advanced Vehicle template.

* Fixed an resolution issue causing performance issues with Sun Temple

* Fixed shadows in player blueprint.

* Fixed visual gaps in walls when viewed at a distance on SunTemple.

* Repaired visible gaps at ground asset bounds of Effects Cave.

* Updated and repaired normals on CobbleStone material in StarterContent.

### Sample Content

* 2D and 3D side scroller templates now enable snapping layers by default, with three pre-defined layers at the correct depth for the sample content

* Repaired z-fighting occurring on directional arrows in StrategyGame.

### Localization

* All localization configuration scripts now treat path settings consistently as being relative to the root directory of the project.

* Commandlets for generating localization manifests and archives now have improved logging output useful in diagnosing failures to write to files.

* For Japanese keyboards on Windows platforms, use @ key as the default in-game console key when Windows input language is set to Japanese on editor start-up.

* Improved initialization of internationalization resources to minimize unnecessary initialization overhead.

* Localizable text gathered from metadata values using the "{FieldPath}" value to generate a localization key now produce a simpler, less verbose localization key.

* Localization configuration script settings have been renamed to be more intuitive and now offer superior control over what is processed for gathering localizable text.

* Localization conflict reports and word counts now report a warning rather than a fatal error when the destination file(s) can not be checked out by source control.

* The commandlet for generating word count and conflict reports for localization data now attempts to use the source control/versioning system if it is configured.

* The GatherTextFromSource commandlet now uses the same setting for excluding paths from being searched as other commandlets: ExcludePathFilters.

* The PO files generated by exporting from localization manifests and archives now include the keys for each text as a reference-comment for the PO message. This should provide more context for localization teams to use when localizing text.

* Corrected some unusual date & time text formatting behavior by using a more appropriate default time zone.

* Corrected text automation tests that falsely reported errors in date time formatting as text.

* Disabled the automatic revert of added/checked out files when exiting localization commandlets, allowing the user to manually submit the changes to source control.

* Fix for issue where the requested culture was being compared against the prioritized parent cultures of the _current_ culture, instead of the _requested_ culture, which hadn't yet become the current culture.

* Fixed some Sequencer code so that UMG animations don't have their names/bindings gathered as localizable text.

* Generating word count and localization conflict reports no longer fails if the only culture specified is the native culture.

* Localization commandlets now properly handle source control operations on files when conditions do not allowed them to be marked for adding.

* Localized text properties now preserve their key & namespace when edited

* Packages loaded as a consequence of loading an other package during a gather of localizable text can now also be properly processed for gathering of localizable text.

* Removed redundant operations in gathering localizable text from assets that were causing lengthier processing times.

* Removing Window Menu level menu for Translation Editor.

* Resolved an issue where missing keys and conflicting identities in text within assets were resolved but not gathered properly after resolution

* The commandlet for parsing text files for localizable text now properly handles newlines in text files regardless of the platform the commandlet is running on.

* The localization importing/exporting commandlet now executes importing before exporting if both are specified. The data to be imported is no longer clobbered by the export before the data can be imported.

* Translation Editor: When saving, if source control is disabled, try write the file anyway.

### Networking

* Ability to disable replays on command line. Use -noreplays.

* Added an internal network protocol version number to the default check which determines if a client and server are compatible.

* Added checkpoints to replays to speed up scrubbing

* GameMode can now auto start/stop replay recording for dedicated servers. Set Handle Dedicated Server Replays in the ini to use this feature.

* Multicast Remote Procedure Calls (RPCs) will now be played back in network replays correctly.

* Reduced the bandwidth usage of replication by packing network IDs into fewer bytes when possible.

* The "DemoRec" console command can now be invoked without a parameter. If it is, the name of the current map will be used as the name of the replay.

* The network profiler tool now tracks more accurate and detailed bandwidth information, and there is new chart view mode.

    * Bandwidth used for remote procedure calls and actor properties is now broken down by header, payload, and footer. Bandwidth used internally by the engine protocol is also broken down in more detail.

    * Acknowledgements ("acks") are now reported individually.

    * Bandwidth from arrays that use Fast Array Serializer is now reported.

    * The chart has a new "stacked bunch size" view. Clicking on this radio button will show a stacked area graph, so that it's easier to see where bandwidth usage is coming from each frame.

		![image alt text](image_50.png)

* Added tracking of unreliable, multicast Remote Procedure Calls (RPCs) in the Network Profiler tool. New network profiles taken will now track this information.

* Don't send netspeed until after we're fully connected. This fixes spam when our connection attempt gets rejected

* Fixed a bug that could cause actor components to replicate to clients incorrectly during Play-in-Editor sessions.

* Fixed an issue that could cause some clients to receive incorrect parameter values when a multicast function that was implemented in C++ was called from Blueprints.

* Fixed an issue where clients would get stuck sometimes when receiving a disconnection event while joining a server. Clients will now go back to the default world in this case.

* Fixed an issue with partial packet sequences, and the possibility of them rolling over incorrectly

* Fixed an issue with the last packet not being read sometimes when playing back a network replay.

* Fixed capturing network profiles in the editor. These files will now display the chart correctly in the Network Profiler tool.

* Fixed rare cases where the game would stop rendering during network transition due to a host disconnect while the local player had a PlayerController with no Player object attached.

* Fixed recording of network profiles during replay recording, the captured profile will now display more accurate information in the Network Profiler tool.

* Lots of actor channel/closing sanity checking to try and improve stability

* Make sure that voice chat audio is marked as non-spatialized so it remains audible as long as a player is talking, assuming they aren't muted.

* PIE net connection timeout is now properly disabled even in the first few ticks of the connection. This prevents long load times from causing a timeout before the net connection has been given a world.

* Prevent possible crash during server travel related to beacons who have a timer enabled and try to disable it through a nonexistent world.

* When shutting down actor channels, all registered sub-objects will now get destroyed as well.

### Online

* Added a "Relevant For Network Replays" property on Actor which, if set to false, will prevent the actor from saving out to the network replay.

* BuildPatchServices now supports a stage only installation. This allows for your own handling of placing new install files into an installation.

* BuildPatchTool now supports a file attributes meta date list which are stored in the manifest output. These attributes will be applied by the installer. Still early development.

* Steamworks has been upgraded to version 1.32.

* BuildPatchTool is decommissioning UObject based manifest files. They are still usable, but cannot be future proof.

* Network replays now only load streaming levels with the "Should Be Loaded" option selected.

### Other

* Added a Flurry analytics plugin for IOS

* Added an editor setting to allow HMD control of view rotation in editor viewports

* Added colors to log items in Visual Logger, to show errors in red and warnings in yellow. It's easier no notice log entry with possible important information\ that way.

* Added debug camera to Gameplay Debugger, to have a way to fly around (Tab key switch between cameras by default).

* Added feature to highlight filters/categories from selected item to Visual Logger tool - minor bu useful feature in everyday use.

* Added option to filter logs by class to Visual Logger tool and to keep filters persistent between editor sessions.

* Added option to reset and remove all old data from Visual Logger tool for each new PIE/SIE session (or for each new data loaded from file).

* Added option to stay always with cursor on the last frame in Visualizer Logger tool.

* Added option to Visual Logger tool, to select between regular pause or PlayersOnly pause - to pause gameplay on level if needed.

* Added oriented box shape to Visual Logger, to log more accurate shapes.

* Added support for both sitting and standing modes for SteamVR

* Added support for extension-less streaming media URI schemes

* Added support for lambdas and function objects in message endpoint handlers

* Added support for re-triggering instanced abilities.

* Allowing message handlers to decide for themselves whether they want to handle a message; documentation updates.

* Correcting wrong spelling of community developer's name.

* Downloaded binary dependencies for GitHub are now cached in the .git/ue4-gitdeps folder, so switching branches or cleaning the repository will no longer cause dependencies to be redownloaded.

* Exposed Notify Apex to blueprints, can also bind custom events to that notification.

* Extended status information in Visual Logger so it's possible to log multiple levels of collapsible status information.

* Functional Testing framework minor improvements

    * A test can now point to relevant actors placed on the level and debug drawing will draw an arrow pointing at it so that user can see which actors on the map are relevant to given test. Some tests automatically add some actors to that list, like debug camera or AI spawn points.

* GitHub dependencies download tool detects proxy server settings in the http_proxy environment variable.

* Improved path corridor drawing in Gameplay Debugger, to render nav areas with colors.

* Integrated updated documentation and code comments for Leap Motion plugin

* Linux files are no longer downloaded for Git on Windows unless the LINUX_ROOT environment variable is set.

* Messaging: Recipient threads are now traced

* Oculus SDK Updated to 0.6

* Support for Oculus Audio SDK for 3D Headphone Spatialization on the PC platform.

* Added support for the new "compositor" system

    * Users should see significantly better GPU utilization in their scenes

* Proxy server settings for downloading Git dependencies can now be specified with a single --proxy=http://<login>:<password>@<server> argument.

* Refactored IMessageHandler.h so that it doesn't have header dependencies

* Refactored message tracer to use lambdas instead of delegates

* Removed AutoPlay feature in MediaPlayer assets.

* Rendering ClearColor while media is not playing/not paused

* Updating Community Developer credits.

* All chat timestamps now use local machine time for consistency.

* Changed target selection for Gameplay Debugger tool. Target is selected on clients in client-server environment now.

* Eliminated the fatal "No Oculus detected" warning when the Oculus runtimes were installed, but no HMD was attached

* Fix for crash on start up when the Oculus Rift headset is plugged in, but not turned on

* Fix issues with propagating property changes from CDO to instances.

* Fixed a bug in HMD function library where Set Base Position and Offset would fail check incorrectly

* Fixed a bug where the resolution drop down wouldn't show up in the tutorial.

* Fixed a forced disconnect in rare cases when you were previously disconnected and rejoined the previous session fast enough to catch your old login information

* Fixed an issue where a black screen was presented to the player with no indications in rare circumstances where a connection to the host was lost and the game was loading back to the main menu

* Fixed an issue where characters appeared blurry when using certain video settings.

* Fixed BasedMovement potentially out of sync after leaving root motion. (SimulatedProxy)

* Fixed being able to take screenshots in VR

* Fixed crash related to running PIE session without any viewport in editor.

* Fixed debug camera ('ToggleDebugCamera' cheat) in StrategyGame project. Debug camera should work in any situation now, even during Matinee.

* Fixed EQS rendering in Visual Logger tool, in editor.

* Fixed incorrect name area flag usage in FBX import menu

* Fixed issue which could give us inaccessible vlogs in Visual Logger tool with persistent filters.

* Fixed issue with timeline's cursor outside time range in Visual Logger tool.

* Fixed logging with Visual Logger on dedicated servers using EnableAILogging commandline argument.

* Fixed media reloading when changing a MediaPlayer property in the Editor

* Fixed message tracer not processing traces unless MessagingDebugger is open

* Fixed NavMesh rendering in Gameplay Debugger tool, for standalone and client-server games.

* Fixed non-file based URLs (http://, rtsp:// etc.) getting mangled in MediaPlayer editor

* Fixed object naming in SimpleConstructionScript

* Fixed play button unavailable after non-looped movie finishes

* Fixed play button unavailable after non-looped movie finishes

* Fixed playback rate label in MediaPlayerEditor

* Fixed SlotNode being registered multiple times when inside of a State. (Triggered by ?FAnimNode_StateMachine::SetState)

* Fixed some cases where friend presence information was wrong, leading to the appearance/disappearance of the "join game" button at inappropriate times.

* Fixed the log message when an application fails to connect to a file server to correctly state that it will retry.

* Fixed the way PawnAction aborting is handles - now it's treated just like any other pawn action event

* Fixed video playback choppy due to new Slate sleep mechanism

* Fixed Visual Logger's toolbar for small icons editor setting.

* Fixed WmfMedia drawing ClearColor in between looped video playback

* Gameplay Debugger should be able to use from all connected clients.

* Git dependencies tool now works correctly for non-HFS drives on Mac.

* HMDs are now prevented from trying to initialize when running commandlets

* In general debug camera is fixed and should work correctly even with matinee or in homebase, during any map with spectator.

* Media: Fixed MediaPlayer not handling web URLs and non-relative paths properly

* Media: Properly handling empty URLs

* Tweaked layout of a few commonly-used data structures to reduce memory footprint and increase efficiency.

### Paper2D

* Sprite Editor: Added a corner text display to the viewport indicating the current mode when not in View mode

* Added a combined 2D Rotation / Translation widget to the level editor, which can be enabled in Project Settings .. 2D

* Added a context menu option to create a tile map from a tile set asset

* Added a detail customization for sprite and flipbook components to push the sprite category above the material category, matching their relative importance

* Added a minor optimization to socket searching to prevent an unnecessary search when another component is attached but not to a socket

* Optimized steady-state rendering of large tile maps, they are now baked into a per-instance vertex buffer

* Added a named normal map slot to the default lit sprite materials in the Paper2D plugin content directory

* Added a Paper2D category to the asset filter list in the content browser

    ![image alt text](image_51.png)

* Added an extension point to make it easy to define new front-end filters and have them available in the Content Browser

    * Create a subclass of UContentBrowserFrontEndFilterExtension and override AddFrontEndFilterExtensions

* Added editor settings (in Editor Preferences..Content Editors) for the sprite, flipbook, tile map, and tile set editors

* Added stats to the Paper2D render scene proxies

* Added summaries to the headers of the Rendering and Collision categories in the Sprite Editor details panel

    * Rendering shows what kind of material is being used (Masked/Opaque/Translucent)

    * Collision shows the collision domain (None, 2d, 3d)

* Added support for specifying a scaling factor between pixels and unreal units (PixelsPerUnrealUnit) to UPaperTileMap

* Flipbook Editor usability improvements

    * Added the standard in-viewport transform toolbar to the Flipbook Editor

    * Added display of the sprite name in keyframe strips and when drag-dropping a key frame

    * Improved the styling and behavior of the flipbook editor timeline

    * Added a scroll bar so timelines longer than the width of the window can still be edited

    * Added a shortcut to to change the time scale when over the timeline (Ctrl+MouseWheel)

    * Added an alternating background per-frame

    * Changed style of keyframe strips so that they stretch across the full duration of frames, with the grab-handle overlaid on top

    * Added key frame menu options to act on the associated sprite (Find in Content Browser, Edit Sprite, Replace with another)

* Improved socket editing

    * Added a selection highlight to sockets

    * Added a drop shadow to socket names

    * Allowed deletion of selected sockets

    * Sockets from key frames can now be viewed (but not edited) in the Flipbook Editor

    * Allow deselecting sprite sockets in 'View mode'

    * Prevent showing sprite sockets in 'Source Region Edit Mode' (they were not useful there and were being shown in the wrong coordinate space)

* Improved source region edit mode

    * The name of each sprite is displayed in the center of the source region (can be toggled off and on via the tool bar)

    * The display of other sprites sharing the same texture can be toggled off and on via the tool bar

    * Added an "Extract Sprites" button to the toolbar

    * Source region edits are limited to the left mouse button now, so right-click-drag to pan always works as expected

* Improved zooming in the tile selector panel

    * Press F to zoom to fit

    * Maximum/minimum zoom range has been increased (adding 16x, 32x, 1:16, and 1:32)

* Improvements to 2D terrain splines

    * Improved terrain spline collision generation

    * Added support for overlapping terrain sections and material draw order

    * Filled versus closed can now be controlled independently, allowing creation of a ring with no inner region

    * Reduced overlap artifacts in tight corners by unwrapping sprites that would have been twisted (> 90 degrees)

    * Terrain spline points are now constrained to the XZ plane

    * Note: Terrain splines are still considered Experimental

* Paper2D asset import and conditioning settings

    * The default scale factor between pixels and unreal units is now 1.0 (1 pixel/cm)

    * Both lit and unlit default materials can now be defined in Project Settings - Paper2D Import

    * Texture group and compression settings that are applied to imported sprite sheets can now be configured

        * The defaults remain the same as before (uncompressed, nearest filtering) but can be changed to match the style of the game

        * These settings can also applied to textures by using the "Apply Paper2D Texture Settings" context menu option in the Content Browser

    * Exposed an option for the automatic resizing that occurs if the source texture changes size (Resize Sprite Data To Match Textures in Paper Runtime Settings)

		![image alt text](image_52.png)

    * Creating a new tile map from a tile set now analyzes the texture to pick the best material

* Promoted Paper Flipbook Component from Early Access Preview to fully supported

* Significantly improved the compatibility of the JSON importer exported from Tiled

    * It now parses all defined data as of Tiled 0.11.0, although many aspects are still lost during conversion to internal types (most notably image and object layers)

* Sprite and tile collision geometry can now contain circle/sphere shapes

    ![image alt text](image_53.png)

* Sprite assets can now be used as the preview 'mesh' in the Material Editor (along with any other kind of asset with an associated Mesh Component subclass)

* Sprite atlasing improvements

    * Exposed atlas texture options (texture compression, mip count, filtering, etc...)

    * Affected atlases are automatically rebuilt when the AtlasGroup is changed on a sprite asset

    * Mipmap generation now uses a Basic constrained rect approach to reduce bleeding between sprites

    * Atlas rebuilds are incremental updates where possible, preserving sprite positions until wastage is significant

    * Atlas texture reuse to avoid sprite updates where it can be helped

    * Note: Sprite atlas groups are still considered Experimental

* Sprite creation and sprite sheet importing automatically look for an associated normal map

    * Either action will look for an adjacent texture/atlas named _N or _Normal (configurable in the settings)

    * When a normal map is detected, it automatically uses one of the default lit materials instead of the default unlit materials. Both are defined in the 'Paper2D - Import' settings page.

    * When exporting from Texture Packer, use the "Pack with same layout" option, as each additional texture must contain the sprite in the same region of the image

* Sprite Editor: Added a notification message when switching which sprite is being edited in Source Region edit mode

* Sprite Editor: Added display of 'lit/unlit' to the rendering section header of the sprite details customization

* Tile Map Editor: Add a warning prompt visible when no tile set is selected; clicking on it opens the tile set picker

* Tile Maps: Added the ability to drag-drop tile set assets onto the tile selector panel of a tile map editor

* Tile Maps: Changed tile maps to always display the wireframe bounds of layer 0 when unselected in the editor, to help show where an empty tile map is

* Tile Sets can now be 'conditioned' to prepare the tile sheet texture for use when the tile set is zoomed in or out

    * This prevents artifacts where pixels in neighboring tiles would bleed into the rendering of the tile map

    * The option can be invoked on a tile set asset using the "Condition Tile Sheet Texture" in the Content Browser right-click context menu, which will create a copy of the tile sheet texture with dialated borders around each tile and update the tile set per-tile spacing and margin accordingly

    * Settings for this option can be found in Editor Preferences .. Tile Map Editor

* Workflow and usability improvements for sprite and tile geometry editing

    * Added support for rotating the collision/rendering shapes

    * Added more specific statistics about baked collision geometry (splitting it out by primitive type, etc...)

    * Added automatic identification of custom geometry that forms a rectangle, generating more efficient collision shapes than treating them as convex would

    * Changed collision rendering color to be blue instead of yellow to avoid confusion with the selection color

    * Shapes now have a filled background which can be clicked on to select the entire shape

    * Prevented hit testing on the pivot display widget, avoiding a 'missed click' feeling if you tried to select a shape or edge that overlapped with it

    * The Add Polygon tool has been overhauled to be more intuitive

        * Polygons can be closed by double-clicking anywhere or by single-clicking on the first vertex when there are at least 3 verts

        * Shows a preview of the polygon in progress and what would happen if you clicked where the cursor currently is

        * Ensured winding is always facing outward when the 3rd vertex is first added

        * Prevent adding vertices that are nearly equal to the existing ones

* Selects the shape when the polygon is closed out

* Sprite Editor: Moved the Alternate Material property to the Rendering category and hid it unless the geometry mode is Diced

* Added a map check warning to sprite components with non-uniform scale of simple collision geometry indicating that they won't collide with anything, matching the warning that static mesh components emit

* Added validation of socket names when editing sprites to make sure names are unique and not-empty

* Changed centroid for polygon shapes when editing sprite or tile geometry to be a bounding box center rather than a weighted average

* Changed layer batch submission order for tile maps to go back to front to help translucent rendering (only works when viewing from the front though since components are still sorted as a single unit)

* Changed tile maps imported from Tiled to always use positive separation between layers, reversing the layer order from Tiled since it orders back to front in the .JSON

* Clamped the maximum framerate on flipbook assets to 1000 fps

* Excluded the per-tile spacing from the bottom right of the tile selection rectangle in the tile set viewport

* Note: The spacing is still currently included in the interior when multiple tiles are selected

* Fixed a bug where tile map layers would lose data and be stuck at a phantom smaller size after undoing a property edit of the map width / height

* Existing affected tile maps are fixed up on load as well

* Fixed a crash when clearing the texture reference or choosing a texture that is smaller than the tile size in the tile set editor

* Fixed a crash when undoing creation of tile map layers via the details panel

* Fixed an issue that prevented using negative values for the Drawing Offset of a tile set asset

* Fixed an issue when merging non-square tile map layers

* Fixed an issue where reimporting a JSON sprite sheet wouldn't reimport any existing texture pages

* Fixed an issue where switching to Perspective view in a Paper2D editor would be looking along the thin edge of a sprite/flipbook/etc... instead of looking at it

* Fixed an issue where the first row/column of a tile could not be clicked on to select the tile in the tile set editor or tile selector dialog

* Fixed an issue where the selection outline didn't show up in the stand-alone tile map editor

* Fixed an issue where the tile set drawing offset would ignore the Pixels Per Unreal Unit setting of the tile map

* Fixed an issue with how the transform gizmo worked in Edit Source Region mode on rotated sprites

* Fixed problems with tangent generation in sprites and tile maps

* Fixed the direction of the tile set specified DrawingOffset to match the rest of the tile map coordinate system and Tiled

* Positive DrawingOffset.Y values will now push a tile down relative to the tile map grid, rather than up

* Fixed the tile selection rectangle not being updated in the tile set editor when the tile set properties were modified

* Fixed various issues in cooked/packaged builds by removing all uses of platform-specific texture data for sprite/tile map/etc.. building, it now always works off of the imported size, since that was the authoring size in the editor

* Improved editor performance when several Paper2D editors are open but not all visible at once by avoiding processing for the invisible editor viewports

* Improved the responsiveness of the sprite editor when dragging property spinners in the details panel (collision and render data rebuilds are deferred until the spinner is released)

* Limited maximum tile map size to 1024x1024 (still far larger than would be recommended in a single component)

* Prevented an unnecessary texture analysis pass from being done each frame when editing sprites

* Redefined behavior when a tile set has a different tile height than the map. It now puts the bottom left corner of the tile in the bottom left corner of the map cell, rather than the top left in the top left corner.

* This matches the behavior of Tiled, and makes working with variable-height isometric tiles feel better.

* Significantly improved the quality and performance of the 'Shrink Wrapped' geometry type for sprite assets

* The algorithm is now conservative, so it will never cut into the edges of the sprite pixels

* There is a new detail amount property, which controls the resolution that the analysis runs at, providing a better workflow when using large textures

* Snapped some canvas text drawing to integer offsets to reduce the percieved change in font 'weight' as the length of a string changes

* Sockets can now be rotated and scaled in addition to translated via the widget in the sprite editor viewport

* Sprite Editor: Allowed editing an edge of the source region by clicking anywhere on the edge, rather than only at the midpoint

* Sprite Editor: Hid collision geometry properties in the details panel when in Edit RenderGeom mode and vice versa to reduce confusion

* Sprite Editor: Switched default focus key to F from Home, matching the rest of the editor

* Sprite Editor: Synchronized the selection in the sprite list when the sprite being edited changes

* Tile map and sprite components that have no material set will now render using the default material instead of being invisible

* Tile Map Editing: Move 'Tile Map' and 'Setup' categories above Materials category

* Tile Map Editing: Painting with a brush that contains empty tiles now works like a brush with holes, rather than erasing the existing cells

* Tile Map Editor: Fixed an issue where the cursor preview would not be rendered if SeparationPerLayer was negative

* Tile Map Editor: The selection indicator for tile sets now respects the border margin and per-tile spacing options

* Tile Maps: Fixed an issue with the flood fill tool and tile map initialization where it would not consider an erased area the same as a never-before painted area

* Tile Maps: Fixed the pivot show flag not working in the stand-alone tile map editor

### Physics

* Added ability to enable and disable constraint projection at runtime

* Added deferred path for physics body initialisation to speed up creation of large amounts of physics bodies

* Added faster static initialization path for instanced static mesh components

* Added methods to foliage statistics function library

* Added the ability to ignore mass for all force/torque type functions. Just set AccelChange = true when calling AddForce, AddTorque, etc...

* Added vehicle physx substepping

* Cleaned up and organized Character Movement Component settings to break things down into more subcategories.

* Expose PCM contact manifold option. Helps in cases where contact point accuracy is important.

* Exposed fixed time step as a general project setting

* Exposed full control over which degrees of freedoms are locked for a rigid body.

* Exposed restitution combine mode and BounceThresholdVelocity

* Exposed several PhysicsHandleComponent properties to Blueprints

* Exposed the moment of inertia of a rigid body via GetMomentOfInertia

* PhysX 3.3.3 upgrade. See PhysX release notes for more info

* Fixes various issues caused by having degenerate triangles in PhysX collision data.

* Added interp speed option to nav movement projection, and don't let agents pop so high above NavMesh.

* Added scale support for instance physics bodies inside instanced mesh components

* Character crouch/uncrouch now changes crouch state regardless of whether at the target capsule height. Can Crouch function no longer checks the height condition.

* Character's On Walking Off Ledge event now takes multiple parameters to make it easier to compute a custom velocity.

    * Engine code no longer forces a zero Z velocity in Start Falling, so new velocities in On Walking Off Ledge will be fully respected.

    * BPs will automatically update. C++ has deprecated the old empty functions (they will not be called) in favor of the new ones.

* Character Movement Component runs normal Check Still In World code when Updated Component is simulating physics.

    * Fixes ragdolls not respecting KillZ or world bounds.

* We now consume movement input in Pawn when Unpossessed or Restart is called.

* Fix BSP polygon normals becoming incorrect when non-uniform scale is applied.

* Fix bug that could cause On Overlap to be called multiple times for Actors as different components began to overlap.

* Fix Capsule Component with Capsule Half Height = Capsule Radius creating collision geometry with slightly taller half height. This should simply create a sphere.

* Fix Characters using orient-to-movement or controller desired rotation not rotating along with a moving base.

* Fix comment on Enable Camera Rotation Lag.

* Fix improperly tagged redirects for Characters and movement components.

* Fix Projectile orientation when Rotation Follows Velocity is set but there is no velocity.

* Fix skeletal mesh Add Radial Force and Add Radial Impulse to average out the strength based on body mass.

* Fixed a crash accessing physics material data during initialisation.

* Fixed a crash creating physics data for Instanced Static Mesh Components where the Static Mesh property had not yet been set

* Fixed a crash in the destructible mesh editor 

* Fixed an issue where convex collision elements for a scaled component would be drawn at the wrong size (they were being scaled twice)

* Fixed Based Movement potentially out of sync after leaving root motion. (Simulated Proxy)

* Fixed crash in physics initialisation for instanced static mesh components that had a missing or invalid mesh

* Fixed crash when applying an override material to a destructible mesh instance in the editor.

* Fixed crash when deferring physics additions

* Fixed crash when using a cloth asset that uses a lower resolution simulation mesh than the graphical mesh.

* Fixed dis-ambiguity between shader format and sleep family enums - SF_Max.

* Fixed incorrect body instance usage when initialising ragdolls causing issues when client and server use different scene configurations

* Fixed Nav Walking behavior not getting restored if a Character is set to falling and then lands again.

* Fixed radial forces not working correctly with physics sub-stepping.

* Fixed setting materials on destructible meshes not updating chunk materials and physical materials

* Fixed the bounding box of spline mesh convex collision elements

* This may have been causing some physx weirdness with spline meshes

* Fixed warnings when particles were trying to apply impulses to static objects.

* Flip the collision normal of an object that is not moving. This is needed so that the collision normal is always pushing the object away from the impact point

* Improve comment on "Phys Mat" pin on Hit Result to indicate that "Return Physical Material" must be set.

* Made it clear that Controller possession of Pawns is supposed to only happen on the authority.

    * Blueprint methods have been marked as Blueprint Authority Only. Attempts to use them on a network client will generate a message in the warning log and do nothing else.

* Make sure Pawn unregisters itself upon End Play, not just during Destroyed.

    * Fixes Pawns remaining in pawn lists when being streamed out.

* Remove component from Overlapping Components array before firing On Component End Overlap events.

    * Prevents other components from thinking the overlap is still active if they check the Overlapping Components array.

* Reordered some parts of Hit Result to be in a more logical layout.

* Reverse normals in component overlap event when object is not moving and something else hits this component.

    * This is needed so that normal is always pushing the object away from the impact point.

* Spectator Pawn now replicates by default, however those spawned by PlayerController will continue not to replicate since they are client-only.

    * Added network sync of spectator rotation in addition to currently synced location.

    * Added ServerSetSpectatorWaiting / ClientSetSpectatorWaiting RPCs to make it easier to allow spectators to be able to join/respawn.

* Vector and Rotator equality checks now properly handle a zero tolerance.

* Warn when trying to move a component with static mobility from a Movement Component.

* We now compute ImpactNormal for collisions with Box shapes. Previously it equaled the contact normal when impacted by shapes.

    * Fixes Characters being unable to step up simple box geometry, among other issues.

### Platforms

* Added EXPERIMENTAL "Desktop (Win + Mac + Linux)" Target Platform which will allow you to cook content that can run on all 3 platforms.

    * Currently, we can't compile D3D shaders on Mac/Linux, so if you cook on Mac or Linux, you will have to run Windows with -opengl.

    * Packaging all three together into a single directory structure has some issues still, so it has been removed from the File | Package menu in the editor.

    * It is possible to run the cooker on the command line with "desktop" as the platform to cook for.

* Added support for convertible laptops (see EConvertibleLaptopMode)

* Added the ability to specify whether the game should be built during Play On Device.

    * There is a new setting in the Editor Preferences 'Play' section which allows users to specify whether all games are built when selecting Play On Device, games are never built, or to perform the default behavior (build code-based games, do not build content-only games).

* Iterative deploy implemented for PS4. Launching PS4 from the editor after the first launch should be 'much' faster now.

* Multiple improvements to the HTTP Chunk Installer (Code projects only)

    * Added -chunkinstalldirectory and -chunkinstallversion to UAT command-line options.

    * Added Chunk Dependency Graph to better control duplication of assets between chunks.

    * HTTP Chunk Installer correctly re-uses old builds to reduce download sizes

    * Windows uses HTTP Chunk Installer by default if enabled in project Build.cs

    * Added HTTP Chunk Install options to Editor Packaging menu.

    * Added HTTP Chunk Installer sync mode and offline mode.

    * Added HTTP Chunk Installer Options to Editor Project Launcher/UnrealFrontend

    * Initial HTTP Chunk Installer patch support.

* Fixed issue with pak files being kept around from File|Package during a Play on Device launch. This would cause strange behavior during Play on Device as it would prefer the older pak data over the new cooked data.

* Fixed JunkManifest processing to allow for backslashes on Mac and Linux

* Fixed multiple redundant loads of target platform DLLs

* Fixed rare issue where async discovered devices (PS4, XBoxOne) might fail to detect.

* Minor fix for tooltip position being offset by one pixel on non-Windows platforms.

* Selecting Windows XP as a minimum OS version now has an effect during that instance of the editor

* The Virtual Joystick no longer takes takes keyboard focus. This prevents the problem of it sealing focus from the game viewport and resetting the touch state of fingers that have been pressed outside of the joystick.

#### Android

* Added application display name (app_name) setting for Android to Project Settings

* Added detection for Adreno 2xx GPUs and PowerVR 540 to default Android profile selector

* Added r.MobileReduceLoadedMips for platforms (like Android) without texture streaming. The parameter is the number of miplevels not to skip loading to lower memory usage at runtime based on device detection.

* Added support for ASTC texture format on Android ES 2

* Allow adding additional tags to AndroidManifest.xml `<manifest>`, `<application>`, and `<activity>` nodes

* Allow better control of AndroidManifest.xml generation

	* Extra Activity Settings are also read from [project]/Build/Android/ManifestActivityAdditions.txt
	* Extra Application Settings are also read from [project]/Build/Android/ManifestApplicationAdditions.txt
	* Extra Requirements are also read from [project]/Build/Android/ManifestRequirementsAdditions.txt and are not restricted to only permissions
	* Entire Requirements section may be overridden by contents of [project]/Build/Android/ManifestRequirementsOverride.txt (be sure to include `<uses-sdk android:minSdkVersion="9"/>` and `<uses-feature android:glEsVersion="0x00020000" android:required="true"/>` as these are also replaced!)

* Allow package and project name to be different and converts dashes to underscores if necessary to generate a valid package name

* Changed the ES31 w/ Android Extension Pack support from a separate TargetPlatform to being a project setting that can work with any texture format target. It is now driven by the build flag that was compiling in support for ES31 - if that is checked, it will also compile the AEP shaders as well as ES2 shaders.

* Iterative deploy is now supported for Android. Now only changed content will be pushed to the device on launch and reinstalling the APK is skipped if there are no changes.

* Normal maps now behave the same way as most other platforms, increasing the quality and minimizing artifacts by only using two components from the texture and deriving the third component in the shader.

* Added support for Android menu and volume keys 

* Added another variant of ProGuard keep explicitly for MediaPlayer14 class

* Added GooglePlay login timeout and pass on onActiveResult to GPG by delegate

* Added workarounds for Adreno 2xx GPU using checks for maximum varying vectors allowed

* Allow access to local files in Android ExternalFilesDir (available in GExternalFilePath)

* Allow rendering thread on Tegra devices with ES 3.x support

* Application lifetime event callbacks now guaranteed to occur on the game thread

* Cache Android window size only if valid (greater than 8x8)

* Call adb in AndroidPlatform automation script directly instead of using cmd.exe or sh to fix issues with Run returning empty output from these commands

* Changed settings to fix problems swinging through platforms on the Galaxy S4 Mini_4591 for Swing Ninja.

* Changed Slate to use FText (ICU) to determine whitespace and corrected some international character not being rendered with the TextBlock in UMG

* Changed to point sampling during tonemapping of mobile HDR mosaic pass to correct precision issues

* Check for Android .so instead of .apk to determine if UE4 project for target configuration was built for earlier failure detection

* Cleaned up Android install batch file generated during packaging

* Cleaned up Android shader overrides and no longer cache failed shader compiles so overrides tests are valid

* Conditionally adding the IAP billing permission to the android manifest, based on configuration to use IAP.

* Corrected binary release Android libraries (only strip debug symbols from .a files)

* Corrected issue with placement of #extension directive in shaders

* Detect GL_OES_standard_derivatives extension for ES2 and work around missing dFdx, dFdy, fwidth functions by patching shader for Android

* Disabled setting thread affinity mask on Android due to issues with thread assignment to slow cores on big.LITTLE ARM processors

* Disabled the viewport frame sync on Android to prevent issues with tile based GPU rendering

* Files in .pak files outside of an OBB without a manifest entry now return a valid timestamp

* Fix for possible crash using force feedback with some versions of Android

* Fix for to ProGuard settings for MessageBox class

* Fixed 3D UMG widgets on Android rendering upside down

* Fixed android deployment crash in FindNamedNetDriver

* Fixed conversion of shaders to #version 300 es when they have blank lines or extra EOL whitespace

* Fixed crash on opening console on Android due to JNI call variant issue

* Fixed issue with java template path on OSX (only use forward slashes)

* Fixed movie playback having garbage displayed before the movie starts.

* Fixed normalmaps for ASTC textures in Android OpenGL ES 2.

* Fixed potential threading crashes when calling Java from C++

* Fixed some Android project to not be grayed out when the Android support files haven't been created yet (since they weren't related)

* Fixed some depreciated calls

* Fixed typos in reverseLandscape and sensorLandscape orientations in generated AndroidManifest.xml

* Fixes for Android media player

* Fixes to Android window resolution caching (handles native window handle changes properly)

* GetTimeStamp and SetTimeStamp check the proper AssetPath for local files

* Logs are properly flushed on crash

* Improved adb device parsing to accept either tab or space separators

* Fixed issue with PX_COMPILE_TIME_ASSERT reintroduced with PhysX 3.3.3 update

* Properly deal with detecting ARMv8a and adding default fallback to ARMv7a for unknown cases

* Protection added against in-app purchase disabled to onActivityResult

#### iOS

* Added Delta-copy install location as a configurable property in the IOS project settings.

* First pass of turn-based matches have been implemented for iOS. This feature is still experimental and will be more fully supported in the next release.

* Integrate pull-request #651 to add input plugin support for iOS.

* Launch options are now stored on the App Delegate for use later during game initialization.

* Lifetime events are now properly called on the game thread so users can utilize any module code without causing a crash.

* Upgraded the IOS Facebook SDK version to 4.01

* Added messages to the output log when launch on fails due to an instruments error.

* Fixed a crash during start up on iOS with a debug executable.

* Fixed a crash in iPhonePackager when copying mobile provisions to the provision directory and the destination file was read-only.

* Fixed a crash related to pinging iOS devices over the network on Mac.

* Fixed a project settings typo: "OSVersion" is now "OS Version"

* Fixed a remote compile failure when the remote server name is overridden by an empty name.

* Fixed an issue with deployment to some iOS devices where the connection could be lost during the deployment of files.

* Fixed crash when utilizing the deployment server on windows to deploy files to an iOS device.

* Fixed deprecation warnings when compiling UE4 for iOS 7 and iOS 8. This now allows users to specify a minimum iOS version and the engine will be properly built to match that version when uploading to the App Store.

* Fixed iAd display when starting up without WiFi and then enabling WiFi at some point during the game session.

* Fiching to a black screen when the Mobile Content Scale factor is something other than 1, 1.5, or 2.

* Fixed issue with iPhonePackager not being able to detect devices in standalone mode after an update to iTunes.

* Fixed the executable name being mismatched with the plist when the project name has an underscore in it. Previously, the plist key would have removed the underscore and the IPA would be invalid. Now, the underscore is kept in both places.

* Mac/Build.sh can now take "iphoneos" or "IOS" on the commandline to compile the engine (so users and Xcode can both use it)

* Properly prefer iTunes 12 Mobile Device dll over the iTunes 11 dll. This fixed some crashes related to picking the wrong version of the dll when both are present.

#### Linux

* Available GPU memory size (when an appropriate extension is provided by the driver) will now be used for better control over texture streaming.

* Code projects can be created on Linux without requiring any IDE to be present.

* Compiler errors will be output in gcc-like format when compiling on Linux for better integration with platform tools; MSVC format is retained for cross-compilation.

* Double clicking the titlebar will now minimize/maximize windows.

* Linux audio system now supports multiple OpenAL devices and contexts.

* LinuxNativeDialogs will attempt to detect the desktop environment (using $XDG_CURRENT_DESKTOP) and use the appropriate widget toolkit (GTK or Qt) for file open/save/etc.

* LND (dialogs for file open/save/etc) are now supplied in prebuilt form that should work with Ubuntu 14.04 and up; no need to build third party libs locally anymore (on those OSes).

* Makefile generator will now generate targets for projects outside of the engine directory.

* Minor: a lot of performance warnings issued by NVidia drivers have been fixed.

* Minor: Steam shared objects are now being loaded dynamically.

* Minor: switched to global symbol resolution (RTLD_GLOBAL) when loading shared objects (watch out for possible symbol collisions).

* SDL2 has been updated from icculus (Ryan Gordon) branch; most of the changes needed for UE4 have been taken upstream.

* SpeedTree is now usable on Linux.

* Standalone programs and tools (e.g. UnrealFrontend) will now use OpenGL 2.1 (instead of 3.2), which is more widely supported.

* UBT will now generate KDevelop project directly; some manual setup is still needed for includes and defines.

* V-HACD (convex decomposition library) has been enabled for Linux.

* You can now drag-n-drop assets and text from other programs to the Unreal Editor.

* Background shader compiling will now use less CPU resources.

* Fixed "launch on" not working in the Linux editor.

* Fixed "weird" file names when packaging the project into a directory that contains a space.

* Fixed crash in Linux file system layer when Windows-style paths (e.g. embedded in assets) were attempted to be loaded on Linux.

* Fixed crash in the case-insensitive file mapper when trying to load an empty filename.

* Fixed crash in UnrealFrontend when adding more than on Linux device with the same IP.

* Fixed dragging objects in the viewport.

* Fixed file open/save dialogs ignoring all wildcards except the first.

* Fixed focus not being properly transferred after destruction of a popup window.

* Fixed game window being always resizeable (it will not be now by default).

* Fixed inability to import starter content if the project (or the engine) was located outside of user home directory.

* Fixed inability to set/get environment variables using platform abstraction layer.

* Fixed input events from gamepads/controllers being ignored on Linux.

* Fixed Linux windows not having layout borders.

* Fixed MessageBox not displaying long strings properly.

* Fixed notification windows obscuring dialogs and still stealing focus sometimes.

* Fixed packaging under Linux failing because mono apparently can confuse UAT commandline switches with its own.

* Fixed red-blue swap when displaying a splash screen.

* Fixed regression in 4.7 when standalone game would default to a desktop-sized window no matter the settings.

* Fixed reporting the machine id (relies on systemd's /etc/machine-id, will not work on OSes without it) for analytics.

* Fixed tab dragging.

* Fixed text rendering problems in standalone programs due to font atlas textures being updated without a valid GL context set.

* Fixed UAT placing log files in ~/Library (it will now use ~/Documents/Unreal Engine)

* Fixed UBT disabling certain compiler optimizations for Development and higher builds when debug info was enabled.

* LinuxNativeDialogs (LND) has been moved to a different location; you may need to delete stale libLND*.so files in your Engine/Binaries/Linux.

* Minor performance optimizations in the UI (the editor and tools should now be less "chatty" when communicating with X server).

* Minor: inability to resolve the hostname when choosing an IP to bind to will result in binding to INADDR_ANY (0.0.0.0)

* Minor: more robust setup of binary dependencies in github builds.

* Numerous fixes for focus issues in Linux windowing layer.

* Source control integration (git, svn, p4) in the editor has been enabled for Linux.

* The editor and other tools will now track changes in Content directory (inotify-based "directory watcher" has been fixed and re-enabled).

* Unreal Engine (and the sample projects) can be compiled with clang 3.6.0 on Linux.

* -Wreorder warnings will no longer cause the build to fail (these warnings aren't suppressed, just exempted from -Werror).

#### Mac

* Added compatibility with Mono 3.12

* Added 'DisableMacDrawEvents' as a command-line option to disable OpenGL event markers on OS X as they can crash Apple's OpenGL Profiler.

* Added Mac TADP installer to Engine/Extras/Android

* Added support for OpenEXR

* Added support for using CEF framework in packaged games

* Bundled Mono for Mac updated to 3.10

* Changed Mac windows to use CoreAnimation-layered views

* Enabled MacServer cooking/packaging in UFE

* Enabled TexturePlatformAndroid module on Mac and added Mac version of QualcommTextureConverer lib

* Exit the editor running a cook on the fly server when user closes the log window

* Fixed GPU profiling on Mac OS X and enabled it by default for non-shipping builds.

* This allows 'stat unit' and 'profile gpu' to display GPU time in addition to CPU time for rendering.

* The Mac implementation has a performance impact so is disabled when not required or when the 'DisableMacGPUTimestamp' command-line option is supplied.

* Implemented support for OpenGL's separate shader objects to reduce in-game hitching.

* Enabled by default on Mac OS X where the GL_ARB_separate_shader_objects extension is always present.

* Separate shader objects can be toggled on/off using the 'OpenGL.UseSeparateShaderObjects' console variable.

* Implemented VoiceModule for Mac using CoreAudio.

* Fixed the sample rate conversion path for CoreAudio input.

* New debug symbol handling for OS X to allow creation of dSYM bundles & symbol stripping of executables.

* On OS X .dSYMs are emitted as flat files by enabling the UBT build configuration option 'bGeneratedSYMFile' as on iOS.

* Added an initial platform-agnostic API for querying debug symbol info, including a generic database format that can be queried on otherwise incompatible platforms.

* Added DSymExporter which will export Apple debug symbol data from Mach-O binaries, including the payload within a .dSYM bundle, to the generic format.

* Added a new support program UnrealAtoS which can be used to resolve debug symbols using the new generic debug symbol format or CoreSymbolication.

* Removed the direct dependency on the CoreSymbolication private framework, this is loaded dynamically in the UnrealAtoS program but not the game or editor where it isn't required.

* Initial SymbolDebugger & MinidumpDiagnostics support on OS X.

* Prevent OS X from putting UE4 apps that don't use UI (for example the editor running a commandlet) into App Nap mode.

* Regular windows no longer use floating window level, which means that some windows (like details panel, if removed from the main window) will no longer display always on top of their parent window

* Seeking added for mac and ios media player

* Switched from the HACD to vHACD library for convex mesh decomposition on Mac OS X, using OpenCL where possible.

* Use PLCrashReporter revision #5ae3b0a to capture crash reports on OS X rather than using our own signal handlers at is more extensive & robust.

* Disabled automatic copying of crash report to clipboard from within the crashed application to avoid hanging the application so that it cannot be removed from the Dock.

* Fixed various symbolisation bugs so that PLCrashReporter crash reports symbolise correctly for display in CrashReportClient.

* Minidumps are now stored in PLCrashReporter's binary format.

* XBoxOne and more varieties of XBox360-style controllers now supported on Mac builds.

* Added ASTC encoder for Mac to UE4 Binary

* Added handling of window reordering on Mac when the editor is in the background

* Change the way CoreAnimation and OpenGL interact to avoid problems that result in visible corruption on OS X.

* Make the CoreAnimation layer share the viewport's context by ensuring that access to the context is restricted to one thread at a time using the NSOpenGLContext lock/unlock operations, this ensures that only one thread can have this context current & be calling OpenGL using it at any given time.

* Use an intermediate render buffer to transfer the back-buffer data from the UE4 render thread to the CoreAnimation thread to avoid trying to read from an incomplete viewport back-buffer.

* When resizing an OS X OpenGL context clear the new back-buffer resource to black & only blit the viewport back-buffer to the window when its contents can be guaranteed to be valid, otherwise clear to black.

* Only try and read from render buffers that have actually been rendered too.

* Make sure to flush the CoreAnimation layer's OpenGL context, otherwise OpenGL won't ever be told to flip the front & back buffers.

* Changed the way of handling dylibs in Mac bundle subfolders to work around the Mavericks dlopen() bug

* Collect the correct values for maximum available physical memory & currently used virtual memory on OS X.

* Correctly convert usage of SV_Position to gl_FragCoord in hlslcc so that our shaders render correctly in OpenGL.

* Disable OS X's sudden termination feature as that can cause data corruption if the user tries to reboot/shutdown their Mac without exiting UE4 cleanly as it prevents completion of outstanding operations.

* Also make sure that we correctly reset the game-thread ID on shutdown otherwise C++ destructors that rely on being destroyed on the game thread may assert or crash.

* Disabled output from pushd and popd tools called from FixDylibDependencies script

* Fix a use-after-free bug in the Slate font-cache on OS X that could crash or cause memory corruption.

* Fix the Mac cursor not warping to the correct position when exiting high-precision mouse mode.

* Fix transition in/out of fullscreen mode on OS X sometimes causing faulty mouse coordinates to be reported

* Fixed a crash on expanding folders in native save/open dialogs on Mavericks

* Fixed a problem with jerky movement when dragging autosized windows

* Fixed a problem with missing audio in some packaged games

* Fixed a problem with tabs not rendering when moving after returning to editor

* Fixed cooking of Mac shaders on Windows

* Fixed mouse dragging in the editor viewport on a secondary monitor that's not verically aligned to the primary one

* Fixed slow texture compression times on OS X by rebuilding the OS X nvTextureTools libraries.

* Fixed the problem in Mac editor with toolbar icons highlighting while dragging a window.

* Fixed the random crashes in Mac editor caused by improper use of window shared pointer on multiple threads

* Fixed the rendering of spline-deformed geometry on Macs with Intel GPUs.

* Fixed updating of Mac menu bar when a new tab is added

* Impose consistent Slate<->Cocoa coordinate conversions so that we don't accidently use the wrong coordinate space, which fixes the Editor's drop down menus when moving windows across displays.

* Improve GPU vendor ID resolution on OS X to avoid a stop crash on startup on some new Macs.

* Made tooltips and context menus visible on Mac when the app is in the background

* Make the Intel HD 3000 report itself as OpenGL ES2 on OS X so that it uses the simpler forward renderer.

* Fixed the sample rate conversion path for CoreAudio in VoiceModuleMac.

* Moved UE4EditorServices.app service installing code to run after it is built.

* On losing & gaining application focus on OS X validate that the window numbers we are storing actually correspond to valid NSWindows, otherwise subsequent use of the window number might crash inside AppKit.

* On OS X use the green window titlebar button as maximise/restore rather than toggle fullscreen so that it behaves consistently in the Editor & doesn't confuse Slate.

* Only register the CoreAudio Radio component once on OS X, we can reuse the registration if we need to access it again.

* Reset the OpenGL unpack alignment after using Apple's Client Storage extension to resolve a crash caused by using incorrect values in subsequent operations.

* Reworked Mac OS X high-precision mouse handling so that we better emulate Windows behaviour.

* To reduce apparent lag mouse event coalescing is disabled by default when in high-precision mouse mode, this can be controlled with the console variable r.Mac.HighPrecisionDisablesMouseCoalescing.

* Additionally the off-by-default console variable r.Mac.HighPrecisionDisablesMouseAcceleration can be used to disable OS X's mouse acceleration curve in high precision mode.

* Scale all resolutions in ?FMacOpenGL::PlatformGetAvailableResolutions by the current primary screen's backing scale factor to prevent reporting resolutions to Slate that are larger than the enclosing window.

* Simplified the calculation of window size & location on Mac, excluding the system titlebar if there is one, to ensure the window returns to the correct position on leaving fullscreen mode.

* Solved a problem with mouse clicks ignoring editor windows while a system modal window is displayed.

* Steam lib is now included in packaged games that use it

* Use 'which mono' to discover local Mono installations on Mac OS X rather than assuming a fixed path.

#### Playstation 4

* Debug builds now link in the debug versions of Gnm and Gnmx.

* Loose stencil clears now use a Gfx Shader instead of a Compute shader for improved GPU performance and reduced stalls. Stencil controls are also cached to avoid context rolls.

* Added initial support for official Morpheus SDK 2.0.

* Added PS4 Platform Editor Module for editing PS4 settings

* Moved PS4 packaging settings to the Editor instead of using PackagingDataPS4.txt

* Added ability to build an ISO image when packaging

* Added runtime detection of system software version and application SDK version mismatch

* Added support for Matching2 search attributes on PS4.

* Added support for SDK 2.5.

* Added support for Unreal Media Framework on PS4. File format limited by Sony's video decoder. Currently only .mp4 and AAC audio supported. See Sony video player docs for more info.

* Added support for virtual keyboard on PS4.

* Enabled IME Keyboard support for PS4. Keyboard can now be used on Test kits and in Shipping builds.

* ExcludeRect is now taken into account when clearing a render target to avoid redudant clears - saves approx 0.5ms of GPU

* Fully hoisted the entire LCUE code into the engine. Projects can now modify LCUE defines and constants easily.

* Improved device discovery and monitoring using the PS4DevKitTool

* Increased the maximum possible shader resources (textures and samplers) in a single shader to 32.

* Member initialization order errors are now a warning rather than error

* Morpheus .ini settings are now standard Project Settings in the editor under Edit->Project Settings->Plugins->Morpheus.

* PS4 debug visualizers for Visual Studio are now automatically installed when running GenerateProjectFiles.bat

* PS4 now submits commands to the GPU periodically over the frame, rather than once at the end of a frame. Added console variable r.PS4ContinuousSubmits to toggle the behavior.

* PS4 support detection is now only reliant on SDK detection. Artists with no source code will now properly see PS4 as a target in the Editor.

* Shipping packages are now only built for submission when "For Distribution" is enabled in the editor in Project Settings | Project | Packaging

* The source hash is now used when generating the shader sdb file name to avoid name collisions

* Added a compute shader to properly update all sizes of volume textures.

* Added support for the new Morpheus HMD Server. Morpheus PC preview now works again.

* Fixed a bug causing the Render thread to be locked to a single CPU core. This fixes a number of potential stalls when garbage collecting.

* Fixed a bug in texture streaming budget accounting. Texture pool size is properly counted now.

* Fixed a bug where directory creation would not properly create the entire directory chain. This would cause cookonthefly to load old data in some cases.

* Fixed a crash in Morpheus ApplyDistortion.

* Fixed a parallel rendering crash in render target management.

* Fixed a potential crash when rendering with Morpheus.

* Fixed a startup crash when using 3d audio.

* Fixed an artifact where the edges of objects would be black the first time the camera pans across them.

* Fixed automatically disconnecting a devkit when shutting down the editor or UFE.

* Fixed 'black dot' artifacting from new Burley diffuse model on PS4.

* Fixed 'black plane' / clipping artifacts in Morpheus rendering.

* Fixed bug where certain volume texture formats would not update properly.

* Fixed Canvas rendering on Morpheus. Console and debug text should now converge properly.

* Fixed CMASK and HTILE to work with full parallel rendering on PS4.

* Fixed crash in PS4DevKitUtil when there is no default device

* Fixed errors caused by .pak files under /saved directory.

* Fixed flickering graphical corruption from bad uniform buffers on PS4.

* Fixed flickering on PS4 from incorrect vertex buffers on occlusion queries.

* Fixed initial heap size printout on PS4 to print in megabytes correctly.

* Fixed Morpheus distortion rendering occasionally having incorrect blending state.

* Fixed Morpheus distortion shader to only run a single time.

* Fixed Morpheus tearing artifact under vysnc.

* Fixed NULL keyboard characters being sent that was causing problems with the debug console history and autocomplete

* Fixed number of instances for draw calls which bypass the LCUE to always be 1

* Fixed potential crashes from memory overwrite in PS4 OnlineId resolution.

* Fixed potential crashes related to unnecessary calls to submitdone.

* Fixed PS4 builds crashing on testkits.

* Fixed reflection captures potentially running out of memory.

* Fixed screen offset alignment causing Gnm debug assertion

* Fixed srgb textures being too dark after being updated

* Fixed the touchpad reporting incorrect OnTouchMoved events when the number of touches changes on DualShock4s.

* Fixed Windualshock module errors when users only have SDK 2.0

* Fixed wrong shader type being used when clearing multiple slices

* Fully enabled Morpheus project settings in editor.

* Optimized path normalization code for PS4 file system. Autocomplete list for the console now populates faster, non-packaged loading times reduced slightly.

* Optimized PS4 to only set stream sources when necessary.

* PS4 no longer defaults to FXAA in the engine level PS4Engine.ini

* Removed clamp of viewport to render target as some shared code relies on this not happening (fixes issues with scene captures)

* Shadow Quality console variable is now defaulted correctly.

#### Xbox One

* Added catching of unhandled exceptions on Xbox One.

    * Added minidump support that will be invoked by default on unhandled exceptions.

    * Added translation for symbols to the stack produced on unhandled exceptions.

    * Added flushing of log files for unhandled exceptions.

* Added compiling of shaders to GPU bytecode, with no intermediate format stored, to save memory and slightly improve shader loading speed.

* Added ICU libraries and support for Xbox One.

* Added just in time generation of package and deployment resources based on project settings.

    * Removed the need to manually merge engine and project AppxManifest templates.

    * Added common packaging and deployment settings under the Xbox One Platform Settings in the Editor.

    * Changed the package name and application name/entrypoint to be named based on the Product Id and Project Name from the project settings. This removed the need for projects created for Xbox One to avoid spaces and symbols in their uproject file names.

* Added localization support for text resources in packaging and deployment.

    * Added generation of localized string resources such as display name and description fields.

    * Added support for localized image resources such as logos and splash screens.

* Added support for packaging and deploying to multiple cultures on Xbox One.

* Added support for titles to reclaim the 4.5% Kinect GPU allocation when Kinect is not in use.

* Added support for using directly generated AUMIDs to launch projects on Xbox One. Removed the reliance on project file or folder name to launch Xbox One projects.

* Changed the memory bus priority to favor the GPU, to improve the performance of GPU bound projects.

* Changed Xbox One XDK detection to use the _XDK_EDITION number rather than _XDK_VER, as it is a more human readable YYMMQQ format.

* Enabled CPU core thread affinity system.

* Added better core mapping to improve performance.

* Enabled multi-threaded garbage collection on Xbox One.

* Enabled the use of the 7th CPU core by default.

    * Adjusted XboxOneMisc::NumberOfCores() to return the correct number of cores, taking this change into account.

* Optimized 3D texture clearing for translucent lighting.

* Optimized occlusion query system to issue queries in batches.

* Optimized to the constant ring buffer by using 4MB pages.

* Reduced duplication of generated files in Xbox One packaging, which also improved packaging performance.

* The Xbox Live online subsystem's leaderboard interface is now able to read leaderboard rankings.

* Note that to write scores to an Xbox Live leaderboard with the online subsystem, you currently have to use the Events interface.

* Updated the default XDK to the April 2015 version.

* Fixed a crash that could occur when suspending or resuming a title.

* Fixed a memory leak in the Render Hardware Interface (RHI).

* Fixed a parsing issue that could cause crashes when building the XboxOnePDBFileUtil with certain Visual Studio setups.

* Fixed a texture popping issue that occurred when streaming out mip levels of textures that are still in use by the GPU.

* Fixed an issue that could cause the XboxOnePackageNameUtil to produce errors when the working directory was not set as expected.

* Fixed an issue that could cause Xbox One development kits to display corrupted aliases in tools.

* Fixed flickering and a crash in the occlusion query system.

* Fixed memory accounting in texture streaming pool. This problem caused titles to be unable to stream textures after a long time.

* Fixed memory corruption that could occur on shutdown of the Xbox One target platform module.

* Removed a hardcoded limit on the number of pages for the constant ring buffer. This fixes a crash in large games.

* Removed an unnecessary and slow memory barrier function.

#### VR

* GearVR performance settings can now be set in Engine.ini. Under [GearVR.Settings] values can be set for CpuLevel and GpuLevel. Defaults are 2,2. See the Oculus Mobile SDK documentation for valid values.

* GearVR projects can lock framerate to 30 by editing the engine config.ini:

    * [GearVR.Settings]

    * MinimumVsyncs=2

* GearVR projects no longer require code builds in order to package for GearVR. Selecting the 'package for GearVR' automatically enables the plugin at runtime. All that is needed to make GearVR builds is to set the Minimum SDK to 19, Package for GearVR, and placing osig files in the Engine\Build\Android\Java\assets directory.

* The Leap Motion plugin is now usable from content-only projects.

* Updated the Oculus mobile SDK to 0.5 for GearVR.

* Calling the 'OVRGLOBALMENU' exec command on GearVR will now correctly bring up the global menu.

* Fixed running start for SteamVR.

#### HTML5

* Experimental: Allow HTML5 games to download maps on the fly. For smaller startup packages and time to boot [ Can be enabled from Project Settings -> HTML5 ]

* Experimental: Alternate HTML5 game template with more accurate progress bars and better styling. [ Can be enabled from Project Settings -> HTML5 ]

* Experimental: HTML5 platform Multiplayer support using websockets. [ see Readme.md file in the same directory on howto enable]

* HTML5 defaults to use Pak files when packaging. Pak files are compressed for HTML5.

* HTML5 devices and browsers can be added and removed from in the Editor UI.

* The default web server port for launching HTML5 from within the editor is now configurable.

* Assert in HTML5 now display the location in the code that caused the assert.

* HTML5 SDK settings are now configurable for within the Editor.

* Browser Fullscreen transition fixes.

* Better control over hide pointer when mouse lock is requested

* Fix crash when accessing saved game in local storage.

* Fix custom fonts not showing up properly on HTML5.

* Fix for HTML5 failing to give useful error messages before JS is completely parsed

* Fix for incorrect character input for HTML5 UMG widgets and incorrect keyboard mappings in HTML5.

* fix lightmap's B/R channels swapped for HTML5

* minify development builds and generate a symbols files for both development and shipping builds. readable callstacks are now generated for shipping builds.

* Mutilpe fixes for HTML5's implementation of HttpModules.

#### Windows

* 32-bit and 64-bit Windows are now both fully supported as target platforms in the binary release (Win32 support was previously limited to shipping configurations, and Win64 support was previously limited to development configurations)

* Updated win32 packaging to fix an issue with Windows XP binaries not being found when selected as the target operating system.

* Disabled Windows XP for Rocket builds. We dont provide generated source or binarys for WinXP as part of the binary release.

* Fixed an issue where CrashReporter was wrongly added as a dependency, when packaging windows XP.

* Fixed packaging crash when some icons were missing.

* Fixed Windows XP compile errors when using VS2013 compiler.

* Integrated fix for portmidi crash on Windows 8.1

### Rendering

* Added ability to have some object (landscape or FarShadow marked objects) casing shadows in extra shadow cascades

* Added decals to shader complexity view mode (for GPU profiling)

* Added 'grass.densityScale' console variable to adjust grass density at runtime.

* Added occlusion queries on subtrees for hierarchical instanced static meshes

* Added Parallel for to allow simple parallel processing with ease

* Added r.Bloom.Cross console variable to shape the bloom look (experimental), see help.

* Added r.DiffuseColor.Min and r.DiffuseColor.Max for tweak experiments, will be changed to r.BaseColor.* and r.Metallic.*.

* Added r.DumpShaderDebugShortNames to workaround paths too long when dumping shader debug info

* Added runtime iOS rotation support

* Selecting both portrait and landscape orientations within your iOS project settings page will enable dynamic switching as the device is rotated.

* Added support for DistanceFieldReplacementMesh under BuildSettings

* Added value display under center pixel to VisualizeHDR (useful for bloom/HDR tweak)

* Additional options for formatting textures in the editor

    * Textures can be automatically padded out to a power-of-2 or square power-of-2 size

    * Textures can have a solid colored background color removed in order to create a masked alpha channel (e.g., a cyan or magenta background can be chroma-keyed out in a sprite sheet)

		![image alt text](image_54.png)

* Disabled HZB by default as it tends be slower than occlusion queries in many scenes

* Disabled the editor gizmo when rendering high res screenshots

* Distance field AO and Ray traced shadows supported on PS4

* Added r.AOHistoryDistanceThreshold with default to 20, can be tweaked to avoid ghosting behind characters while not causing too much flickering

* Enabled support for android devices that report less than 16 vertex attributes.

* Experimental support for Mobile Preview for Feature Level ES3.1/Metal

* Exposed gusting parameters for SpeedTree wind.

* Exposed SetForcedLodModel on static mesh blueprint nodes (StaticMesh->Rendering->LOD property)

* GPU Profiler: Display a warning if GPU profile is captured with v-sync enabled.

* High quality bloom in epic scalability setting.

* Implemented GPU profiler interface for PS4

* Now we get proper formatting and other gpu profiler functionality that already works for other RHI's (r.profilegpu.root)

* Improved Editor startup time by reducing string comparison parsing shaders

* Improved tessellation performance. Raised max tessellation factor to 15.

* Integrated functionality from Github that allows you to render tiles with a material rather than a texture.

* MaterialFunction Virtual coordinates for a raytraced plane, in world units

* Materials can opt-out of outputting to the velocity G-buffer when running with accurate velocities.

* Metallic channel is now supported for non lit materials e.g. SubsurfaceProfile

* MinLOD setting for static mesh assets and an override on components

* Moved Roughness in GBuffer to a better spot for better performance.

* Optimized Skeletal mesh update on CPU

* Reduced number of uniforms uploaded for mobile OpenGL when using skeletal meshes

* Removed DYMANIC_CAST_XXX_RESOURCE macros

* Removed RHI resource macros for greater clarity

* Removed several ifdefs related to parallel rendering making it available for DX12 and any PC RHI

* SetRenderTarget now requires you to specify what DepthAndStencil access you want

* SpeedTree importer improvements

    * two sided lighting fix included even when there is no normal map

    * added lod option for painted foliage

    * reimport maintains changed materials (as long as the material setup hasn't changed drastically)

    * reimport touches textures to make sure they reimport, too

    * (Related to "MS_VertexAnimationTools_MorphTargets") Changed the way that the transform takes from local to world takes place in the shader so that it may work with mesh particles. (Local>World in the vertex shader then world to tangent in the pixel shader.)

* Add a new argument to instanced static mesh UpdateTransform method to prevent a render thread update

* Added missing console commands and exec commands to 'help' command

* Added workaround for shader compiler failure on some androids using SGX540 gpus

* Allow BC6H and BC7 texture formats if and only if D3D11 SM5 is the only target.

* Allow Ctrl+B and Ctrl+E to find/edit the associated decal material for decal actors

* 'Build lighting only' triggers a BSP build first, fixes crash in RenderTestMap where Lightmass got sent a request for a 0 size mapping due to out of date BSP

* Cleaned up editor grid rendering when using mobile preview rendering.

* Disabled editor only features in shaders for consoles. Small improvement in shader performance.

* Fixed a bogus bounds for instanced static mesh components with no instances

* Fixed a bug which could cause corrupt UVs when importing skeletal meshes.

* Fixed a material leak in stereo rendering.

* Fixed a memory overwrite issue in OpenGL causing random crashes.

* Fixed a number of shadow map rendering bugs with the forward renderer (mobile) that can occur when large shadow maps are in use.

* Added small optimization to avoid computation of shadow maps that will not be used.

* Fixed an occasional large stall when using rendering using an RHI thread on consoles

* Fixed an initialization issue in one of the FCanvasTile item constructors

* Fixed an issue when using skeletal meshes with 75 bones or more on Metal

* Fixed BMP screenshots outputting in unsupported format

* Fixed bug in which shader sampler parameters could be discarded in with simple shaders. Affected ES2 shaders only.

* Fixed crash caused by static mesh registration with no render data

* Fixed crash in auto lightmap UVs

* Fixed crashes when instanced static meshes attempted to use a lightmap or shadow map that was too large. Lightmap size for instanced static meshes is automatically reduced to fit.

* Fixed DBuffer decals in stereo rendering.

* Fixed Decal mask value exposed to the material

* Fixed DepthOfField material expression returning the right values again

* Fixed editing blueprint CDO of a hierarchical static mesh component never building the tree.

* Fixed energy conservation for 2 sided foliage

* Fixed experimental feature ForEachLight (Translucency per pixel lighting)

* Fixed first decal not being rendered

* Fixed HZB occlusion bug where large vertical meshes would be incorrectly culled.

* Fixed incorrect culling with orthographic cameras

* Fixed issue when using non-UTextures for MIC textures in blueprints

* Fixed Mobile renderer ignoring translucent material with depth test disabled

* Fixed motion blur issues with cloth

* Fixed pooled resources getting merged back into the main pool on the same frame they were released. This fixes some random rendering issues related to the DynamicMeshBuilder

* Fixed PostprocessMaterial StaticSwitch functionality while avoiding warning that appeared in some rare cases

* Fixed r.DumpingMovie console variable not triggering the code any more

* Fixed r.Shadow.MaxResolution not updating at runtime

* Fixed rare visual artifact with bloom

* Fixed rendering a few static mesh lists missing on the mobile renderer

* Fixed crash where adding a Scene Capture 2D to Render Target overrides the motion blur settings in level

* Fixed shader manager crashing on shutdown when bAllowAsynchronousShaderCompiling is false

* Fixed situation that could result in some editor icons being drawn at twice the size.

* Fixed some minor problems with AllowAsyncRenderThreadUpdates

* Fixed Speedtree shaders not getting correct wind velocity when outputting accurate velocities

* Fixed splitscreen post-effect bleeding issues on some platforms.

* Fixed SubsurfaceScatteringProfile quality issues, the recent full resolution mix caused discoloration.

* Fixed swizzled UV1 for displacement mapping

* Fixed temporal aa with off axis matrix projection matrices

* Fixed Text Render component not showing up in packaged builds.

* Fixed using the SubsurfaceProfile shader model with LPV.

* Fixed ViewProjectionMatrix not getting set for certain rendering paths causing issues with UMG rendering

* Improved screen shot performance.

* Materials are not longer available for editing when using property matrix to avoid a race condition.

* Reduced processing time when importing cubemaps bigger than 1024 width/height

* Removed r.GBuffer project setting

* Skylights only capture on being enabled if they have never captured before

* Added fast path for changing skylight color or intensity that doesn't recreate rendering state (full static draw list recreation)

* Sort AutoComplete entries for in game console like in editor

* Stationary lights with many unbuilt objects now fall back to CSM on a frame by frame basis

    * This fixes the bug where many unbuilt interactions during registration would get corrected by blueprint construction scripts but the stationary light would continue to think it was built

* UBillboardComponents now render bounds properly

* Worked around a shader bug that occurs on some mobile GPUs in which an incorrect normalize result can be produced by large view vectors.

### FX

* Added support for Ctrl+B and Ctrl+E shortcuts to find/edit the associated asset for selected Niagara actors

* First pass of function calls in Niagara.

* Particle Systems using the Bone Socket module now work correctly when spawned from an anim notify.

* Fixed a bug that could cause a crash in Cascade with specific curve setups.

* Fixed issue in Mesh Emitters when Initial Mesh Rotation would sometimes be applied twice.

* Fixed performance issue when multiple cascade tabs were open at once.

* Particle Systems spawned from Blueprints and directly in code via SpawnEmitterAtLocation now work correctly with collision.

### Lighting

* Added color temperature property for lights

* Added new unfinished/experimental translucency lighting mode: TLM_SurfacePerPixelLighting Higher quality than Surface but more expensive (loops through point lights with some basic culling, only inverse square, expensive, no shadow support yet) Requires 'r.ForwardLighting' to be 1

* Bloom will no longer lose quality at the epic setting.

* DFAO optimizations for PS4

    * Overall empty scene cost on PS4 3.77ms -> 2.83ms

* Distance Field AO history filtering improvements

    * Rejecting history based on world position differences, not camera Z. This fixes a lot of noise under camera movement.

    * The last texel of the history is never reused to avoid artifacts from bilinear filtering of a viewport in a larger render target

    * Fixed error in the reprojected depth from storing something else in the sign of the depth

    * There's now a 2d spatial filter of stable results applied to any pixels whose history was discarded (unstable)

* Enabling a skylight from a blueprint SetVisibility call will now cause it to capture and generate its processed texture

    * The scene tracks enabled skylights in a stack and the most recently enabled one wins

* Heightfield dynamic Global Illumination

    * Enable with 'r.DistanceFieldGI 1' on console, when landscape is present

    * A GBuffer atlas is created for Landscape from components that can affect indirect lighting based on the current view

    * Shadowing from a directional light is computed by reusing shadowmaps and ray tracing distance fields

    * Lighting is computed for the atlas using GBuffer properties

    * First bounce GI light transfer is computed for a receiver by iterating over all the nearby lit texels of the heightfield and treating them as Virtual Point Lights. Two gather regions are used, the larger one skips through the heightfield to achieve a larger bounce distance. Distance field AO is used to provide local shadowing.

    * Regions outside of the view don't have valid shadowing yet

* New cinematic shadowing controls - these are useful when setting up extra shadow casting spotlights while minimizing the shadowing cost

    * ?bCastShadowsFromCinematicObjectsOnly on the light

    * bCastCinematicShadow on components

    * These do not affect static shadowing or Ray Traced Distance Field shadows

* Ray traced distance field shadows can be done at full or half res with bilateral upsample. Half res has some unresolved flickering artifacts from TemporalAA.

    * Meshes whose distance fields are generated as two sided are expanded during ray traced shadow casting, helps trees match up with CSM much better

* Ray traced distance field shadows now implement the cascade fade

* Rendering light shape into reflection captures for static lights.

    * This allows higher quality specular for static lights, especially useful in high perf cases such as VR.

* RTDF shadows don't force backfaces to be shadowed, improves materials with subsurfaces scattering

    * Added a distance based ray start offset which reduces incorrect self shadowing artifacts

* Skylight MinOcclusion works on sky specular occlusion as well

* SubSurfaceScattering support for ray traced distance field shadows

* Surfel Global Illumination prototype with Distance Field shadowing

    * Disabled by default, need a movable skylight with r.DistanceFieldGI enabled at load time (ConsoleVariables.ini) as well as 'Generate Mesh Distance Fields' in the Renderer project settings

    * Surfels (oriented disks) are placed on mesh surfaces and capture diffuse color by evaluating the material with actual UVs and world position

    * Surfels are lit and shadowed by ray tracing through mesh distance fields (directional light only so far)

    * Irradiance cache records are lit with nearby Virtual Point Lights created from lit surfels. Only using camera based LOD of the surfel representation and object based surfel culling, no hierarchy yet.

    * Shadowing of the VPLs is provided by distance field cone tracing. A depth visibility function is constructed along each of the 9 cone trace directions, and used to shadow the incoming VPL lighting.

    * Component reregistration and transform updating causes surfels to be generated again which can be slow. In the future only the material needs to be re-evaluated.

    * SkyLight MaxOcclusionDistance increased to 10m, which is the minimum useful amount for GI

* Switched diffuse shading model from Lambert to energy conserving Burley.

* Async distance field builds are now forced to be complete before cooking distance field data - fixes distance field lighting missing in cooked builds

* Components with self-shadow only enabled are now correctly shadowed by the environment, and no longer incorrectly cast shadows on the environment in some cases

* Distance field scene updates are no longer tracked when the project setting r.GenerateMeshDistanceFields is disabled

* Fix for crash importing lighting with static meshes with LODs that have been vertex painted

* Fixed a situation in which level lighting could be lost after a rendering preview feature level switch had occurred.

* Fixed eye adaptation with VisualizeHDR enabled.

* Fixed IrrelevantLights getting cleared per-LOD when it is stored per component, caused lighting to not be fully built with static meshes with LODs that are fully shadowed from a stationary light

* Fixed Lightmass limitation on number of multiple CPU cores in-use that was bound by number of cores used by the starting agent.

* Fixed material AO for dynamic lighting path.

* Fixed primitives with bLightAsIfStatic enabled causing lighting to be unbuilt if they move into a light's influence radius that they weren't built against

* Fixed small objects not consistently affecting DFAO - noticeable in test maps

* Fixed some shadows disappearing with large terrain

### Materials

* Added a "mutli-lerp" function that blends up to 4 float 3 values.

* Added a high-level shader cache that can record the shaders & RHI states used by a project and reconstruct them during loading to reduce in-game hitching.

    * At present the shader cache is only available for OpenGL, but can be added to any RHI.

    * Shader caching can be toggled on or off by setting the console variable r.UseShaderCaching in the project/engine INI files.

    * The console variable r.UseShaderDrawLog toggles whether the cache also stores the used RHI states so that shaders may also be 'warmed' during load (toggled by r.UseShaderPredraw).

    * Shaders & states can be tagged by a 'streaming key' so that they are only reconstructed when the same key is active on subsequent runs to reduce overloading the RHI in streaming games.

* Added a new material function to compliment a maxscript that was added to store a second set of normals in a models vertex colors.

* Added a new material function to compliment a maxscript that was added to store a second set of normals in a models vertex colors.

* Added a script that's capable of animating static mesh morph targets via textures.

* Added a Transform to Clip Space material function.

* Pixel Depth Offset material input

    * Allows writing to the depth buffer per-pixel, making use of D3D11's conservative depth writes to maintain ZCull

    * This is useful for billboard LODs with distance field lighting, as the distance field representation of the mesh used for shadowing is still accurate but the billboard depths used for primary rays is not.

* Submitted a node with several outputs for screen and buffer resolution	.

* The flipbook material function now gives the user access to the mip settings.

* There is a new abstract MaterialExpressionCustomOutput material node that can be subclassed in a module. This can be used to generate custom functions based on the user's material that can be called from your pixel shader for a custom rendering pass or other effect. UMaterialExpressionLandscapeGrassOutput is an example of this.

* View.ViewToTranslatedWorld is now correct for shadow passes, allows billboards to face the light.

    * This affects ViewToWorld transforms in the material editor used for billboarding

* Fix a potential crash during garbage collection with material instances

* Fixed crash bug in Material Instance Editor caused by resetting the parent material.

* Fixed directional lights for translucent materials using TLM_SurfacePerPixelLighting

* Fixed performance issue in materials which caused all components to be re-registered frequently.

* Fixed shader complexity viewmode in certain earlyZpass modes

* Fixed situation in which ES2 material instances may incorrectly render metalic materials as non metalic.

* Fixed spot lights for translucent materials using TLM_SurfacePerPixelLighting

* Fixed Subsurface_Profile causing wrong colors when using extreme inputs values

* Fixed visual corruption or crash when rendering landscapes with more than one subsection and with tessellation applied.

* Fixed wrong behavior when using MaterialInstanceDynamic (MID) with SubsurfaceProfiles

* Made high quality world aligned normals the standard approach in the world aligned texture nodes and removed the old approach.

* The world aligned complex material function now uses the "Shared: Wrap" option for all of its texture samples.

* Unlit materials can now use the Normal input when also using refraction.

### Postprocessing

* Added another bloom stage (gaussian) for larger bloom

* Added Rec.709 output display device

* Use r.tonemapper709 to enable

* Improved large scale SSAO, changed algorithm to be more efficient

* New tile based motion blur with smooth gradients. WIP

* Enable using r.motionblurnew 1. Still WIP

* Changed chromatic aberation to be the correct direction and with wavelength based color separation amounts.

* Changed Screen Percentage post process setting to also work with scalability console variable

* Fixed an issue where changing any Atmospheric Fog Component properties under PrecomputeParams had no effect or caused rendering issues because the precomputed data was not being regenerated

* Fixed PostProcessMaterial SwitchParameter behavior

### Optimizations

* Added a new 'BestPlus' configuration for SpeedTree shaders. 'Best' is now faster.

* Added console variable r.OcclusionQueryLocation to optionally move Occlusion Query rendering before the basepass. This can reduce CPU stalls in some cases.

* Large improvement to high poly mesh importing speed.

* Remove LeafRipple from 'Best' SpeedTree configuration. Still available in 'BestPlus'

* Distance field data is no longer included in server cooked content.

* Fixed a performance regression in shadow rendering. Rendering with lots of shadow casters should be significantly faster on CPU. 4.7.4 also included this fix.

* HZB is no longer built if it will not be used.

* Removed ClearCoat material handling from shaders if there are no ClearCoat materials in the given view.

### UI

* Added a new ListItemAlignment option to the SListPanel that allows for STileView items to stretch horizontally instead of increasing the padding between the items.

* Added a notification to show when a player receives an invite outside of the friends panel. A bang on the friends dropdown icon now appears.

* Exposed an option to SlateApplication to close all existing windows.

* Switched SNewClassDialog to use colorized buttons to match the style of other creation buttons in the editor

* Added funcs to insert slots (and fetch the number of slots)

* Modifications to search box to improve customization

* Fix unnecessary garbage collection of Slate resources.

* Fixed a crash that could occur when destroying a widget

* Fixed an issue where the join confirmation button would disappear if a player received a notification from any other player.

* Fixed displaying of aspect ratios in Common Screen Resolution tooltips in Play settings

* Greatly improved performance of drawing wrapped text using the canvas.

### Slate

* Added constructor to FSlateTextureData that takes a pointer to texture data

* Added DemoMode visualization of slate mouse events - draw a fuchsia ring around event location.

* Added support for hint text on multi-line editable text

* Added the ability to double-click on the asset name in a SContentReference widget to open that asset

* Analog Cursor has been upgraded with some additional functionality and some bug fixes. 

* Implemented Page Up/Down support for multi-line editable text

* Improved the error handling message in FUICommandList::MapAction to include the name of the conflicted command

* Line filtering no longer relies on texture resource.

* Minor: Slate will do less work if the cursor is outside of Unreal Engine windows.

* TabManager : Hitting ESC will interrupt the current drag drop. NOTE: It will not restore the dragged widget to its original location.

* The IToolTip interface is now told when tooltips are closed so that it can lazily create and destroy the contents of a tooltip widget in custom implementations.

* Allow tabs to be entered into text edit boxes

* Changed SEditorViewport to bind the default IsVisible implemenetation if a subclass did not provide one

* Fix for Editor crashes when dragging a docked window

* Fixed a bug in navigation which would cause issues in particular multiple monitor layouts.

* Fixed a bug that would have the viewport report the incorrect size / positioning information if queried before any input was processed.

* Fixed a frame-latent resize issue in SMultiLineEditableText when the scale changes

* Fixed a potential crash in Slate tooltips.

* Fixed gamma correction not being accurate in Slate. We now use the same gamma correction scheme as the tone mapper which uses the more accurate srgb standard

* Fixed incorrect commit reason being broadcast when an editable text box was being cleared.

* Fixed issue where controller input would not be routed to the view port until after the user clicked. (in standalone)

* Fixed list views not being scrollable when they contained a single item that was larger than the available view area

* Fixed right-mouse-button scroll being double-applied in SScrollBox.

* Fixed SListView scrolling too far if you requested an item be scrolled into view before it had been ticked

* If you created a SListView and then immediately requested that it scroll item X into view, it would actually scroll item X+1 into view.

* This change will defer such a request until the next Tick, at which point the SListView will be capable of handling the scroll correctly.

* Fixed variable and function shadowing in SComboButton that broke opening the menu programmatically via SetIsOpen

* No longer ensuring that the widget path must be valid when showing a menu anchor. If no valid path is found, no popup occurs. Too often this state can occur when delaying with animations and delays.

* Slate : DragDetection now does more robust check and returns invalid path instead of operating on a truncated path.

* Tooltips will no longer "punch through" non-Unreal Engine windows.

* We no longer clear focus on child widgets of the game viewport when the window loses focus by default. This means controllers will still be able to interact with the game when you give focus to another app, like visual studio.

### Unreal Motion Graphics (UMG UI Editor)

*  Split-Screen UI with Unreal Motion Graphics

    * We now support for split-screen UIs in UMG.  Here is an example of a four-way split with a different menu for each player.

	![image alt text](image_55.png)

* You can add Widgets directly to a specific player's screen instead of the viewport directly. This will automatically position and size the UI for each player.  Player-specific screen UI will appear underneath anything that was added directly to the viewport.

	![image alt text](image_56.png)

* Add a blueprint event for when an animation starts in UMG and add new playback options for playing in reverse and for ping-pong playback where the animation plays once forward and then immediately plays once backwards.

* Canvas quality improvements when using a scaled font.

    * We now use bilinear sampling rather than point sampling.

* Add animation playback support to the widget editor.

* Add support for animating enumation properties in UMG animations. This enables animating things like visibility.

* Adding a new async node that can download images from the web. Jpeg/Png/Bmp are the only supported types for now. You can now download an image from the web and place it into a image widget or on a border...etc.

* Adding a way to make a custom user widget intractable for use with virtual cursors with a virtual IsInteractive function. Also adding a PauseAnimation function, which returns the current time of the animation to use when resuming it with Play later.

* Adding a way to set the brush on image and border.

* Adding handlers to the design surface for touch gestures so that it moves more like what's expected on Mac.

* Adding HasChild to all UMG Panel widgets

* Adding more + Zoom levels into the designer.

* Adding support for split screen to UMG and Slate. There is now a framework at the game viewport client level that allows content to be placed into a canvas slot that is kept in the sub-rect for the player. The new framework also provides a tooltip provider so that new windows are not created for games if a tool tip pops up.

* AddToViewport will continue to function as it always has.

* If you'd like to take advantage of putting widgets on a particular users screen you should use AddToPlayerScreen, which uses the OwningPlayer you provided when you created the widget to determine which screen to place it on.

* Adding the ability for bindings to also work on TWeakObjectPtr.

* Adding windowless rendering for drag and drop, there's a new drag & drop operation you should inherit from for games. FGameDragDropOperation, can be used for any single window game drag/drop operation you'd like to implement. UMG users don't have to do anything special, their drag drop operations will now just work in fullscreen games.

* Allowing access to the widget animations start and end time from blueprints.

* Allowing user focus (by user index) to be set on a widget.

* Buttons now have support for Pressed/Released events.

* Change the way names are displayed for items in the animation tree so that they stay in sync with the widgets being animated, and for container slots, display the name of the parent container and the name of the contained widget.

* Deprecating PlaySound on UserWidget. In blueprints there's a new PlaySound2D available everywhere, it no longer needs to be associated with a specific widget.

* Exposing a lot more functions for the FKey structure to blueprints. You can now check what kind of key it is, you can also now get the DisplayText for it.

* Hovering over a widget in the UMG designer will highlight the corresponding entry in the Hierarchy tab

* Improved the performance when UMG had a null font set on a widget

* Introducing UDPICustomScalingRule, useful when you need to completely programatically define what DPI scale should be used. Possibly based on different screen sizes, of physical screen sizes if you can detect them, or even per platform logic.

* Make animation selection more consistent

* Update the state of the preview widgets whenever the selected animation changes.

* When opening the widget editor don't select the first animation by default. This will show the widgets in their default state.

* Clear the animation timeline when there is no animation selected.

* Menu Anchor - Several new functions on menu anchor, along with a delegate to be notified when the opened state of the menu anchor changes.

* Names of widgets in your UMG widgets now have friendlier names.

* Existing and new widgets in Hierarchy have friendly display names.

* New widgets exposed as variables in My Blueprint have friendly object names.

* Added GetAllWidgetsWithInterface function

* ProjectWorldLocationToWidgetPosition - Allowing easier projection from world space to widget space.

* Reworking Custom and Desired sizes in the designer. You can now preview any custom or desired size in the context of the screen as well. So there's now a separate dropdown for choosing screen size, vs. how the widget preview should fill that screen.

* The designer now allows you to set a background image on the root widget to be visualized on the mock screen to get a better idea of scale.

* Improvements to Drag/Drop.

    * Now allows you to choose a pivot, and offset. The drag pivot defaults to Center,Center.

    * The drag data can no longer be GCed while drag is being performed.

    * In order to reduce drag/drop popping on begin drag there is now a small interpolation that occurs to move the object to the chosen pivot/offset.

    * The DefaultDragVisual property is now correctly marked as ReadOnly, it was previously set to read/write, that was inaccurate.

* UUserWidgets now have a Destruct event that is called when the slate widget is destroyed.

* When adding widgets to the viewport, you can now as an advanced parameter choose the ZOrder. Additionally ZOrder has been added as an option to the WidgetComponent. Widget Components now correctly take resolution quality/scale into account when positioning the widget on the screen.

* Widget navigation customization on widgets now allows for basic control of navigation options of widgets with the controller or keyboard.

* Widgets now support Widget ToolTips, so if you want to make a tooltip that has a bunch of custom content, now you can!

* You can now rearrange widgets in the hierarchy.

* You can now set the mouse wheel behavior when it hits a boundary on Scroll Boxes. This is also available in Slate.

* Adding GInitRunaway at the start of each widget tick to give users more leway in runaway detection.

* WidgetComponent DK2 Crash Fix. Initializing the DynamicMeshBuilder for each view.

* Adding a check to see if a widget is unreachable before trying to forward a slate event to it.

* Fix an issue where an animation would become unusable if you used undo to remove the first keyframe which was added.

* Fix an issue where double clicking on a key in an animation with a single keyframe would hang the editor.

* Fix an issue where the animation editor could get into a state where the user could add keyframes even though there was no active animation selected.

* Fix an issue with widget animation in auto-key mode where modifying a widget in the preview wouldn't add keys to the currently selected animation.

* Fix an issue with widget animation where selecting a key and then a track from the tree, or vice-versa, and then using delete would delete both the track and the keys, instead of deleting just the last item which was selected.

* Fix an issue with widget animations where deleting an animation track and then using undo would bring the animation track back, but it would not longer animate the associated widget.

* Fix an issue with widget animations where moving or deleting keys in the active animation wouldn't cause the preview widgets to update.

* Fix and issue where deleting an animation would prevent the user from using that animation name until the widget editor was reopened.

* Fixed a crash that would occur when exiting a game with cooked content

* Fixed crash when right-clicking a 3D widget with a context menu.

* Fixed issue where the mouse position wasn't properly translated into a Widget Component in the world

* Fixed translucent materials not rendering correctly on 3D UMG widgets.

* Fixing a bug with Render Transforms's IsIdentity calculation, the wrong identity comparison was being performed. This was causing all UMG widgets to add a render transform to their stack, needlessly adding more CPU side layout calculations to all Slate layouts. This also means you can use a scale of 0 now in your render transform when doing animations.

* Fixing a designer resizing issue with changing the upper left/top corner of a canvas item with stretched anchors.

* Fixing a flaw in the order Construct is called for a widget, it was being called too early, before the SObjectWidget was created, which can cause lots of strange problems like setting visibility on the inner widget instead of a wrapper if done in the Construct event.

* Fixing Above Menu anchor spawn point to correctly offset directly above the menu anchor. Additionally adding Above Centered as a spawn location.

* Fixing an assert when binding to checkbox's checked state.

* Fixing lots of small usability problems in the designer. Copy / Paste of widgets now attempts to recreate slot information of the root items into their new container. AKA, things copy and pasted in the canvas panel don't show up the same size; now they do. Lots of weird bugs when resizing, moving, re-anchoring widgets have been fixed.

* Improving the slate widget host to allow content to be set at any time. Also the marching ants no longer appears unless it's design time.

* In the designer, fixing a bug that was preventing GoTo Function on function bindings from working for the newer style binding system.

* Introducing a workaround to issues loading UMG widgets on dedicated servers. In uncooked builds the UMG module needs to always be loaded so that widgets can be cooked, even if they wont be loaded in the cooked build.

* Making a large pass and fixing all the places properties were incorrectly set to EditDefaultsOnly, they should have been set to EditAnywhere.

* Copying a widget with named slots and pasting it now correctly recreates items that were contained in named slots.

* NamedSlots, ScaleBox, and SizeBox are now SelfHitTestInvisible by default.

* No longer allowing the construction of abstract classes for widgets. If the class has the abstract flag then we just return null.

* No longer counting collapsed visibility widgets towards the desired size of a canvas panel.

* No longer exposing Disabled slate brush on the FButtonStyle. This was adding a lot of confusion. We want to support custom look and feel disabled buttons, but this particular property wasn't actually being used by any of the core slate widgets and so users were becoming confused why it didn't work as expected. Hiding from view until we have time to refactor disabled styling for buttons and more.

* No longer routing paint and tick requests while GIsRoutingPostLoad is true, this can occur in editor builds when uncooked data needs to be streamed in. When this is occurring if slate ticks blueprint code it can cause a crash due to checking for this flag, so we're just going to ignore tick and paint requests when this is happening.

* Now initializing getter binding temp values on the stack to deal with blueprint functions that do not properly return a value. Previously garbage could be returned in a binding if the users blueprint function didn't properly terminate at a return node.

* Performance fix on screen space widgets coming from components, we no longer attempt to recreate them every frame, and then remove them from the viewport.

* Properly handling the F2 button for renaming a widget in the hierarchy view.

* Reorganizing the properties on the progress bar to make it a bit cleaner.

* SetKeyboardFocus is now correctly marked as non-const so it should now appear as an executable node in blueprints.

* The Category for a widget is now recorded in tag data parsable without loading the widget into memory. So now they can be categoried in the palette correctly even when unloaded.

* The design surface now allows overzooming without control for touch input just like it does for the scrollwheel on mouse.

* Fixing a paste crash that occurs if you attempt to paste widgets into a container that has no more room for them, you now get a notification of the failure.

* Properly ignore any widget that is not of the class provided when finding all widget instances.

* The SWrapBox now correctly ignores collapsed visibility widgets when performing layout calculations.

* Slate Application now bubbles motion detection events. This prevents the commonly reported bug if focusing UMG widget (Or any slate widget) except for the game viewport suddenly causes all motion input to stop being received by the game.

* Fixed an editor crash and memory corruption issue that occurs when UMG 3D Components have been placed in the level and the widget they spawn is recompiled with certain changes. Restructuring the way external blueprint compilers are registered so that they can properly wait until all compiling has finished to do re-registering of components...etc.

* It's now safe to call IsPressed on a button before it has been added to the viewport.

* No longer duplicating the combobox entries on show/hide. It now only loads the data once on load, the fields are also now private, as they are only useful at design time.

* Fixing many problems with the String Combobox. Updating/Refreshing issues, crash bugs when clearing the list.

* Now releasing the slate resources of a slot after removing the slot from a panel. This fixes long standing weird bugs users were experiencing as a crash on exit after adding and removing multiple items a panel, either through drag/drop or other means.

* UserWidgets now follow their outer chain looking for an outer that know what world they are in. This is necessary if you want to know what world a widget is in for player controller queries...etc from a nested UUserWidget that's defined statically.

* When the text changes or the checkbox checked state changes, we now mirror the change in the UObject's copy of the data so that if the slate object goes away and is then recreated, we can recall the state for the slate object if the user is not persisting the data themselves.

* Clearing the selected objects when the widget selection is about to change. This will ensure all last minute changes like those coming from the color picker while the eye dropper are finished get a chance to finish, before the migration set of widgets changes out from under it.

* Fixing a crash that occurs when compiling a UMG widget without any animations, and without the timeline/animations visible. Causes an object to be garbage collected. We now report the object reference to prevent GC.

* Throbbers are now capped at 25 Pieces.

* The widget component now removes the widget from the parent when it's hidden.

* Fixing the pivot point not allowing the widget to be hit tested correctly on the component.

* UserWidgets that have been added to the viewport or players screen are now automatically removed and marked for pending kill when a full level transition occurs. This avoids lots of problems with old worlds being referenced causing lots of Garbage Collection crashes and headaches for users.

* Using "Wrap With" in the designer now properly wraps multiple selected widgets if they are siblings, otherwise groups all possible groups of selected siblings.

* Canvas quality improvements when using a scaled font.

* We now use bilinear sampling rather than point sampling.

## Programming Release Notes

### AI

* Added versions of UEnvQueryTest::GetItem[Actor/Location/Rotation] parametric with FEnvQueryInstance::ItemIterator to avoid conversion-related issues when accessing query's items with item iterator

* Modified Blackboard-key-change notifications to allow observers specify if they need to continue observing given blackboard key.

* SightTargetInterface got a new parameter allowing implementing code to indicate "how visible" (if at all) an actor is.

* Team affiliation handling to has been added to Sight and Hearing AI senses.

* A bunch of Pawn.BaseEyeHeight uses were replaced with appropriate Pawn and Actor function calls to improve AI code consistency.

* Comments on FEnvQueryResult have been improved to be more enlightening

* EQS named params structs are now deprecated and should be replaced with AI Data Providers.

* Fixed Blackboard's "synced keys" issues related to BlackboardComponent's registering/unregistering bug.

* Fixed disappearing AI messages sent while processing message queue.

* Fixed Envigornment Querying System's manager to not store invalid query templates, meaning the ones without any options defined

* Fixed PawnActions not being aborted on PawnActionComponent's unregistering

* Improved compatibility of Blackboard "enum" and "native enum" keys, a good step towards unifying both

* Made Environment Querying System generated Points host and handle navigation-related data in a nicer way

* Replaced operator * from EQS item iterators with new function: GetIndex()

* Two new functions has been introduced to Navigation System, GetRandomReachablePointInRadius ?and GetRandomPointInNavigableRadius, to replace a mis-named GetRandomPointInRadius

    * As a side note, GetRandomPointInNavigableRadius produces items distributed uniformly.

* A bug making PrimitiveComponents always navigation-relevant, even those with "Can Ever Affect Navigation" set to false, has been fixed

    * A serialization issue of NavigationDataClass in Navigation System's properties has been solved so that game-specific classes can now be used for these properties.

#### Behavior Tree

* Added instancing for blackboard key types to support custom memory allocations.

* Parametrized focus priority used by BTService_DefaultFocus, but kept it unexposed. The goal here is to allow easy expanding the logic by deriving the class.

* Added a safety check to not crash if BTTaskNode, that's no longer part of active BT, gets a notification via UBTTaskNode::ReceivedMessage call

* Removed failsafe Tick call from TimeLimit decorator, since it's no longer needed.

#### Debugging Tools

* Added a function to VisualLog allowing users to add arbitrary FVisualLogShapeElement instances to given log entry which results in even more flexibility in logging spatial data.

* Made AIController automatically redirect all visual logs of its components to controller's log

#### Navigation

* Added a generic support for navigation relevant actors being able to supply NavMesh generation process with subsections of their collision geometry

* LandscapeHeightfieldCollisionComponent is a working example here

* Done by expanding INavigationRelevantInterface

* Added a way to query navigation data if a specified world location is inside a given navigation node (like a NavMesh polygon).

* Added support for based navigation paths.

* Made navigation path types derivable so that game-specific navigation data can create game-specific path types and have them still treated properly on the engine level

* Optimized use of NavMesh boundary data in crowd simulation, fixed multiple samples created in the same location.

* Added sanity checks for collision components' existence in APawn::UpdateNavigationRelevance overrides, since it's not guaranteed and it could lead to crashes

* Cleand up NavigationSystem's closing process a bit to reduce redundant calls to NavigaitonDatas and their sub-parts.

* Fixed NavMesh-drawing related bug that would crash the engine if user requested drawing of navigation-collectible geometry while there was navigation octree instance.

* Fixed variable shadowing instances in Recast code

* Getter and setter for UPathFollowingComponent::bStopMovementOnFinish has been added to avoid untraceable changes to the property

* Made navigation paths' update requests store a weak pointer to paths rather than a shared reference which could lead to "path leakage"

* Made NavigationData generators thread-safe shared pointers as a step towards full multi-threaded navigation generation

* Modified FRecastTileGenerator::DoWork to gracefully handle being called with parent generator being already destroyed

* UNavigationSystem::NavDataClasses array has been removed due to no longer being used

* Fixed a bug in NavigationSystem that would result in deleted NavigationData instances not being removed from NavigationSystem which could lead to a crash.

* Fixed a bug in NavLinkProxy that made it not notify navigation system about changes to hosted links' direction.

* Fixed a bug stopping NavRelevantComponents from updating with changes to owning actor.

* Fixed HierarchicalInstancedStaticMeshComponent not being able to affect NavMesh generation regardless of its settings

* Fixed NavModifierVolume not reacting to runtime changes to its AreaClass

* GetRandomPointInRadius used to return true even if query actually failed. Fixed it to return appropriate value.

* Moved navigation-related undo/redo handling from LandscapeProxy to Actor. Now all actors should handle navigation-related undo/redo consistently.

### Animation

* Performance: USkinnedMeshComponent::AnimUpdateRateTick() optimized to reduce potential dynamic allocations. 0.40ms -> 0.26ms in test scene with many characters.

* Added a new stat that represents all game thread time taken by the animation system (STAT_AnimGameThreadTime, "AnimGameThreadTime")

* Added a stat to track time spent triggering notifies (STAT_AnimTriggerAnimNotifies, "Trigger Notifies")

* Added SkeletalMeshComponent version of GetDistanceToCollision(), taking into account PhysicsAsset rigid bodies. Fixed ?FBodyInstance::GetDistanceToBody not handling PhysicsAsset rigidbodies properly.

* Added stats for UAnimInstance construction and init time

* Added status for animation importing to identify where it's taking a long time.

* Added UninitializeAnimation, so that we can clear all data that it was being held

    * It will trigger all end notification

    * It stops montages

* Changed DoesSocketExist to support bone names as well. This now is consistent with any other socket APIs.

* Exposed GetCurveValue to outsider, so you can query.

    * This still depends on tick order. If you tick before animation, you'll get last frame data, not up-to-date data.

* Renamed UpdateKinematicBonesToPhysics to UpdateKinematicBonesToAnim to correctly describe what it does.

* PreClothTick is now dynamically registered based on the need of the SkeletalMeshComponent

* We now flip bone transform buffers in RefreshBoneTransforms if we are not part of actor ticking. Should resolve issues when RefreshBoneTransforms is called manually from other systems (e.g Matinee)

* Added logic to RefreshBoneTransforms so that if we already have an evaluation task in flight we don't crash.

* Changed InitAnim so that it will block on any currently active parallel evaluation tasks, solving some crashes.

* Changed logic for state machines first update tick so that we do not get partial notify triggers for transitions we are skipping

* Changed SlotEvaluatePose so that it loops over its own MontageEvaluationData instead of MontageInstances which can be modified by other threads

* Fixed crash in USkeletalMeshComponent::ValidateAnimation if mesh has no skeleton

* Fixed 'Draw Uncompressed' animation showing compressed animation.

    * Fixed 'Draw non retargeted' animation crashing Personna.

    * Fixed various 'Draw <something>' animation not working with SaveCachePose nodes.

    * Renamed UAnimInstance::ContextCounter to ::GraphTraversalCounter so it's more explicit, since we have many 'Context' things everywhere.

    * Made GraphTraversalCounter non static, so it works w/ multithreading evaluation.

* Fixed GetSocketTransform returning the wrong transform from a StaticMeshComponent when a nonexistent socket is specified. 

* Fixed nullptr crash in USkeletalMeshComponent::ValidateAnimation

* Minimize accumulation of errors after many composed transforms when updating SceneComponent::ComponentToWorld

* Montage replication fixes.

    * MontageStop function now has optional parameter OverrideBlendOutTime (by default it will use the BlendOutTime on the AnimMontage).

    * BlendTime on the AnimMontage instance is now replicated so abilities that override the blend time of montages will behave correctly.

* Moved rotation normalization during root motion calculations to fix incorrect rotation result on partial blending

* Queue Montage events during ticking, so they're triggered after AnimNotifies.

* Removed Blueprintable tag from AnimPreviewInstance and AnimSingleNodeInstance.

* USkeletalMeshComponent::RecalcRequiredBones's check for Sockets could add the same bone indices multiple times, triggering an assert in FillSpaceBases() later. Made sure all bones added to ForceAnimatedSocketBones and NeededBonesForFillSpaceBases are unique.

### Audio

* Export AudioVolume class to allow subclassing.

* Cleanup audio module linking

    * Don't add Audio modules if building a server on Win32, Win64, or Mac

    * Don't add D3D11RHI module if building a server on Win32 or Win64

    * Make ALAudio a Dynamically Loaded Module instead of a Private Module Dependency on Linux

* Removed the unused sound preview dialog and sound preview thread

### Blueprints

* Added a fast calling mechanism for no-argument thunks into the event graph

    * No-argument thunks into the event graph (for notification events and animation EvaluateGraphExposedInputs type calls) now call directly into the event graph, skipping one function frame and the associated invocation time

* The Spawn Actor From Class nodes can now be extended by C++ projects.

* Moved blueprint replicated property handling to UBlueprintGeneratedClass instead of an inaccessible static (mod/plugin support)

* Support for localized metadata retrieval through the use of UField::GetMetaDataText

* This change brings SMultiLineEditableText functionality closer to parity with the SEditableText.

* Implemented SelectAllTextWhenFocused

* Implemented RevertTextOnEscape

* Implemented ClearKeyboardFocusOnCommit

* Added helpful errors to catch DefaultToSelf parameters on Blueprint functions that are not compatible with the Blueprint's type.

* Added support for Actor components stored in array properties. Blueprint users can now drag references to the array into Blueprint graphs (from the component tree).

* Added support for Actor's with native scene components. Auto selecting a RootComponent when it is left unset.

* Fixed a bug where data-only Blueprints would load with components that have since been removed from their native parent classes.

* Only a simple pointer to an UObjects can be a parameter of BlueprintCallable function. No WeakObjPtr or AssetSubclassOf is accepted. Strict check in Unreal Header Tool.

* Optimized return value processing for void functions in UObject::ProcessInternal (skipping a fptr call)

* Removed "FriendlyName" metadata tag and updated comments and usage of "DisplayName" metadata tag.

* Any Blueprint items that would fallback on using one or the other have had that functionality removed.

* Removed requirement that native properties (exposed to Blueprints), had to specify EditAnywhere/EditInstanceOnly to have the property accessible from other Blueprints.

* Split out SGraphPinInteger from SGraphPinNum to push schema checking into the NodeFactory where it belongs and fixed SGraphPinNum::Construct skipping the direct parent

* Making a base async node based on the LatentOnlineCall node. From now on to create any async action just create a UObject that extends from UBllueprintAsyncActionBase and a new node entry will be added that spawns that class and activates it.

* Fixed UScriptFactory not returning created script blueprint object

### Core

* Initial support for TMap properties!

    * Currently includes reflection, garbage collection, delta serialization and text import/export.

    * This is an early release of this feature. Editor support is minimal and there is no Blueprint availability yet, but support will continue to improve in future releases.

		![image alt text](image_57.png)

* You can now have more than one Unreal class (UCLASS) in a single C++ header file! No additional work required, just define additional UCLASS and it should work!

    ![image alt text](image_58.png)

    * You can declare special Unreal types (such as dynamic delegates) in a header file, even without a UCLASS in that file!

		![image alt text](image_59.png)

    * You no longer are required to name your source file the same as your class name! That means that in a file Header.h, you can define this:

		![image alt text](image_60.png)

    * You can now use any name you want for properties! Previously, certain names like "Color" were reserved by Unreal's internal UObject system and impossible to use.

		![image alt text](image_61.png)

* AActor::GetComponents() can now support TArrays with different allocator types.

    * It's now recommended to use TArrays with a TInlineAllocator to potentially avoid memory allocation costs.

    * TInlineComponentArray is defined to make this easier, for example: TInlineComponentArray<UPrimitiveComponent*> PrimComponents(Actor);

* Add Begin/EndPlay virtual functions to UActorComponent

* BeginPlay called if bWantsBeginPlay is true, EndPlay called if BeginPlay called.

* Add conditional and no stats versions of FPlatformProcess::Sleep

* Added "Stat Math" to Core stats.

* Added stat counters for Rotator->Quat and Quat->Rotator conversion.

* Added an overload for GetTypeHash that allows the TMap template type to use a key type that is a C++11 enum class.

* Added EMIT_CUSTOM_WARNING_AT_LINE macro to emit warnings at given line rather than on macro's location.

* Added ensureOnce and ensurceOnceMsgf macros which works like the standard ensure macros but will only fires on the first false result.

* Added FCString::Strrstr, which finds the last occurrence of a substring in a zero-terminated string.

* Added FString::Reset() which allows emptying a string without reallocating memory

* Added heterogeneous comparison support to TArray::Contains, so that you can now find elements by any type which is comparable to the array element type, even if it's not convertible, e.g. searching a TArray<AActor*> for a UObject*.

* Added IsValid and Reset functions added to FDelegateHandle to make it easier to use.

* Added method for converting binary data into encoded hex string and vice-versa

* Added new C++ utility function to draw oriented wire boxes with a matrix transform (DrawWireBox)

* Added ON_SCOPE_EXIT - a generalized scope guard macro which allows arbitrary code to be run automatically when a scope is left.

* Added RandBool() function (in UnrealMathUtility.h)

* Added support for FEvent pooling to GenericPlatform

* Added support for shared shapes between sync and async scene of static actors. Reduces memory usage and makes streaming faster.

* Added support for specifying default values for FColor types in reflected methods to UnrealHeaderTool

* Added support for suspending async loading.

* Async loading can be suspended and resumed by calling SuspendAsyncLoading and ResumeAsyncLoading respectively

* Async loading is automatically suspended when the rendering thread is suspended.

* Added TArray::AddDefaulted to allow default constructed new elements to be added to the end of an array.

* Added TUniquePtr::IsValid function to make it match other UE smart pointers, and made its operators work as expected with nullptr.

* Added variadic template support to TGraphTask::ConstructAndDispatchWhenReady and TGraphTask::ConstructAndHold.

* Any build targets may now choose whether to use the shared build environment (which can share engine intermediates between projects) or a custom build environment (which can have custom compiler settings), by overriding the TargetRules.ShouldUseSharedBuildEnvironment() function. Previous setting was to use a shared build environment for the editor, and custom environment for monolithic games.

* Changed FMath::DegreesToRadians and FMath::RadiansToDegrees to use auto-deduced return types, which prevents accidental integer coercion and allows them to be called with any type which supports arithmetic operators, like FVector.

* Changed the Exchange function to use Memswap in all cases, as this was an assumption used by a lot of code.

* Core - Added dynamic stats for packages loading, disabled by default

* Core - Log should have the time markers from the beginning

* Default arguments to the Git dependencies download tool may now be specified through the UE4_GITDEPS_ARGS environment variable.

* Exposed FFilePath and FDirectoryPath as Blueprint types

* Exposed FPS (frames per second) chart global variables as Engine's module's API.

* Git binary dependencies are now cached after being downloaded, allowing faster switching between branches and use of the git clean command.

* Greatly improved support for compiling UE4 using Clang/LLVM on Windows platform (ongoing work in progress!)

* Greatly improved the quality of IntelliSense results with UE4 in Visual C++ and Xcode

* Hot-reload will now always call ShutdownModule, even when abondoning DLLs

* Implemented user feedback on automatic generation of Remote Procedure Calls (RPC) and C++ functions usable in Blueprints.

* Fixed missing directory crash in Unreal Build Tool when creating project timestamp file

* Improve error message when using TSharedPtr with UObjects.

* Make asserts trigger debug break in current stack frame.

* Modules can now specify additional support files that need to be staged, allowing plugins that depend on third party DLLs to have them automatically included in packaged builds.

* Add entries to the RuntimeDependencies array from your module's .build.cs file to have them included in staged builds. See /Engine/Source/ThirdParty/Ogg/UEOgg.build.cs for an example.

* The list of files required for a target is stored in an XML receipt file under <ProjectDir>/Build/Receipts.

* Now UnrealHeaderTool will accept GENERATED_BODY macro in every place you had to insert a type specific GENERATED_*_BODY macros (e.g. GENERATED_UINTERFACE_BODY)! It will figure out the context without your help.

* Now you can specify your own function names for _Implementation and _Validate methods using keywords! E.g. UFUNCTION(Server="MyServerImplementationMethodName", WithValidation="MyServerValidateMethodName").

* Note that when you decide to specify your own function name, you also have to declare it manually in the class header.

* Optimized UObject::IsA - it is now faster than testing cast flags and runs in constant time in all cases!

* Script Plugin was updated to support Lua 5.3.0

* Simplified UObject creation. Only NewObject<T> should be used to create UObjects.

* Stats - Added generalized method for dynamic stats

* Check the example here FModuleManager::LoadModuleWithFailureReason or UObjectBase::CreateStatID

* TAssetPtr now correctly handles derived to base conversions. Conversion to bool is now explicit.

* Threading - Thread singleton implementation is now cleaner, faster, thread-safe by default and no longer leaks memory

* TLazyObjectPtr has been overhauled

* Implicit upcasting has been added. A TLazyObjectPtr<Derived> can now be passed to a function expecting a TLazyObjectPtr<Base> without problem.

* This even works if the object referenced by the lazy pointer isn't currently loaded!

* "Ptr == LazyPtr" (with the lazy ptr on the right) will now compile

* The constructor from TWeakObjectPtr has been removed (it didn't even compile)

* Treat type truncation warnings as errors.

* UnrealHeaderTool: Added time logging for various phases and clarified code/comments surrounding the phases

* Updated commonly-subclassed actor's and component's classes, and auto-generated constructors to take a default FObjectInitializer constructor argument. Now subclasses of almost every engine class doesn't have to provide FObjectInitializer paramter for parent class!

* Updated UnrealHeaderTool to allow it to skip inline function definitions inside UCLASSes and USTRUCTs.

* Added functionality to uobject and fconfigfile to support writing only one property when updating a project setting.

* Used in the Config Hierarchy Editor.

* Added FWeakObjectPtr::GetEvenIfUnreachable to match TWeakObjectPtr::GetEvenIfUnreachable.

* Added the filename to the error log message you get when importing an object whose outermost parent is not a package.

* Async - Fixed a deadlock when deleting a thread from the same thread

* Cast and dynamic_cast with a const class type (eg Cast<const UClass> or dynamic_cast<const UClass*>) now use the optimized class cast flags if possible.

* Changed a few GetComponent() calls in critical paths to use the direct access instead of the array copy. This is only possible where it's knowns that the components will not change ownership or be destroyed.

* Changed FColor, FVector, FTimespan etc. from 'class' to 'struct', as they were defined as C++ classes but also as USTRUCTs, which caused UnrealHeaderTool to generate bad forward declarations.

* Changed UnrealHeaderTool to delete old .generated.cpp files when generating code for a module which has gotten smaller.

* Changed UStruct::SuperStruct to be a private field to prevent accidental modification, as these would invalidate the new and improved UObject::IsA code.

* Added proper shutdown for the screen saver inhibitor

* Changed movie player to not force kill a running thread

* Cleared all error messages after ensure, fixes crashes with messages from previous ensure causing an issue with understanding the crash

* Fixed buffer overflow in method used to create a directory tree

* Deprecated CanConvertPointerFromTo as it did not honor const qualifiers nor follow the naming conventions of other template metafunctions.

* Deprecated TArray::Init(int32 Number), as its name did not suggest that the array elements would be uninitialized.

* FComponentReference now correctly allows referencing of USceneComponent

* Fix typo in FMatrix::InverseFast warning message

* Fixed "Unable to bind delegate" errors during multicast delegate lookup and removal.

* Fixed a compilation error if the CopyFromWeakArray template was used

* Fixed a crash in platform file when using the log wrapper

* Fixed a crash in UnrealHeaderTool when trying to parse malformed UINTERFACE definitions.

* Fixed a crash that was occuring if you tried to hot reload a class that was used as a default subobject for object of other class in the same module.

* Fixed a crash when reimporting Script Plugin component assets

* Fixed an error in Unreal Build Tool that could occur if RTTI was enabled for a C++ module

* Fixed an UnrealHeaderTool code generation bug when there is an enum at the top of a header.

* Fixed assertions leaving the code pointer inside a Windows DebugBreak() function, requiring you to step out first

* We now use the __debugbreak() intrinsic on Windows instead of calling DebugBreak()

* Fixed binding extra params to a lambda/functor style delegate binding

* This isn't strictly necessary (can use lambda capture instead) but it makes the interface consistent with the other types of delegate binding

* Fixed build failure when you were trying to create a custom code class in the Editor derived from UArrowComponent.

* Fixed crash during hot reload of the module that contained a class, which constructor was calling StaticClass function of other class from the same module.

* Fixed dozens of missing 'override' specifiers on C++ virtual functions throughout the engine

* Fixed enum duplication warnings.

* Fixed error message when user tried to create unsupported constant properties.

* Fixed hot reload not actually reloading game modules in games that had multiple gameplay modules

* Fixed hot reload not updating derived classes if the base class layout changed resulting in the derived class layout changes without changing the overall class size.

* Fixed hot reload not updating values on default subobjects' properties.

* Fixed incorrect CastChecked behavior when doing interface casts in shipping builds.

* Fixed IncrediBuild never distributing Link actions to remote machines for UE4

* Fixed inheriting show and hide categories in property editor.

* Fixed issues with finding directories using FFileManagerGeneric::FindFiles().

* Fixed mistaken name conflict during "Add Code To Project..." wizard in the Editor if you had two or more modules with same suffix.

* Fixed occasional crash during hot reload, that was caused by re-runing construction scripts for class default objects, which is forbidden.

* Fixed ranged-based iteration over FString so that it no longer returns the null terminator.

* Fixed recompilation of a lot of Engine modules during normal build after prior hot reload compilation, even if there were no changes in the Engine code.

* Fixed sandbox file wrapper not using the correct paths in game projects not directly under UE4 root folder.

* Fixed splitting of UnrealHeaderTool's generated C++ files.

* Fixed temporary being saved into map packages at runtime because they were not marked transient

* Fixed TFunction so that another compatible TFunction can be bound to it.

* Fixed the constness of the std::nothrow_t parameters in our operator new/delete overloads.

* Fixed the scalar version of FTransform::Inverse so that it works the same as the vectorized version.

* Fixed the visualizers for FWeakObjectPtr and added support for Visual Studio's expanded view for TOptional members.

* Fixed two problems with the Editor's "Add Code To Project..." functionality:

* missing dependency, linker or include errors after creating subclasses of some type,

* missing "Selected Class Source" link to source class of Slate Widget and Slate Widget Style classes.

* Fixed UBT makefile regeneration issues.

* Fixed UnrealBuildTool failing to harvest environment variables when SET command produced empty lines

* Fixed UnrealHeaderTool generating bad code when a UClass pointer is used as a return type or as a parameter to a replicated function.

* Improved much of TMap's implementation, by removing redundancy, adding extra compile time error checks and improving encapsulation.

* Improved the error message given by UnrealHeaderTool when trying to use a TArray property with a custom allocator.

* Logging fatal messages with FMsg::Logf crashes engine.

* Make FScopedSlowTask work properly across threads.

* Metadata for enumeration types are now gathered for localization properly.

* Nested components will now be correctly updated in the Actor's OwnedComponents arrays after their Outer component is renamed or modified via undo/redo.

* Optimization: Converted all engine uses of GetComponents() to use TInlineComponentArray or direct array access.

* Optimized the logic for determining whether or not to save a tagged property during serialization.

* Removed generation of deprecated .generated.inl headers from UnrealHeaderTool.

* Removed MaxReadBytes from UProperty::SerializeItem, UStruct::SerializeBin and FPropertyTag::SerializeTaggedProperty, as it was unused.

* Removed PLATFORM_COMPILER_HAS_RANGED_FOR_LOOP, as all UE4 supported compilers have it.

* Removed PLATFORM_COMPILER_HAS_RVALUE_REFERENCES, as all UE4 supported compilers have it.

* Removed the EXTERNAL_OBJECT_NAMES macro and related code, as the feature is now obsolete.

* Renamed UnrealSwarm's CommonUtils library to SwarmCommonUtils to avoid naming conflicts.

* Restored the missing LogUnion log category, which caused link errors when TUnion was used.

* Stats - Fixed a stats warning, asynchronous thread has an unique name now

* Stats - Fixed an issue with encoding/decoding group category

* Stats - Fixed issue with decoding group category from stats metadata

* Updated config file hierarchy with enums that can be used to determine priority.

* Standardised naming convention for class used to managed memory operations, the same names for template and pointer based functions

* A dummy World is now created when the Game Instance is created when running standalone (not PIE).

    * This World is not fully set up and many operations will not be useful, however, it does allow certain behaviors to work when being called from objects initialized before entering the initial map (e.g. UMG Widgets, Game Instance)

* Add FJsonObjectWrapper struct to JsonUtilities, this allows inserting unconverted Json nodes into your structures that pass through JsonObjectConverter

* Added a new method for setting the content of the XML node

* Added AActor::bActorHasBegunPlay to track that an Actor has had BeginPlay called for it and has not subsequently had EndPlay called. Use HasActorBegunPlay to query.

* Added ability to set the thread priority of a monitored process

* Added append operator to the chunked array class

* Added check for negative size of deserialized string.

* Added more detailed message when uncompression fails, which includes the exact cause of failure.

    * Added the ability to skip unccompression errors during serialization via FailOnUncompressErrors under [Core.Settings] section in engine ini.

* Added safety path to ignore and recreate ActionHistory.bin if that happens instead of a crash. We were reported that UnrealBuildTool's ActionHistory.bin file for some users was corrupted and it looked like it had been caused by interruption during saving process. This situation shouldn't occur anymore.

* Added better Unreal Objects hash stats

* Added stats for module manager

* Function for creating synchronization events in no longer publicly available (see FPlatformProcess::CreateSyncEvent)

* Exporting Decal Component class from the DLL to give access from outside the module.

* FInterval is now templatized and can be used as a UPROPERTY. A Details panel customization for Interval properties was also added.

* Implemented faster unhashing of UObject FNames in case of conflicts (with subobjects which have hardcoded names). 

* Added memory stats to 'obj hash' and 'obj hashouter'

* Modules can now disable optimization in all configurations except shipping, by setting OptimizeCode to CodeOptimization.InShippingBuildsOnly in their module rules.

* Moved actor components into Components folder

* Package files now include a CompatibleWithEngineVersion field, declaring the engine version that the package is compatible with separately to the engine version that it was saved by. Hotfix releases will set this field to the last major release version.

* Properties of class type in User Defined Struct can have a default value defined.

* QMake project generator will add info about include paths to aid indexing.

* Renamed ITlsAutoCleanup to FTlsAutoCleanup (it's not a [non-virtual] interface)

* Script generator plugin is now using the engine's modular features system instead of plugin category for registering itself with UnrealHeaderTool.

* Specifying -Timestamp on the commandline to AutomationTool will add timestamps to output logs.

* StaticArray now has a Num() function. Useful when you just want to provide the length in the template arg, and just want to indirectly refer to it later.

* The default engine resource file on Windows, PCLaunch.rc, has been split into two. PCLaunch.rc now opens correctly using the Visual Studio resource editor, while PCLaunch.rc2 contains any manual and preprocessor sensitive resource definitions.

* Automatically compile C++ modules on editor startup.  The loading/saving section of the editor preferences now includes an option to always compile game modules on editor startup.

* The multicast analytics providers was only accessible to C++ projects that manually added a dependency upon the module. I moved this to a be a plugin instead to remove the C++ project requirements

* UnrealBuildTool now supports creating precompiled distributions for any targets, similar to the releases which can be downloaded from the launcher. Teams which do not expect to modify the engine source often may wish to take advantage of this workflow for faster iteration times.

    * To create precompiled modules, override the GetModulesToPrecompile() in your target.cs file and add a list of modules to build, then build the target using UnrealBuildTool passing the -precompile argument.

    * To use precompiled modules, modify the UnrealBuildTool command line to include the "-useprecompiled" argument (or pass -useprecompiled on the command line to GenerateProjectFiles.bat)

* FastArraySerializer now calls PreReplicatedRemove callbacks before PostReplicatedAdd callbacks, to better support "renaming" things in the array.

* Fixed a rare crash when generating uobject token streams

* Fixed custom warning emitter, which was outputting additional parenthesis. This was preventing red highlight in Visual Studio output window.

* Fixed default subobject instancing when creating an instance from a non class default object Blueprint archetype.

* Fixed hot reload issues with plugins.

* Fixed hot reload not always detecting default subobject changes in the constructor of hot reload class.

* Fixed infinite loop when a parent component fails to register.

* Fixed project generation where multiple projects have the same prefix, e.g. TP_Vehicle and TP_VehicleAdv.

* Fixed UAT crash when trying to load .NET assemblies with missing prerequisites.

* Fixed UnrealBuildTool's environment variable harvesting method to cope with non-ASCII values, which caused problems when building projects in non-English versions of Windows.

* FPlatformMisc::LaunchURL now supports arbitrary URI schemas using the default operating system handler.

* Made UnrealBuildTool not to show verbose logs during its startup.

* Optimized UnrealHeaderTool, reducing the duration of an invocation on FortniteGame by approximately 20%

* Optimized various uses of TArray::Pop to prevent incremental reallocation for short-lived or frequently used TArray instances

* Profiler

    * Fixed profiler not working with live preview for standalone instances

    * Optimized bandwidth required to send the stats data, data is using better encoding and is compressed

    * Data encoding has been moved to the task graph to minimize the performance impact

* The parameterized constructor for FTimerHandles has been removed.

* UnrealHeaderTool: Added limited support for parsing character literals to avoid incorrectly erroring on things like '\"'

### Editor and Tools

* Improved the performance of FText::AsNumber

    * Blueprints now try and use the default formatting options where possible, as they were previously always using custom formatters which was very expensive

    * We now have a cache of the most recently used formatting options to help the cases where you are frequently re-using a custom set of formatting options

    * FNumberFormattingOptions now provides a convenient way to create a default number formatters:

        * Format a number without grouping separators - FNumberFormattingOptions::DefaultNoGrouping()

        * Format a number with grouping separators - FNumberFormattingOptions::DefaultWithGrouping()

* Improved the performance of FText::Format

* LogFile wrapper improvements

    * Reduced verbosity to make it more usable for file open/close debugging

    * Added open file handle tracking to be able to dump all open file handles via 'filelogdump' console command

* ScriptGeneratorPlugin will now be disabled by default. Projects can opt-in by enabling it in their uproject file.

* The Git source control plugin now has the option to intiialize a new local repository for the current project

* The Git source control plugin now supports merging

* We now offer to show the Output Log when adding a new C++ class fails in the editor.

* When compiling C++ from the editor, any errors are now output to the Message log as hyperlinks. Clicking on them will take you to the appropriate line of the source code in your IDE.

* Deprecated GEditor->SetActorLabelUnique and GEditor->SplitActorLabel. Please replace calls with the static methods FActorLabelUtilities::SetActorLabelUnique and FActorLabelUtilities::SplitActorLabel

* Disabled some timing log spam in normal map identification code (seen for every imported texture)

* Fixed not being able to toggle between Public and Private class when using Add Code to Project

* Removed unnecessary file existence check

* Harmonize Compilation Result return codes between Editor platforms

* Fixed a typo in UE4Games.uprojectdirs

* FBase64::Decode: fix signed/unsigned comparison bug

* Removed a dead declaration for FActorDetails::AddMaterialCategory which had no definition

* Removed FKey mappings for unimplemented gestures (SwipeLeftRight, SwipeUpDown, TwoFingerSwipeLeftRight, TwoFingerSwipeUpDown)

* Removed some unused background textures from the engine content directory

* ScriptPlugin will no longer attempt to import txt files resulting in creating invalid blueprints.

* Added support for multithreaded bulk data loading.

    * Any bulk data bigger than a specified threshold will be loaded on a separate thread

    * Size threshold can be set via MinBulkDataSizeForAsyncLoading value under [Core.System] section in engine ini

* Added VerifyAsyncLoadAssumptions console command to check if flags on UObjects get properly reset after streaming has finished.

* Added a ConfigRestartRequired meta-data property to allow you to tag config properties as requring an application restart before they take effect

* Added a utility function to the UnrealEd module in CommandletHelpers.h for generating the commandline arguments necessary to execute a commandlet.

* Added an assert if someone attempts to queue an async IO request without a valid destination buffer to prevent random crashes later in async loading code.

* Added functionality to change the current URL of a web browser window

* Added some additional methods to IAssetEditorInstance to support reasoning about their owning tab manager and last activation time

* Changed UEditorEngine::SnapToSocket to use USceneComponent::SnapTo so that it works generically with any component which handles sockets.

* FArchive objects have now access to Engine Version (FEngineVersion) which they can use for upgrade path logic in serialization code.

* Fully DLL exposed UCurveFloat so you can derive from it

* FWorldGetAssetTags delegate available for games to query world asset registry tags

* GraphEditor: Refactored connection drawing policy API to be more flexible

* It now passes a parameter structure around instead of loose values (FConnectionParams)

* Remove duplicated implementations of DrawConnection in subclasses that draw non-curved splines, overriding ComputeSplineTangent instead

* Improved intellisense data for engine source in launcher projects

* JSON API improvements for numbers

* Added int32/int64 overrides for the WriteValue functions that didn't take a key so that they matched the variations of the functions which did take a key.

* Added an int64 override for TryGetNumber to match the int32/uint32 versions.

* K2Node_CallFunction will now automatically fix up relevant execution pins when a Blueprint function changes from impure to pure.

* Several AActor functions changed to be pure functions (GetDistanceTo, et al).

* Made a few UObject-related helper classes thread safe

    * FUnresolvedStructTracker

    * FUniqueObjectGuid

    * FStringAssetReference

    * FUObjectAnnotationDense

* Made it possible to force auto-expansion on an IDetailPropertyRow in a property editor details customization

* Made UGameViewportClient::NotifyPlayerRemoved() virtual

* Mesh painting mode can now be overridden to work on other kinds of UMeshComponent subclasses besides UStaticMeshComponent

* Create an IMeshPaintGeometryAdapter implementation for your component

* Create a IMeshPaintGeometryAdapterFactory implementation and register it with the mesh paint module using RegisterGeometryAdapterFactory

* Note: Currently only texture painting is supported via the adapter, vertex painting may be added at a later time

* Pak files are loaded in deterministic order based on directory

* Pak files can be unmounted now

* Plugins can now define their own input sub-categories rather than having to choose Keyboard, Mouse, or Gamepad

* EKeys::AddMenuCategoryDisplayInfo is used to define the name and icon for the category.

* When creating the FKeyDetails for a new key added via EKeys::AddKey you can now specify the menu category to arrange within.

* Temporary UObjects created for hot reload to get their virtual table pointers will now be marked as RF_TagGarbageTemp to be able to skip any hot reload incompatible logic inside their constructor.

* The settings system now creates a category if one did not exist when you attempt to add a new section to a category that did not previously exist, instead of ignoring your request.

* UDeveloperSettings is now available to create settings objects that can be auto-discovered by the editor without building a plugin or some other system to register the settings with the settings viewer.

* UnrealVS v1.34 (+v1.35 for VS2015)

* Duplicated actors maintain relative references

    * When duplicating multiple actors which reference one another, the relative references will be preserved in the duplicated actors, instead of referencing the original source actors.

* Improved identification of 'Game' projects by checking for uproject files matching the VS projects.

* Game projects are now always show at the top of the project list.

* Fixed a command line editor issue.

* Improved detection of Unreal Engine solution files by looking for a comment in the sln file added by Unreal Build Tool.

* Quick switching of the IDE's build config and startup project at the same time via the build list in the Batch Builder window.

* Various fixes to the in-game / in-editor screenshot facility:

* All captured screenshots are now saved as png files.

* The editor now no longer relies on the delegate registered by the AutomationWorkerModule to save the image as a .png.

* AutomationWorkerModule now registers a HandlePreTestingEvent and HandlePostTestingEvent with the AutomationTestFramework in order to provide custom screenshot capture behavior while running tests.

* Made SEditorViewport toolbar handling more flexible

* Introduced a new method PopulateViewportOverlays that allows arbitrary toolbar creation (bottom, sides, etc...)

* MakeViewportToolbar (for the top toolbar only) is now optional to implement in subclasses and may be deprecated in the future

* Added sanitization to the asset name in addition to the package name in FAssetTools::CreateUniqueAssetName

* Allowed editor mode toolkits a chance at processing command bindings

* Changed FDragTool to take in a reference to FEditorModeTools* instead of referencing the global one

* Changed global Undo/Redo routing to automatically invalidate all editor viewport clients

* Added UEditorEngine::InvalidateAllViewportsAndHitProxies

* Removed manual Invalidate calls in the Blueprint and Font editors during Undo/Redo handling

* Removed a redundant InvalidateDisplay after an Invalidate call in the Font editor

* Changed implementation of TTypeToString and TTypeFromString to use global namespaced functions instead of explicit template instantiations.

* Clean up pass on UEditorEngine

* Split all UEditorEngine methods from Editor.cpp into EditorEngine.cpp (though more are still scattered around in other files like EditorServer.cpp)

* Removed GetClassFromPairMap, ClassMapPair, and associated keyboard shortcuts to place nav pylons, since they don't exist anymore

* Removed dead variable StreamingBoundsTexture and associated method SetStreamingBoundsTexture

* Split out the implementations of SplitActorLabel and SetActorLabelUnique into statics on FActorLabelUtilities,

* Removed various GWorld references

* Removed empty method HandleCreateMeshFromBSPCommand and associated exec command

* Ensured that FScalableFloat::FinalCurve is updated when the curve table it's referencing is re-imported

* Fixed bug which allowed the "-immersive" command-line option even when no project file was specified

* Fixed slate application focus not being applied correctly when activating windows

* Fixed UAssetObjectProperty not being able to import asset references in the form "Texture2D'/Game/Thing'"

* This broke data table importing when using a TAssetPtr property.

* This wasn't an issue when using User Defined Structs as they use a UObjectPropertyBase when referring to other objects.

* Fixed Unicode log messages going missing during packaging.

* Fixed UnrealHeaderTool not respecting class flags on unparsed classes used as property types in other classes resulting in not propagating those flags to properties.

* Fixing hot reload crash when FStringAssetReference changes during hot reload.

* Garbage Collector will now respect references from FGCObjects even in cooked builds which have a permanent object pool set to non 0 value.

* Removed unnecessary loop from FStringOutputDeviceCountLines::Serialize code

* Promoted FAssetEditorModeManager into UnrealEd and made it the default for FEditorViewportClient::ModeTools when the derived class doesn't specify anything, which prevents some types of selection highlighting issues where editors would use the global selection state incorrectly

* Removed the Recompile Level Editor feature (was not supported and not working properly)

* Stopped Visual Studio showing a "Save" message when closing after adding new classes via the editor

* The rich curve evaluation function was optimised to use a binary search to locate the interpolation nodes. In the particular test case used it resulted in a 10x speed up.

* UnrealHeaderTool will no longer try to automatically declare a constructor with FObjectInitializer if the base class does not declare one too.

### Content Browser

* Added support for saving unique per-filter state in a frontend filter by implementing SaveSettings and LoadSettings

* Added the ability to register new advanced asset categories without editing engine or editor source

    * This is done using new methods on IAssetTools (RegisterAdvancedAssetCategory, FindAdvancedAssetCategory, and GetAllAdvancedAssetCategories); an example can be found in the Paper2D module

* Added F prefix to FAssetFilterType and FAssetFilterCollectionType, and removed a redundant declaration.

* Opening a C++ class via the Content Browser now opens the source file as well as the header file

### Landscape

* Removed "#pragma clang diagnostic ignored "-Wreorder"" in landscape editor data caches

    * It's always better to fix the code so it doesn't generate diagnostics in the first place

* Fixed crash in ULandscapeInfo::UpdateAddCollision

* Fixed incorrect spelling of the ULandscapeHeightfieldCollisionComponent::CookCollisionData function name in C++ code

### Project Browser

* Added some verbose logging to help diagonse issues when creating new project templates

### Static Mesh Editor

* Deleted some dead lightmap mesh import/export code in StaticMeshEditor and UnrealEd

### Foliage

* Moved Foliage into its own module

* Removed the InstanceInverseTransform element from the FInstancingUserData struct used by InstancedStaticMeshComponent. This data was incorrectly calculated, wasted memory and was not used by the engine.

### Gameplay Framework

* New Component 'Editable When Inherited' flag

    * A new feature has been added to Components that allows you to specify whether a component may be edited by subclasses or on instances in the world.

	![image alt text](image_62.jpg)

    * Be warned that checking this box will overwrite any existing customizations made to the component in any subclasses or actor instances.

    * When the component is locked you will get a warning with a link to open the blueprint or parent class as appropriate.

    * While this boolean can also be set in C++ to prevent a component from being edited, it is generally more appropriate to use a UPROPERTY that is not marked as visible.

* Made DefaultPawn more extensible by allowing subclasses to use any type of PawnMovementComponent

* Added AActor::bActorHasBegunPlay to track that an Actor has had BeginPlay called for it and has not subsequently had EndPlay called. Use HasActorBegunPlay to query.

* Added FTimerData::Clear to make it easier to reset a timer.

* Removed "virtual" keyword from several engine-level BlueprintImplementableEvents to conform to the new "BlueprintImplementableEvents should not be virtual" standard.

* SpawnActor will now log a warning and fail if the input location or rotation contains NaNs.

* The OnTeleported event is now defined in UMovementComponent (rather than UCharacterMovementComponent), meaning any type of movement component can now handle that event.

* Added missing call to Super function in APawn::TeleportSucceeded().

* Centralized several duplicate implementations of projection matrix calculations for user cameras into FMinimalViewInfo::CalculateProjectionMatrixGivenView

    * Note: Editor cameras that are not previewing a camera actor still go down a separate code path for now

* Corrected comment for MakeEditWidget metadata to replace FRotator with FTransform reference and add that it works on TArrays of supported types too

* Fixed DrawDebugBox using DepthPriority incorrectly.

* Fixed FTimerManager::FindTimer so that it can find the currently-executing timer.

* Fixed PlayerController's GetHitResultAtScreenPosition() not returning the index of the face that was hit

* Fixed USceneComponent::GetRelativeTransform to be const.

* Prevented the canvas being passed into ViewportClient->Draw from having an invalid/uninitialized ViewRect member

* Removed UPROPERTY tags from several PlayerCameraManager members that didn't need it.

* Added Auto Destroy Delay property to GameplayCueNotify_Actor so if Auto Destroy On Remove is true it will set the lifespan of the gameplay cue instead of destroying it immediately.

* Added GameplayStatics::GrassOverlappingSphereCount(), which returns the the number of instances of a specific grass mesh within a sphere (in C++ or Blueprints)

* Added GetActorTickableWhenPaused function to Actor

* Added some simple versioning to the engine-provided savegame serialization (via UGameplayStatics::SaveGameToSlot and LoadGameToSlot). This will enable us to handle future updates more robustly.

* Fixed comment on GetActorsInSelectionRectangle function

* PlayerController ClientStopCameraShake and ClientStopForceFeedback are now reliable.

* Added nullptr check to SpawnDecalAttached

* Changed UMovementComponent::OnTeleported() to be called for all Pawns that teleport, rather than just for Characters.

* Fix category for OnDestroyed and OnEndPlay Actor delegates

* Added clearer display name for EAttachLocation::SnapToTarget ("Snap to Target, Keep World Scale" in the editor).

* Added new attachment location option called EAttachLocation::SnapToTargetIncludingScale ("Snap to Target, Including Scale" in the editor).

### Documentation

* Added warning to documentation for AActor::GetComponents() about the possibility of the array changing while iterating its contents.

### Localization

* The text from UI_COMMAND macros will be nested under the namespace specified by LOCTEXT_NAMESPACE, nested under the "UICommands" namespace. IE: "UICommands.MyNamespace"

* Vastly improved in-code documentation, type and function names, and intelligibility of much of the text localization system.

* Tidied up some old localization code by removing the following: PPF_LocalizedOnly, CPF_Localized, CLASS_Localized, UProperty::IsLocalized.

### Networking

* Network Replay Compatibility

    * Added ability for older network replays to be backwards compatible with newer engine versions.

    * You can now load old replays with new engine versions.

        * This works by building a network checksum for each actor that is based on the network properties, and detecting if they change.

        * It's built so that actors that are different don't load, and should simply be missing from the scene.

    * This is an experimental feature that should hopefully continue to improve over time.

* Added an interface for network replay streaming, INetworkReplayStreamer, in the new NetworkReplayStreaming module.

    * This interface encapsulates the behavior of saving and retrieving replays from a storage provider.

    * INetworkReplayStreamer::EnumerateStreams can be used to get a list of replays that are available for viewing.

    * The logic for storing replays to your project's Saved/Demos directory in previous versions has been moved into the default concrete implementation of this interface, FNullNetworkReplayStreaming.

        * Each replay is now stored in it own directory, which contains the various data files that make up the replay.

* Added new API functions to make using network replay features easier.

    * UGameInstance::StartRecordingReplay to start recording a replay.

    * UGameInstance::StopRecordingReplay to stop recording a replay.

    * UGameInstance::PlayReplay to start playing a replay.

* IsLocalPlayerController should now be accurate at all times, removing any undefined behavior if called early or late in a PlayerController lifetime

* Removed some obsolete protocol version variables from the UNetConnection class.

* ServerReplicateActors no longer does hard casts to PlayerController or Pawn to resolve owner issues. There is now a GetNetOwner function to return the actor that "owns" the connection. Typically APlayerController, but AOnlineBeacon overrides this as well. Allows replication of any UPROPERTY values on AActors as if regular game replication was taking place.

* The server now closes channels for torn-off Actors (actors whose bTearOff flag is true) the next time they would be considered for replication.

* Added some missing error codes in FSocketSubsystemBSDCommon::TranslateGAIErrorCode, which handles errors returned from getaddrinfo()

* Beacons actors are now cleaned up properly in NotifyActorDestroyed. Previously any server initiated cleanup attempt would not destroy the actor on clients because the net driver wasn't properly notified.

* DebugCameraController always returns true in IsLocalPlayerController

* Move code in UDemoNetDriver::TickFlush to UDemoNetDriver::TickDispatch. This makes DemoNetDriver behave like IpNetDriver and fixes some issues in network replays with actors stuttering, among other issues.

* Packets from Steam socket connections that have been previously closed are now discarded before processing.

* Removed the obsolete USTRUCT version of FNetworkGUID, as it is no longer used.

* When using the NullNetworkReplayStreaming module, enumerated replays will now correctly report the friendly name that was assigned when the replay was recorded. By default this is the name of the map on which the replay was recorded.

* Added GetMaxAvailableTeamSize to reservation beacon API for returning the max available space on any one team for an incoming group.

* Made it possible to inherit from UControlChannel

* Marked the UVoiceChannel class for export

* We now replicate the component in FHitResult

* Fast TArray now tracks unmapped properties on the client side, freeing up the server, and simplifying things there.

* UpdatePing and RecalculateAvgPing are now virtual

### Online

* Added a new function to the online sessions API to find a session by id. Not implemented by most platforms yet.

* Added a new macro ONLINE_JSON_SERIALIZE_OBJECT_SERIALIZABLE which allows serialization of nested JSON objects.

* The OnSessionInviteAccepted delegate in the OnlineSessionInterface has been removed, and has been fully replaced with the OnSessionUserInviteAccepted delegate.

* Added support for the FOnlineSessionSettings class to properly serialize boolean values.

* Fixed a bug that would cause precision loss when reading or writing 32-bit integers with very large values in FOnlineJsonSerializerReader and FOnlineJsonSerializerWriter.

    * Note that since the FOnlineJsonSerializable class is based on this code, it has also been fixed.

* Crash fix for BuildPatchTool following FRunnableThread::InitializeTls requirement

### Other

* Added navigation filter support in EQS pathfinding tests.

* Added new EQS generator for creating rings of points.

* Now UnrealBuildTool warns if you are trying to build the project with SQLiteSupport module using Rocket build, which is not supported.

* Removed deprecated file Media.h

* Simplify creating subobjects in Engine module.

* Removed private precompiled header inclusion in public header of SQLiteSupport module, which caused building breaks.

* Added GetTextSafeRegionBounds() function to the stereo rendering interface, to make it easier to place debug text in the readable area of VR headsets

* Added new console command ?'ShowDebugForReticleTargetToggle <DesiredClass>' Toggles 'ShowDebug' from showing debug info between reticle target actor (of subclass <DesiredClass>) and camera view target.

### Paper2D

* Added/improved comments for various Paper2D types

* Added getters for CollisionThickness and SpriteCollisionDomain to UPaperSprite

* Added necessary includes so that Paper2D and Paper2DEditor modules can be compiled without including the corresponding *Classes.h files, improving single file iteration time

* Changed FSpriteAssetInitParams.Offset and Dimension to be FIntPoint instead of FVector2D, along with various other sprite texture region code

* Implemented USceneComponent::GetAllSocketNames() in terms of USceneComponent::QuerySupportedSockets() and removed unnecessary virtual and existing overrides

* Made most variables in UPaperTileLayer private

* Prevented the sprite scene proxy from directly accessing the body setup (used for collision geometry visualization) via the owning component, instead caching it at creation and updating it as necessary

* Refactored the code from UPaperSprite that takes a FSpriteGeometryCollection and converts it into collision geometry in a UBodySetup into a new helper class FSpriteGeometryCollisionBuilderBase for reuse with tile maps, etc...

* Renamed PaperJsonImporter module and associated classes to PaperSpriteSheetImporter

* Added SetPlaybackPositionInFrames and GetPlaybackPositionInFrames to UPaperFlipbookComponent

* Exposed UPaperSpriteComponent::GetSpriteColor, allowing you to query the current color of a sprite instance

* Implemented a stable vertex buffer as an opt-in fast path for FPaperRenderSceneProxy subclasses

* Made members of UPaperTileSet private and added accessors

* Removed BlueprintReadWrite from FPaperTileInfo members, opting instead for friendlier make/break functions (since the index contains packed flags)

* Removed editor-only gating on registering the Paper2D custom version and performed as much back-compat loading code as is possible in cooked builds

    * Note: UPaperSprite assets still cannot rebuild collision or render data in a cooked build and will warn on load if they are stale in a cooked build due to incremental cooking

    * Removed support for the old binary collision layers in Tile Maps

### Physics

* PhysX 3.3.3 source code is available for everyone. Check out https://wiki.unrealengine.com/PhysX_Source_Guide for more info

* Turned on sync scene lock warning. This is needed to ensure accessing PhysX from multiple threads is safe. Introduced a new lock semantic to make this more explicit.

* "p.ShowInitialOverlaps" now also draws the triangles of a trianglemesh or heightfield which the query overlaps.

* Added an optional memory validation for the physx allocator

* Added stat counter for USceneComponent::EndScopedMovementUpdate, under "Stat Game"

* Added support for querying the number of instances in an area for an HISMC

* Added tunable control of FloatingPawnMovement's turning responsiveness.

    * Simplified compact statement that was computing the turning vector in order to make it easier to read.

* Added virtual hook in CharacterMovementComponent to determine if a client's state is too different from the server's (ServerCheckClientError).

    * This is used by ServerMoveHandleClientError() to determine whether to send a client error correction.

    * Added FNetworkPredictionData_Server_Character::bForceClientUpdate to allow users to force a client correction.

* Deprecated OverlapSingle and introduced OverlapBlockingTest, OverlapAnyTest

* Introduce contact modify flag for body instance. This is needed for destruction impact resistance.

* Performance: FQuat, FRotator, FRotationMatrix optimizations across multiple platforms.

    * Optimized FQuat<->FRotator conversions.

    * Optimized FRotator::Vector, FQuat::RotateVector, AActor::GetActor<Forward|Up|Right>Vector

* Refactor overlap/sweep/raycast so that they explicitly use channel object type or profile

* Various Actor and SceneComponent methods that use FRotator now have overloads taking rotation as an FQuat (Quaternion).

    * Current calling code should still function normally (old APIs are maintained).

    * FQuat versions are faster if you start with a Quat, since FRotator versions typically will convert to Quat first. For example use GetActorQuat() rather than GetActorRotation() (which itself does a Quat->Rotator conversion).

* Added FQuatRotationMatrix, for the common case where FQuatRotationTranslationMatrix is overkill.

* Added missing Super::TickComponent() to RotatingMovementComponent.

* Added more DiagnosticCheckNaN_All() checks in common FTransform methods.

* Added stat tracking to all PhysX lock/unlock calls, not just the scoped locks.

* Always clear output FHitResult in RaycastSingle and SweepSingle regardless of whether there is a hit.

* Apply ScaleInputAcceleration() to acceleration in UCharacterMovementComponent::MoveAutonomous().

* BlueprintImplementableEvent ACharacter::K2_UpdateCustomMovement() is no longer virtual.

    * It was never intended to be overridden in C++. That is the purpose of UCharacterMovementComponent::PhysCustom().

* Change FBodyInstance.UseAsyncScene to take in the owning PhysScene. This is important in cases where garbage collection may have marked the OwnerComponent as unreachable.

* Character NavMesh movement avoids ProjectLocationFromNavMesh() line trace when location has not changed since last valid check and bAlwaysCheckFloor is not true.

* Characters using NavWalking movement mode now stagger their line check updates to avoid running on the same frame if possible.

    * Time updates account for rollover to make delta times accurate. Adds protection so a frame rate / delta time spike doesn't realign them all to the same frame.

* Don't crash on invalid normal in ConvertQueryImpactHit() (changed to ensure).

    * Added better handling of initial overlaps for raycasts.

    * Don't allow invalid normal to be returned out of ConvertQueryImpactHit() in any case.

* Fix destructible not turning on hit events if an impact depth override is used

* Fix for "penetration" causing character movement to hitch. Rather than stopping all movement that update, deflect off the depenetration vector and continue movement.

    * Add "p.PenetrationOverlapCheckInflation" to replace previously hardcoded value, for easier tuning of inflation used in overlap check when resolving overlap.

    * Fix jumping when pressing up against corners causing a very quick landing, caused by using invalid penetrating sweep result.

* Fix for destruction crashes when userData becomes stale. This has been seen in a few places: addForce, recreation of state, etc...

* Fix PhysicsVolumes not being unregistered from the global list when they are streamed out.

* Fixed CharacterMovement using an invalid floor as the Character's base component when initially entering Walking mode.

    * Added UCharacterMovementComponent::SetBaseFromFloor() helper to validate that the floor is indeed walkable before calling SetBase() with the hit component.

* Fixed ComponentSweepMulti() using incorrect transform when shape is not at the local origin.

* Fixed crash when extracting instance transforms from an instanced static mesh component when the tree wasn't fully built

* Fixed PhysX crash caused by calling PxScene::addActors after simulation started.

* Fixed recursive UCharacterMovementComponent::StartNewPhysics() calls allowing UpdatedComponent to change in nested scopes.

* Improved PhysX locking for scene queries to prevent potentially accessing scene data when processing results after the scene has been unlocked.

* MovementComponent refactored to add overloads using FQuat in addition to FRotator.

* Optimization: Remove check for DestructibleActor in CharacterMovementComponent floor check, it is handled by component mobility check.

* Optimization: Removed the "lock-per-shape" and redundant lock/unlocks in ComponentSweepMulti.

* Performance: Avoid some GestureRecognizer logic when nothing has changed.

* Performance: Avoid unnecessary work in APawn::FaceRotation() when none of bUseControllerRotation[Pitch|Yaw|Roll] are enabled.

* Performance: Change all uses of "GetActorRotation().Vector()" to "GetActorForwardVector()" which is ~10x faster.

* Performance: Change use of FTransform::TransformFVector4() to FTransform::TransformPosition() where possible. This is faster when starting with a 3 component FVector.

* Performance: Convert more uses of individual Sin/Cos calls to use new faster SinCos(). Cleaned up some hardcoded degree to radian conversion to use the function template instead.

* Performance: Convert uses of FRotationMatrix(GetActorRotation()).TransformVector(...) to GetActorQuat().RotateVector(...) which is equivalent but faster.

    * The latter method is nearly 5x as fast as the first.

* Performance: Converted some uses of GetActorRotation() to GetActorQuat() where possible. Use FQuatRotationMatrix rather than FRotationMatrix where possible.

    * FQuatRotationMatrix(GetActorQuat()) is ~4x faster than FRotationMatrix(GetActorRotation())

* Performance: fix perf regression in UPrimitiveComponent::MoveComponent() caused by continual FText creation.

* Performance: inline UActorComponent::GetOwner()

* Performance: Optimize FTransform::TransformVector() and FTransform::TransformVectorNoScale() to remove unnecessary work. Vectorized versions are 25% faster than before.

* Performance: Optimized CharacterMovementComponent::ApplyRepulsionForce().

* Performance: Optimized collision queries to reduce dynamic allocations in ignored component list.

* Performance: Optimized FTransform::TransformPosition() and FTransform::TransformPositionNoScale().

* Vectorized versions are now 25% faster than previous implementation.

* Performance: Optimized MovementComponents to reduce Quat<->Rotator conversions. Reduced Actor calls for rotation/location and use Component instead (saves branch).

* Performance: UPrimitiveComponent::AreAllCollideableDescendantsRelative() optimized to reduce potential dynamic allocations.

* Performance: use PhysX single-query functionality (with eANY_HIT flag) where possible. 25% speedup for RayCastTest(), GeomSweepTest(), GeomOverlapBlockingTest().

    * Renamed FPxQueryFilterCallback::bSingleQuery to bIgnoreTouches for clarity.

* Remove null entries from NonDefaultPhysicsVolumeList in UWorld::RemovePhysicsVolume() in case any are accumulated.

* Renamed UProjectileMovementComponent::HandleHitWall() to new virtual HandleBlockingHit() which has a new enum return value. Refactored Deflection/Sliding determination to new HandleDeflection() virtual.

    * UProjectileMovementComponent::HandleBlockingHit() returns an enum indicating how simulation should continue: Deflect, AdvanceNextSubstep, Abort.

    * UProjectileMovementComponent::StopSimulating() is now virtual.

* Save movement mode in CharacterMovement saved move when recording it after movement. Fixes some character network correction issues if derived classes depend on the saved movement mode.

* The FBoxSphereBounds transform functions were optimised resulting in a 32x speed up. FBox transforms were also sped up by a factor of 2.

* TryToLeaveNavWalking() is now called when DefaultLandMovementMode was NavWalking and we are trying to enter normal Walking mode.

* Turn auto weld on for shape components

* Use new OverlapBlockingTest() in MovementComponent code.

* UWorld::DestroyActor() and AActor::Destroy() prevent recursion by checking IsPendingKillPending() instead of IsPendingKill().

    * Prevents possible infinite recursion during destruction with cycles that try to destroy something marked for destruction earlier in the stack.

    * Prevents calling destruction events multiple times for the same objects when there are cycles.

    * Return value of both methods has been changed to the value of IsPendingKillPending().

* Added a helper function (ScaleByMomentOfInertia) for scaling torque by moment of inertia. This effectively does the world to local space conversion for you and scales by the inertia tensor.

* Added a 'ToString' helper function to the FHitResult struct to aid debugging collisions

* Allow querying for counts using an FBox

* Allow collection of instance transforms in provided FBox

* Added serialization support to TQuadTree

* Remove triangles with very small area when cooking collision trimesh data (area is controlled by physics settings "TriangleMeshTriangleMinAreaThreshold").

* Added 'bInitialOverlap' to BreakHitResult. Improved comments/documentation for initial overlap case.

* Delete Pawn methods IsWalking(), IsFalling(), IsCrouched(). Properly mark LaunchPawn() as deprecated in C++.

    * The deleted methods have been private and BP-deprecated since 4.0 release, and did nothing. This allows subclasses to implement functions with these names and expose them to blueprints if they wish.

    * LaunchPawn() BP function was already tagged with deprecation metadata.

* Exposed AActor::IsOverlappingActor(), UPrimitiveComponent::IsOverlappingActor(), UPrimitiveComponent::IsOverlappingComponent() to blueprints and improved comments

### Platforms

* Fixed default directory iterator assignment in FFileIterator.

* Process management has been reworked, deprecating redundant methods of FProcHandle in favor of FPlatformProcess API.

#### Android

* Added GExternalFilePath to allow access to Android getExternalFilesDir path

* Allow volume buttons to be handled by game or system with FPlatformMisc::SetVolumeButtonsHandledBySystem and FPlatformMisc::GetVolumeButtonsHandledBySystem

* Added two Blueprint nodes SetVolumeButtonsHandledBySystem and ?GetVolumeButtonsHandledBySystem in Utilities/Platform

#### iOS

* Fixed orientation determination when targeting iOS 7 or earlier

#### Mac

* A Manifest_DebugFiles.txt is now generated on Mac similar to other platforms. This contains file paths to debug and test apps built in addition to the primary (typically shipping) app.

* Added ?FApplePlatformFile::CopyFile() that differs from the generic implementation in that it also copies the file permission bits

* Added support for HasSizingFrame in window definition

* Don't report mouse move to Slate on Mac if the cursor is not over a Slate window.

* iOS SDK info is no longer printed when generating Xcode project. Generating data for project indexing uses different description as "Binding IntellliSense data" was misleading

* Mac event handling code was heavily refactored for improved stability

* Removed mouse capture code from Mac version as we no longer need it

* Simplified dylibs setting in Mac toolchain, so we use rpaths for almost everything.

* Swapped the way we treat main and key windows in Slate on Mac to be consistent with native window buttons behavior

* Add write permission to files copied with FApplePlatformFile::CopyFile() as this is what engine expects in some places

* Defer closing and releasing of FCocoaWindow objects till the next PumpMessages, so that it's done when MacApplication and Slate no longer know about them.

* Disabled server configs in Xcode projects created with binary version of the engine, as it doesn't include libs needed to build servers

* Disabled the message box in xcodeunlock script as it's not working correctly in Xcode 6.3

* Fixed file corruption caused by calling FFileManagerGeneric::Copy with dest and src paths that are the same

* Fixed FMacPlatformProcess::ExecProcess() to correctly parse double-quoted arguments like CreateProc() does. Fixed linking and running with bDebugBuildsActuallyUseDebugCRT = true

* Fixed use of custom icons and Info.plist files for Mac apps built remotely from PC

* MacApplication now enumerates and ticks IInputDeviceModule implementatations

* Use relative paths in the response file used for linking on Mac to fix the posix_spawn_failed error in non-unity builds

* Added sorting of display modes to ?FOpenGLDynamicRHI::RHIGetAvailableResolutions()

* Call TConsoleVariableData<int>::GetValueOnAnyThread in UConsole::Serialize to fix crash reporting on OS X when the crashed thread is not the game thread.

* Exempt -Wreorder from -Werror on Mac so that it doesn't break builds.

* Fixed a crash at exit in FOutputDeviceConsoleMac

* Optimized Mac ?FTextInputMethodChangeNotifier so it doesn't call expensive GetWindow() until it's really needed

* Remove an unnecessary workaround from the Mac OpenGL implementation of MapBuffer that reduced performance and was masking a bug in the ResourcePool code.

#### Playstation 4

* Added console variable 'r.PS4StallsOnMarkers' which will cause thread traces to line up with markers on RazorGPU thread trace timeline. Adds GPU overhead.

* Added extra assembly info for PS4 shaders when using r.DumpShaderDebugInfo

* Added new RHI command 'RHISubmitCommandsHint'. Hints to the driver to submit the currently accumulated GPU commands, regardless of how many commands there are.

* GNM debug libs are now linked when bEnableGnmLCUEDebug is set. Also we define LCUE validation in debug builds, and for bEnableGnmLCUEDebug.

* Added a define for ALLOW_UAV_CONDITION for multi-platform support.

* Added thread safety checks for pooled render target usage.

* Fixed a crash on PS4 when setting null texture references.

* Fixed a crash when resolving a non-rendertarget texture. Emits a warning now instead.

* Fixed a null pixel shader gnm validation error.

* Fixed SDK 2.5 to support the increased max shader resource count (32).

* Fixed sdk include_common path.

* Fixed various GNM debug assertions.

* Removed printout for benign warning in Morpheus head tracking.

#### Xbox One

* Added support for RQT_Undefined in Xbox query code. Like on Windows, this waits for the GPU to catch up.

* Enabled the linking of PIX libraries and addition of PIX labels by default in all configurations except Shipping.

* Many bug fixes and improvements to session handling in OnlineSubsystemLive, including:

* Canceling a matchmaking session is now more reliable.

* Added support for JSON objects and arrays in session settings.

* OnlineSubsystemLive now uses the new Xbox Live 2015 multiplayer APIs.

* Removed Windows only functions from the Xbox One Render Hardware Interface (RHI).

* Fixed a D3D11 reference count leak in the DECLARE_ISBOUNDSHADER macro.

#### VR

* The SteamVR plugin is now in the Runtime plugins folder rather than Experimental.

#### Windows

* Allowing for checking major AND minor version of Windows

### Programming

* Added API for getting handle of top-level window on Windows

* Added API for intercepting Windows messages

* Added FPaths method named EngineSourceDir for getting the path to the Engine's source code directory.

* Added new debug helper to draw planes with differently sized extents

* Added support for TSharedPtr<void>

* Allow locating of SCSNodes by both template and component instance name.

* Async: Added support for scheduling tasks on the queued thread pool

* Async: Added support for TAsync<void>

* Deprecated 'operator new' for UObjects. It's not safe to construct new objects using C++ operator new.

* Deprecating UProperties does not cause deprecation warnings in generated code.

* EditorUtilities::CopyActorProperties can now be used for target actors that are a subclass of the source actor.

* Exposed generic Get/SetAxisProperties accessors to UPlayerInput.

    * Deprecated UPlayer::SetMouseSensitivityToDefault and InvertMouse

    * Moved SetMouseSensitivityToDefault and InvertMouse exec functions to UCheatManager instead of UPlayerInput

* Fixed shadow variable warnings when a class has a member named Result

* FMemberReference moved out of K2Node.h and in to Engine module in MemberReference.h

* Implemented Future/Promise/Async concepts

* Inheritable component records can now be looked up via template name as well as component name.

* Optimized processing of UWorld::ComponentsThatNeedEndOfFrameUpdate by eliminating TSet hash comparison overhead

* Renamed FQueuedWork to IQueuedWork

* SessionServices: Made public headers compilable individually

* Slate's FInputGesture and Engine's FInputChord unified as FInputChord defined in Slate

* TInlineComponentArray can now have an Actor supplied to the constructor to void the need to call GetComponents on the subsequent line.

* UActorComponent now caches Owner as an optimization on GetOwner() calls.

* UBT: Enabled PrivateIncludePaths in arbitrary project sub-directories

* AActor::GetActorClass deprecated, use GetClass instead.

* AActor::UnitializeComponents is now called after AActor::EndPlay during AActor::RouteEndPlay to maintain consistent pairing of Initialize/UnitializeComponents Begin/EndPlay

* Backwards compatibility code for 4.7 component changes now gated by Object Version check

* Fix typo where unweld was iterating over asyncActor shapes but calling function on syncActor

* Fixed hundreds of warnings generated by PVS-Studio static C++ analyzer

* FStringAssetReference::TryLoad now correctly follows redirectors

* FTimerManager::FindTimer will no longer incorrectly return an invalid timer when invalid handle is passed in.

* Made some of the compiler command lines significantly shorter which should prevent strange compiler errors, especially when compiling UELinkerFixups cpp files.

* Skipped saved property warning will now only be emitted when loading from disk in cooked content.

* Specifying an instigator for a Pawn via FActorSpawnParameters will now properly be applied.

* UBT: Fixed public library path settings being ignored in build rules

* virtual BlueprintImplementableEvents do not work correctly in all cases. BlueprintNativeEvent should be used for cases where both C++ and Blueprints are expected to override the functionality.

    * In a future release this will be made a Unreal Header Tool error.

* Default AGameMode::ChoosePlayerStart implementation now uses GetDefaultPawnClassForController instead of DefaultPawnClass directly.

* Fixed occasional shutdown crash in source code navigation database (due to static destruction order)

* Fixed TComPtr internal pointers being released in wrong order

* Slight optimization to FName less than operator

### Rendering

* Added a Thickness option to DrawFlatArrow, DrawDirectionalArrow, and DrawCoordinateSystem

* Moved some shaders used by RHIs directly into the new UtilityShaders module

* Reworked shader stream out support, now works properly with FShaderResource sharing

    * GetStreamOutElements is a callback function on the shadertype, just like ModifyCompilationEnvironment

    * If GetStreamOutElements is specified, the FShaderResource includes that shader type in its ID as it can't be shared with any other shader type.

* Stationary lights with CastDynamicShadows disabled no longer do dynamic shadow setup, minor optimization

* The D3D RHI now uses a DXGI1.1 factory rather than 1.0. It still uses 1.0 interfaces.

* XGE Distributed Shader Compilation from Luke Thatcher of Lionhead Studios

* Enabled with either r.XGEShaderCompile=1 in ConsoleVariables.ini, or -xgeshadercompile command line argument

* Added an ensure to guard against setting a non-rendertarget texture as a render target.

* Fix cooking crash with atmosphere rendering.

* Fixed an issue that prevented the BlendMode from being changed on FCanvasNGonItem

* Removed dead class FFontMaterialRenderProxy

### UI

* Converted UTextRenderComponent to use FText so it can respond to live-culture updates

* Input bindings for Motion, Gesture, Android, Steam, and XBox One keys now appear in their own sub categories under Input.

* Added a fallback font when calling AHUD::GetTextSize to mirror the behavior of AHUD::DrawText

* Added support for passing in a command list when creating a details view that can be queried by customizations, allowing key-bound commands

* Updated uses of SSingleObjectDetailsPanel and SActorDetails

* Correct initialization of bMenuHiding and bMenuHidden in SGameMenuPageWidget::Construct(). Fixes issues with clicking on player name input widget in PlatformerGame.

### Slate

* The FString passthrough functionality of SLATE_TEXT_ATTRIBUTE is deprecated as of 4.8, which means that you're now going to get a deprecation warning when passing text to Slate as FString rather than FText.

* SLATE_TEXT_ATTRIBUTE was originally added as a stop-gap solution to allow all the code that was already passing text to Slate as an FString to continue to build without having to make any code changes.

* SLATE_TEXT_ATTRIBUTE provided a way for the transition between FString and FText to happen slowly, however that transition period has ended, and soon the FString support will be removed (likely by 4.10).

* Added a way for STableViewBase (and its derived types) to notify you when they are scrolled

* Added an option to create Slate window without a close button and used it for Source Control Login window, replacing a custom title bar it was using that didn't look well on Mac

* Added another column sizing mode to STableRow which allows Excel like sizing

    * EColumnSizeMode::Manual

* Added custom slate stats. See SlateStats.h for details on the new system, which allows for full hierarchical profiling with limited overhead.

* Added FTabManager::GetOwnerTab() to return the tab that owns the specified tab manager

* Added SContentPicker::OpenAssetPickerMenu to programmatically trigger the asset picker

* Added the ability to specify a minimum desired width for SViewportToolBarComboMenu

* Added tracking of the last activation time to SDockTab instances

* Added warnings for when FSlateFontInfo is created with a null font, or a font that can't provide a valid composite font

    * This also stops offline (bitmap) cached fonts from reporting that they're able to provide a composite font (they can't).

    * This makes it clearer when Slate will be forced to use the fallback font path, which may not always be as fast as the standard font path.

* Exposed a variant of SWidget::FindChildUnderMouse that takes the position to check directly instead of a pointer event

* Slate is now able to "sleep" when there is no user input and no widgets need to update. While sleeping, the entire Tick/Paint pass is skipped. This can be useful for those running the editor on battery power.

    * This is currently only relevant to Slate widgets used in the editor (in-game Slate should still be ticked every frame as before)

    * Any widget can prevent Slate from sleeping by registering an "Active Timer." Whenever an active timer needs to execute, Slate will tick/paint that frame (even in the absence of user input)

    * The active timer portion of the system is active at all times, but sleeping can currently be disabled prevented by typing "Slate.AllowSlateToSleep 0" in the console

* WebBrowser: Converted OnTitleChanged delegate to an event

* Changed SFxWidget's HAlign and VAlign attributes to arguments to match how they were actually used.

* Fixed an issue where STableRow::GetContent would always return SNullWidget when the content was set via SetWidget

* Fixed memory leaks caused by Slate holding onto UTexture references for too long.

* Fixing STableRow to properly return the handled result on the new OnAcceptDrop handlers.

* Hittest grid no longer discards the entire event path when a single widget in that path is broken. Instead, it returns a truncated path from root.

* If the widget asking for mouse capture is completely gone (including the entire path to that widget) do not crash; ensure instead.

* mproved SWizard styling compatibility (now obeys text style on Next/Back buttons, and uses the success style on Next)

* InsertsSlots funcs default to AddSlot if no index is specified

* List view should not attempt to scroll if that would lead outside scroll range. This check is performed only if overscroll is not allowed.

### UMG

* Adding a reference implementation of a web browser wrapper around the SWebBrowser Slate widget to the WebBrowserAsPlugin module.

* Adding an experimental wrapper for SRichTextBlock. A lot of work remains for supporting links and images but this will serve as a nice starting point.

* Adding ExpandableArea as an experimental widget, demonstraits how you can use the named slot interface on a non-user widget to provide multiple slots, but not N slots like a normal panel.

* It's now easier to provide settings to the Editor. If you derive from UDeveloperSettings, but otherwise have all the typical config related metadata for the class your settings will automatically be registered with the editor. This avoids needing to make a plugin or editor module just to register your settings class for your game.

* Exporting 3 blueprint function libraries UMG exposes to be linkable from C++ DLL

* Now using IsBindableEvent="True" for widgets that expose bindable single cast delegates. Using the old trick of scanning for ones ending with "Event", will eventually stop working.

## Upgrade Notes

### Programming

* Shadow variable warnings enabled.  Almost all shadowed variables have been eliminated from the UE4 source and shadow variable warning has been enabled.

    * Currently enabled when building for Mac, Linux, iOS, HTML5, and Windows using clang. Android and PS4 should be enabled in 4.9. Windows with visual studio should come with Visual Studio 2015 support.

    * While enabled by default, each module can disable the warnings by adding bEnableShadowVariableWarnings = false; to the .Build.cs file for the module.

    * If you need to disable the warning for just a specific section of code or the includes from a third-party library you cannot modify you can wrap the code with PRAGMA_DISABLE_SHADOW_VARIABLE_WARNINGS and PRAGMA_ENABLE_SHADOW_VARIABLE_WARNINGS

### Navigation

* Since we had to replace bRebuildAtRuntime boolean property with a new enum, you should update navigation rebuild settings in your project configuration.

### Animation

* If you have any Anim Blueprint derived from either of those classes, it won't work.

### Automation

* Running automation tests through command line for larger projects may take longer before the tests are triggered.

### Blueprints

* Users may be required to select the top most comment node in a nested to set once in order to fix older blueprints that have persistent comment selection issues

### Core

* Standardised naming convention for class used to managed memory operations, the same names for template and pointer based functions

    * MemSet replaced with Memset

    * MemZero replaced with Memzero

    * MemCopy replaced with Memcpy

* Hot reload uses special empty auto-generated constructors to obtain virtual table pointers from UObjects and to avoid re-constructing subobjects when creating temporary objects after loading the recompiled DLL but before the classes have been regenerated. This implies the requirement that all member variable types are default constructible.

    * The signature of the new constructor is UMyClass::UMyClass(FVTableHelper& Helper) and it can be manually defined in the header file to initialize all member variables that are not default-constructible

    * Auto-generation of the new constructors can be disabled by defining WITH_HOT_RELOAD_CTORS macro to 0 and setting [Core.System] UseVTableConstructors to False in BaseEngine.ini.

    * Note that disabling this feature may result in crashes when performing hot reload.

* We're planning to enable async loading thread by default in future releases so it's a good time to start looking through gameplay C++ code to make sure that all UObject-derived class constructors, as well as all overrides of UObject::Serialize and UObject::PostInitProperties functions are thread-safe.

    * The most common pitfall is accessing global managers (singletons) from those functions without guaranteeing thread safety of the operations performed on them.
	
	![image alt text](image_63.png)

    * Another common issue is accessing static or global variables from constructors and/or changing their value.
	
	![image alt text](image_64.png)

    * One should also be careful about accessing any objects not owned by the object currently being constructed/serialized as these operations can be performed simultaneously from multiple threads.
	
	![image alt text](image_65.png)

    * It's also dangerous to hold references to objects not owned by the currently constructed/serialized object on the stack (inside of a function) without referencing it through a UProperty or surrounding the scope of the function where they are used with FGCScopeGuard object.
	
	![image alt text](image_66.png)

### Editor and Tools

* Any project defaults for EditorUserSettings will no longer apply. Please rename any (Default)EditorUserSettings.ini configs to (Default)EditorPerProjectUserSettings.ini

    * On loading 4.8 for the first time, we will migrate the first loaded project's editor layout and keybindings to the default location. These settings will then be common to all projects.

### Content Browser

* The named FExtender sections in the Content Browser Filters menu have been replaced by the added ability to register new advanced asset categories.

### Cooker

* Games supporting DLC will now receive a warning when engine content is accessed during cooking if they disable Include Engine Content.  This setting is enabled/disabled in the Release / DLC / Patching Settings from within Unreal Frontend.

### Gameplay Framework

* Loading savegame files from previous versions may cause crashes in some instances. If you encounter this, the easiest solution is to delete your savegames (located in MyProject/Saved/SaveGames). If you wish to try and recover this data, look for the "Note for 4.8 and beyond" comment in LoadGameFromSlot for instructions on how to temporarily modify your code to enable loading of old data, so you can then resave in the new version.

### Localization

* Various localization configuration script settings have been renamed or no longer attempt to silently interpret ambiguous values.

### Networking

* Double check for any overloaded uses of these functions and make sure the signatures match.

### Online

* The GameInstance class now automatically subscribes to the OnSessionUserInviteAccepted delegate, and GameInstance::OnSessionUserInviteAccepted can be overriden for custom handling of accepted invites.

### Paper2D

* Paper2D importing / sprite creation settings have been moved to a new location in Project Settings .. Paper2D - Import.

    * Old default settings are not carried across, any custom settings for materials or pixels/uu will need to be reapplied but this change will not affect any existing assets

    * The default pixels per unreal unit setting for Paper2D assets has been changed to 1.0, so if you create new sprites and they are at an unexpected scale to existing ones in your project, this should be the first thing to check (the previous default was 2.56 in the engine or 1.28 in 2D templates). It can be configured in the project settings as well.

### Physics

* The new 6 degrees of freedom encompasses the old LockedAxis behavior. The properties have been renamed accordingly.

### Platforms

#### Android

* If using a custom AndroidDeviceProfileSelectorModule, the new Android profiles in this version should be added to handle proper compatibility fallbacks

#### Playstation 4

* The .ini heading and setting names for Morpheus have changed, so existing settings will not work. Please use the new settings in PS4 ProjectSettings to set them up.

#### Xbox One

* Any custom modification of AppxManifest templates will need to be migrated to configuration settings.

* Existing AppxManifest templates will be ignored in favor of manifests generated from configuration settings.

    * Any custom modification of AppxManifest templates will need to be migrated to configuration settings.

    * Several common settings can be modified in the Project Settings within the Editor.

    * Settings that are not yet available in the Editor must be applied by editing INI files.

    * Look in Engine\Config\XboxOne\XboxOneEngine.ini and Samples\Games\ShooterGame\Config\XboxOne\XboxOneEngine.ini for examples of how to configure these settings.

#### VR

* Older projects may still need to manually enable the GearVR plugin.

#### Programming

* See FWindowsApplication::AddMessageHandler()

#### Rendering

* if your project was previously configured in this way then you may wish to uncheck an orientation in order to avoid unwanted orientation changes.

* Previous behavior would mean that a single orientation was used even if multiple orientations were checked.

    * if your project was previously configured in this way then you may wish to uncheck an orientation in order to avoid unwanted orientation changes.

#### Lighting

* Lighting done in the bass pass does not properly use the new shading model yet. All dynamic lighting does: deferred direct lights, ambient cubemap, and dynamic skylight.

### Postprocessing

* Best to use SSAO defaults settings as older settings might not look as good. New method isn't as good with small SSAO radius but we intend to improve that again

### Optimizations

* Check to see if your SpeedTrees need to change to use the new 'BestPlus' configuration.

### Slate

* Any existing custom editor widgets that rely on Tick() to be called should be updated to use active timers instead that register only when the tick is required.

* Note that if any realtime viewport is visible, Slate cannot go to sleep. To take advantage of the system, make sure that viewports are not realtime.

    * Any existing custom editor widgets that rely on Tick() to be called should be updated to use active timers instead that register only when the tick is required.

### UMG

* If you have been using UMG for a static image load screen between full level transitions those will no longer work. Using UMG for loading screens when using level streaming will continue to work.

### C++ API Changes

* Various fixes to the in-game / in-editor screenshot facility:

    * The OnPNGScreenshotCaptured delegate was removed as all screenshots are now saved as pngs.

* Removed deprecated file Media.h

    * Instead of Media.h, include the individual header files in the Media module that you actually use

* Allowing message handlers to decide for themselves whether they want to handle a message; documentation updates.

    * If one of your classes implements IMessageHandler, you must remove GetHandledMessageType() and instead verify the type of message in HandleMessage(). See TMessageHandler<> for details.

* Refactored IMessageHandler.h so that it doesn't have header dependencies

    * Default message handler implementations have been moved into MessageHandlers.h

* Allowing for checking major AND minor version of Windows

    * You must rename your usages of VerifyWindowsMajorVersion() to VerifyWindowsVersion() and pass a second parameter for the minor version number (pass '0' to check for Windows Vista, as before).

* Removed AutoPlay feature in MediaPlayer assets.

    * The AutoPlay feature turned out to be quite dangerous, because it causes media playback to start as soon as a MediaPlayer is loaded, thus consuming resources even if it is not used anywhere. Media should be played and stopped on demand using Blueprints (MediaPlayer.Play) or C++ instead.

* Slate is now able to "sleep" when there is no user input and no widgets need to update. While sleeping, the entire Tick/Paint pass is skipped. This can be useful for those running the editor on battery power.

    * FCurveSequence now requires that a Slate widget be provided to it and all Active Timer registrations are handled automatically on behalf of that widget. While the curve sequence is playing, Slate will not sleep.

* Various Actor and SceneComponent methods that use FRotator now have overloads taking rotation as an FQuat (Quaternion).

    * In rare cases where virtual methods using FRotator could be overridden, there are now non-virtual overloads that forward to a single virtual implementation.

        * This ensures derived versions override the version that will be used by engine code.

        * Make sure to call the correct Super function in overrides if currently using it, since the overridden function may have been renamed.

* MovementComponent refactored to add overloads using FQuat in addition to FRotator.

    * Some virtual methods have been changed and overrides will need to be updated.

        * Make sure to call the correct Super function in overrides if currently using it.

* Making a large pass and fixing all the places properties were incorrectly set to EditDefaultsOnly, they should have been set to EditAnywhere.

    * Removing some old functions from UWidget for gathering children widgets that didn't perform all the correct logic. You should use the WidgetTree's functions for traversing the tree.

* Made most variables in UPaperTileLayer private

    * C++ code that directly accessed member variables of UPaperTileLayer will need to be updated to use the accessor methods

* Made members of UPaperTileSet private and added accessors

    * Any existing code that directly accessed the members of UPaperTileSet will need to be updated to use the accessors instead

* Removed BlueprintReadWrite from FPaperTileInfo members, opting instead for friendlier make/break functions (since the index contains packed flags)

    * Blueprints that directly acessed PackedTileIndex or TileSet from a FPaperTileInfo struct will need to be updated to use a break or make node instead

* Deprecated GEditor->SetActorLabelUnique and GEditor->SplitActorLabel. Please replace calls with the static methods FActorLabelUtilities::SetActorLabelUnique and FActorLabelUtilities::SplitActorLabel

* GameplayCueActor and GameplayCueView have been deprecated and removed in favor of GameplayCueNotify_Actor

* Added support for extension-less streaming media URI schemes

    * IMediaModule::GetSupportedFormats() has been renamed to IMediaModule::GetSupportedFileTypes(); FMediaFormats has been renamed to FMediaFileTypes; IMediaPlayerFactory::GetSupportedFormats() has been renamed to IMediaPlayerFactory::GetSupportedFileTypes(); IMediaPlayerFactory::SupportsFile() has been replaced with IMediaPlayerFactory::SupportsUrl(), which must now be implemented by media plug-ins

* Updated revision display to display strings rather than revision indices

    * Added new pure virtuals ISourceControlProvider::UsesChangelists(), ISourceControlState::FindHistoryRevision(const FString&) and ISourceControlRevision::GetRevision().

* Game Mode features were exposed to Blueprints

    * The following functions, if overriden in any AGameMode subclass will now require overriding the _Implementation version:

        * ReadyToStartMatch, ReadyToEndMatch, ShouldReset, MustSpectate, GetDefaultPawnClassForController, InitStartSpot, SpawnDefaultPawnFor, CanSpectate, FindPlayerStart, ChoosePlayerStart, PlayerCanRestart

* GraphEditor: Refactored connection drawing policy API to be more flexible

    * Any editor plugins that contain a FConnectionDrawingPolicy subclass will need to update calls to DrawSplineWithArrow, DrawConnection, and DetermineWiringStyle to match the new signature that takes a FConnectionParams structure

* Tidied up some old localization code by removing the following: PPF_LocalizedOnly, CPF_Localized, CLASS_Localized, UProperty::IsLocalized.

    * Any code which uses PPF_LocalizedOnly, CPF_Localized, CLASS_Localized or UProperty::IsLocalized will no longer compile and should be removed. The Localized specifier should be removed from any UPROPERTYs.

* Removed MaxReadBytes from UProperty::SerializeItem, UStruct::SerializeBin and FPropertyTag::SerializeTaggedProperty, as it was unused.

    * The signatures of UProperty::SerializeItem, UStruct::SerializeBin or FPropertyTag::SerializeTaggedProperty have changed.

* Deprecated CanConvertPointerFromTo as it did not honor const qualifiers nor follow the naming conventions of other template metafunctions.

    * Any use of CanConvertPointerFromTo will throw deprecation warnings.

* Changed FColor, FVector, FTimespan etc. from 'class' to 'struct', as they were defined as C++ classes but also as USTRUCTs, which caused UnrealHeaderTool to generate bad forward declarations.

    * Forward declarations of FColor, FVector, FTimespan etc. as classes will generate Visual C++ warnings like "type name first seen using 'struct' now seen using 'class'".

* Changed the Exchange function to use Memswap in all cases, as this was an assumption used by a lot of code.

    * This may break types which are not trivially-swappable, but have well-defined move constructors. These should be rare, if any exist at all.

* Fixed ranged-based iteration over FString so that it no longer returns the null terminator.

    * Code which relies on there being a zero TCHAR character during doing a ranged-based for loop may fail.

* Removed PLATFORM_COMPILER_HAS_RANGED_FOR_LOOP, as all UE4 supported compilers have it.

    * Any code which tests for PLATFORM_COMPILER_HAS_RANGED_FOR_LOOP may get skipped.

* Added heterogeneous comparison support to TArray::Contains, so that you can now find elements by any type which is comparable to the array element type, even if it's not convertible, e.g. searching a TArray<AActor*> for a UObject*.

    * Existing calls to TArray::Contains may fail if your comparison type is implicitly convertible to the array element type, but does not have an operator== which compares those two types.

* Deprecated TArray::Init(int32 Number), as its name did not suggest that the array elements would be uninitialized.

    * Calling TArray::Init(int32 Number) will now cause deprecation warnings.

* Removed PLATFORM_COMPILER_HAS_RVALUE_REFERENCES, as all UE4 supported compilers have it.

    * Any code which tests for PLATFORM_COMPILER_HAS_RVALUE_REFERENCES may get skipped.

* Improved much of TMap's implementation, by removing redundancy, adding extra compile time error checks and improving encapsulation.

    * One of the template parameters of TMap has been removed. TMapBase is no longer instantiable on its own.

* Changed UStruct::SuperStruct to be a private field to prevent accidental modification, as these would invalidate the new and improved UObject::IsA code.

    * Any derived classes which accesses SuperStruct will no longer compile.

* Cooked builds will use a dedicated thread for package streaming instead of using time-slicing approach. This way streaming code can utilize full frame time for constructing and pre-loading asset objects resulting in up to 3 times faster streaming times.

    * Linkers are no longer UObjects. Renamed ULinker, ULinkerLoad and ULinkerSave to FLinker, FLinkerLoad, FLinke]rSave respectively.

* Exposed generic Get/SetAxisProperties accessors to UPlayerInput.

    * Deprecated UPlayer::SetMouseSensitivityToDefault and InvertMouse

* Fixed shadow variable warnings when a class has a member named Result

    * Custom thunk blueprint function implementations that return a result need to use RESULT_PARAM instead of Result.

* Deprecated 'operator new' for UObjects. It's not safe to construct new objects using C++ operator new.

    * UObjects can't be created using C++ operator new

* virtual BlueprintImplementableEvents do not work correctly in all cases. BlueprintNativeEvent should be used for cases where both C++ and Blueprints are expected to override the functionality.

    * A number of previously virtual BlueprintImplementableEvent functions have had virtual removed in favor of existing virtual functions intended for overriding C++ behavior:

        * UActorComponent::ReceiveBeginPlay -> BeginPlay

        * UActorComponent::EndBeginPlayer -> EndPlay

        * APlayerCameraManager::BlueprintUpdateCamera -> UpdateViewTargetInternal

        * UGameInstance::ReceiveInit -> Init

        * UGameInstance::ReceiveShutdown -> Shutdown

        * AActor::ReceiveBeginPlay -> BeginPlay

        * AActor::ReceiveAnyDamage/ReceiveRadialDamage/ReceivePointDamage -> TakeDamage

        * AActor::ReceiveTick -> Tick

* AActor::GetActorClass deprecated, use GetClass instead.

* Slate's FInputGesture and Engine's FInputChord unified as FInputChord defined in Slate

    * Slate's FInputGesture and Engine's FInputChord unified as FInputChord defined in Slate

        * FInputGesture deprecated, use FInputChord instead.

        * Where previously including "InputGesture.h", include "InputChord.h" instead

        * Where previously including "InputComponent.h" to access FInputChord, include "InputChord.h" instead.

* Renamed FQueuedWork to IQueuedWork

    * Existing usages of FQueuedWork must be renamed to IQueuedWork

* Renamed ITlsAutoCleanup to FTlsAutoCleanup (it's not a [non-virtual] interface)

    * Existing usages of ITlsAutoCleanup must be renamed to FTlsAutoCleanup

* You can now have more than one Unreal class (UCLASS) in a single C++ header file! No additional work required, just define additional UCLASS and it should work!

    * Please keep in mind that this feature also changes reflected types path, so they are no longer subobjects of UCLASS declared in the same file. Now all reflected types are children of the package they are contained in. In other words when old path was /Script/PkgName.UClassName:UStructName, now it will be /Script/PkgName.UStructName. We have left the code that should compensate this change, but please be warned as we might have missed something.

    * Fixed cooked projects showing default materials when shaders have compile correctly.

    * Caused by race condition in saving cooked packages before they have finished compiling.
