INTSourceChangelist:3011129
Availability: Public
Title: 动画系统概述
Crumbs: %ROOT%, Engine, Engine/Animation
Description: 骨架网格体的动画数据系统，蓝图，混合空间，动画序列的概述。

[TOC(start:2 end:2)]


[EXCERPT:Intro]
**虚幻引擎 4** （**虚幻 4**）的动画系统能对骨骼网格物体进行深度设定，以便服务于游戏角色的需要。
在这篇文档中，提供了关于虚幻 4 的动画系统如何工作的概要说明，以及关于使用这套动画系统的基础知识。

对网格物体进行骨架的绑定，结合对顶点数据的变形（Morph）的 **动画** 系统能够执行复杂的动画计算。
这套系统能够完成从最基础的移动行为，到根据游戏过程混合预制的动画序列来获得真实的动画效果，
比如使用动画蒙太奇（AnimMontage）来计算在窗台上移动或者墙上行走的动画表现，
或者配合受伤效果以及利用 MorphTarget 显示面部表情，又或者通过 SkeletalControl 直接控制骨骼变形。
[/EXCERPT:Intro]

这篇文档的目的是提供一个虚幻 4 动画系统的概述，主要是面向刚刚开始使用虚幻 4 的动画系统的人员。这并不是虚幻 4 引擎动画系统和动画资源的完整手册。
可以把这个文档看作为帮助熟悉动画系统一些方面的入门说明，解释了几个不同的部分是如何协同工作的，并展现这个动画系统的灵活性以及可以基于这个灵活性完成的强大效果。

我们先来定义虚幻 4 的动画系统中主要的术语和概念。

(#Skeleton)
[OBJECT:IconSection]
	[PARAM:icon]
		[![](PersonaIcon.png)(w:192)](Engine/Animation/Persona)
	[/PARAM]
	[PARAM:title]
		[Persona](Engine/Animation/Persona)
	[/PARAM]
	[PARAM:description]
	[INCLUDE:Engine/Animation/Persona#Intro]

	[/PARAM]
[/OBJECT]



[OBJECT:IconSection]
	[PARAM:icon]
		[![](SkeletonImage.png)(w:192)](Engine/Content\Types\SkeletalMeshes)
	[/PARAM]
	[PARAM:title]
		[骨架 Skeleton](Engine/Content\Types\SkeletalMeshes)
	[/PARAM]
	[PARAM:description]
		**骨架（Skeleton）** 是一组由骨骼的位置和旋转角度组成的树状结构，供支撑骨架网格体（SkeletalMesh）。在虚幻 4 中，骨架从骨架网格体中单独抽象了出来，保存为单独的资源形式。这里的意思是，动画数据是应用到骨架上的，而不是骨架网格体上。对于使用同样骨架的多个骨架网格体来说，它们可以共享使用动画数据。
	[/PARAM]
[/OBJECT]

[OBJECT:IconSection]
	[PARAM:icon]
		![](AnimSequenceIcon.png)
	[/PARAM]
	[PARAM:title]
		[](Engine/Animation/Sequences)
	[/PARAM]
	[PARAM:description]
		[INCLUDE:Engine/Animation/Sequences#Intro]
		

		
		**附加动画 Additive Animation**
		
		在任意时刻，动画都可以作为完全动画或者附加动画来使用。系统会在需要的时候基于偏移来计算出一个合适的位置。这使得现在的实现方式比以前老的引擎版本更加灵活，和以前不同，不再需要定义一个动画作为附加动画的的预留时间。
		
		**混合动画 Blending Animations**
		
		通过使用 [](Engine/Animation/NodeReference/Blend) 和 [](Engine/Animation/Blendspaces)，不同的动画可以混合在一起来达到一个更为丰富的最终姿势。举个例子，一个跑步的动画，可以和一个瞄准的姿势混合，或者和一个面部表情动画混合，来达到一边跑步一边举枪瞄准，或者一边跑步一边说话的最终效果，并且在这种效果下，几个原始动画数据仍然是各自独立的。这样子能够在各种不同情形下对单个原始动画重复利用。

		**动作姿势 Animation Poses**

		一个姿势可以理解为骨架的一个快照，包含了所有骨骼的位置和旋转信息。可以把姿势理解为一个动画播放时的暂停状态。比如可以暂停一个跑步动画，可能看到的就是这个样子：

		![](AnimationPose_Running.png)(w:600)

		这里看起来就像是整个网格体，也就是它底下的骨架，摆了一个姿势。骨架中每个骨骼的空间信息决定了实际上看到的动作姿势。

		有些动画序列是故意被设计成一个姿势。比如，可能有一系列只有 1 帧或者 2 帧的动画序列，每个序列定义了一个姿势。以下这个姿势就是一种这类的动画数据，设计这个姿势是用于控制玩家举枪瞄准时眼睛看的方向。

		![](AnimationPose_Aiming.png)(w:600)

		动画系统在 AnimGraph 中会使用动作姿势这个概念。由 AnimationSequence，Blendspace 或者最简单的混合节点输出的都是动作姿势，或者叫当前时刻的动画快照，并将这个动作赋予骨架网格体。

		**组件 vs 局部空间**

		[INCLUDE:Engine/Animation/NodeReference/SpaceConversion#intro]

		**Morph Targets**

		[INCLUDE:Engine/Content\FBX\MorphTargets#Intro]
	[/PARAM]
[/OBJECT]

[OBJECT:IconSection]
	[PARAM:icon]
		![](ParticleEffectNotify.png)(w:192)
	[/PARAM]
	[PARAM:title]
		[](Engine/Animation/Sequences/Notifies)
	[/PARAM]
	[PARAM:description]
		[INCLUDE:Engine/Animation/Sequences/Notifies#Intro]
	[/PARAM]
[/OBJECT]


[OBJECT:IconSection]
	[PARAM:icon]
		[![Vim Blueprint](Engine/Animation/AnimBlueprints/EventGraph/eventgraph_thumb.png)(w:192)](Engine/Animation/AnimBlueprints)
	[/PARAM]
	[PARAM:title]
		[](Engine/Animation/AnimBlueprints)
	[/PARAM]
	[PARAM:description]
		[INCLUDE:Engine/Animation/AnimBlueprints#Intro]

		
	[/PARAM]
[/OBJECT]

[OBJECT:IconSection]
	[PARAM:icon]
		[![Blendspace](Engine/Animation/Blendspaces/edit.png)(w:192)](Engine/Animation/Blendspaces)
	[/PARAM]
	[PARAM:title]
		[](Engine/Animation/Blendspaces)
	[/PARAM]
	[PARAM:description]
		[INCLUDE:Engine/Animation/Blendspaces#Intro]
	[/PARAM]
[/OBJECT]

[OBJECT:IconSection]
	[PARAM:icon]
		[![](MontageIcon.png)(w:192)](Engine/Animation/AnimMontage)
	[/PARAM]
	[PARAM:title]
		[](Engine/Animation/AnimMontage)
	[/PARAM]
	[PARAM:description]
		[INCLUDE:Engine/Animation/AnimMontage#Intro]
	[/PARAM]
[/OBJECT]

[OBJECT:IconSection]
	[PARAM:icon]
		[![SkelControl](Engine/Animation/NodeReference/SkeletalControls/skelcontrol.png)(w:192)](Engine/Animation/NodeReference/SkeletalControls)
	[/PARAM]
	[PARAM:title]
		[](Engine/Animation/NodeReference/SkeletalControls)
	[/PARAM]
	[PARAM:description]
		[INCLUDE:Engine/Animation/NodeReference/SkeletalControls#Intro]
	[/PARAM]
[/OBJECT]


<!--
[OBJECT:IconSection]
	[PARAM:icon]
		[![](StateMachines.png)(w:192)](Engine/Animation/StateMachines)
	[/PARAM]
	[PARAM:title]
		[](Engine/Animation/StateMachines)
	[/PARAM]
	[PARAM:description]
		[INCLUDE:Engine/Animation/StateMachines#Intro]
	[/PARAM]
[/OBJECT]
-->


## System Breakdown

The following is a simple breakdown of where certain parts of the animation system are created and edited.

[REGION:raw]
![](CreationDiagram.png)
[/REGION] 

This diagram illustrates the flow and ownership of data for a typical animated character in Unreal.

[REGION:raw]
![](AnimationDiagram.png)
[/REGION] 

## Animation Content Examples

A practical application of the animation system and its features are on display inside the [Animation Content Examples](Resources\ContentExamples\Animation) page. 

Here you will be able to follow along by looking at bite-sized examples of each feature along with additional details. 

For more information on Content Examples and how to use them, refer to the [Content Examples Overview](Resources\ContentExamples) page. 


## Animation Debug Features

Debug features can be accessed by pressing the **`** key to bring up the console while in play mode. 

### Rendering Skeletal Mesh Bones

![](AnimationShowDebugBones.jpg)(h:320)

To display the Skeletal Mesh Bones, enter the `ShowDebug Bones` command inside the console. As seen in the image above the bones are represented by individual white lines. 

The `ShowDebug Bones` command will display the information for the playable character during a play session. To view the debug animation for another character (other than the player character), you can use the `viewactor ExampleCharacterID` command, where _ExampleCharacterID_ refers to the Character ID assigned to the character you wish to view. You can find this ID by hovering over a character in the [World Outliner](Engine/UI/LevelEditor/SceneOutliner) which will display its ID name. 

[REGION:note]
At this time when using the `viewactor` command, the camera will be moved to and locked on the Actor you are currently viewing. If you need to manipulate the camera while debugging still, a work around for this is to create a [Play in Editor](Engine/UI/LevelEditor/InEditorTesting) session with more than one player from the dropdown menu using one window for debugging and the other for controlling a player character. 
[/REGION]

An alternative look, matching the bones displayed in Persona, can be enabled by entering the `ShowDebugToggleSubCategory 3DBones` command inside the console. 



### Animation Debug Output

![](AnimationShowDebugToggle.jpg)

The **Animation Debug Output** information can be enabled by using the `ShowDebug Animation` command inside the console. 

The information displayed is split up into 5 sections, each of which can be toggled on and off using the `ShowDebugToggleSubCategory` command followed by the category name listed below (e.g. `ShowDebugToggleSubCategory SyncGroups`). 

| Button | Description |
|-------|------|
| **SyncGroups** | Displays the animation assets currently contributing to the final pose, organized by their sync group (or Ungrouped if they do not belong to a group). By default Blendspaces listed in this section show all their contributing animations/weights. To reduce screen space used by the output this can be toggled off with `ShowDebugToggleSubCategory FullBlendspaceDisplay`. |
| **Montages** | Lists the montages currently being used by the character. The active montage is highlighted in green. |
| **Curves** | Lists the curve values (in Name: Value pairs) that have been activated by the playing animation(s). |
| **Notifies** | Display any notify states that are currently in effect. |
| **Graph** | Displays the active pose graph. The display starts with the last node (the root node) which represents the final pose and goes on to list all the nodes that go into making that final pose. Nodes are represented in such a way as to keep their hierarchy, allowing the user to see which nodes are connected to what without having to refer to the original Blueprint asset. Active nodes are colored green and (if they have been toggled to display using `ShowDebugToggleSubCategory FullGraph`) inactive nodes are colored grey. |