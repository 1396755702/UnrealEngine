Availability:Public
Title:Blueprint Communication Usage
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/UserGuide
Description:Overview of when to use different methods of Blueprint Communications. 

[VAR:Topic]
[OBJECT:Topic]
	[PARAM:image]
		![%Engine\Blueprints\UserGuide\BlueprintCommsUsage:title%](Engine\Blueprints\UserGuide\bp_comms_topic.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine\Blueprints\UserGuide\BlueprintCommsUsage:title%
	[/PARAM]
	[PARAM:description]
		%Engine\Blueprints\UserGuide\BlueprintCommsUsage:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine\Blueprints\UserGuide\BlueprintCommsUsage]
	[/PARAM]
[/OBJECT]
[/VAR]

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Engine\Blueprints\UserGuide\BlueprintCommsUsage:title%](Engine\Blueprints\UserGuide\bp_comms_topic.png)
	[/PARAM]
	[PARAM:icon]
	[/PARAM]
	[PARAM:title]
		%Engine\Blueprints\UserGuide\BlueprintCommsUsage:title%
	[/PARAM]
	[PARAM:description]
		%Engine\Blueprints\UserGuide\BlueprintCommsUsage:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Engine\Blueprints\UserGuide\BlueprintCommsUsage]
	[/PARAM]
[/OBJECT]
[/VAR]




[TOC(start:2 end:2)]

## Overview

When you are working with a **Blueprint**, you may sometimes find that you want to access the Functions, Events, or Variables that are contained in another **Blueprint**. Referred to as **Blueprint Communication** there are several methods in which you can access and communicate between multiple **Blueprints** depending upon your needs.

Outlined below are the different methods of communication and sample use cases, refer to the links in each section for further documentation. 

## Direct Blueprint Communication

![](Engine\Blueprints\UserGuide\BlueprintCommsUsage\BPComHowTo\2_9.png)

**Direct Blueprint Communication** (or **Blueprint Comms**) is the most common method of communication and is excellent when you have two **Blueprint Actors** that you know you want to have talk to each other at a certain point. 
	
This type of communication is always one-to-one, meaning one Blueprint (referred to as the **Working Blueprint**) is requesting to access another Blueprint (referred to as the **Target Blueprint**). The simplest way to use **Blueprint Comms** is to get a reference to the **Target Blueprint** through a publicly exposed object variable and then specify which instance of that Blueprint you want to access.

Refer to [](Engine\Blueprints\UserGuide\BlueprintComms) for more detailed information. 

### When to Use It...

Below are some examples when you might use **Blueprint Comms**: 
	
*	**You have an Actor in your level that you want to communicate with another Actor in your level.**
	*	Interacting with a switch in your level opens a specific door or turns on a specific light (each of which are separate Blueprints). 

Refer to [Setting Up Direct Blueprint Communications](Engine\Blueprints\UserGuide\BlueprintCommsUsage\BPComHowTo#directblueprintcommunications) for a walk through of how to set one up. 

## Blueprint Casting

![](Engine\Blueprints\UserGuide\BlueprintCommsUsage\BPComHowTo\Event6.png)

The Direct Blueprint Communication method above works well for communicating with two Actors placed inside your level, as you can select the instance in the level that will be the **Target Blueprint**. However, what if you want to communicate between an Actor in a level and a player character? Or, what if you want to access information inside an Actor and the Actor itself is a variable (for instance, affect the Actor that enters a fire you have placed in your level differently depending upon the Actor that enters it). 

Taking the player character example, suppose you want the player to take damage when they enter fire that is placed in your level. Since we want to apply damage to the player, the player character Blueprint would be the **Target Blueprint** we want to access, however we cannot specify it as the "target" as it is not a publicly exposed object variable and it does not exist in the world until we start the game. 

In this situation we could use **Blueprint Casting** to take the playable character and **Cast To** our **Target Blueprint** (Character Blueprint), or in other words, **treat as X** where X is the **Target Blueprint** we want to gain access to. 

### When to Use It...
	
Here are a few examples when you could use **Blueprint Casting**: 

[EXCERPT:Castusage]
*	**You have a character interact with an Actor in your level and in turn causes a change to the character in some way.**
	*	Player picks up a health pack in the level, restoring health in the player character. 
	*	Enemy walks in snow or mud, causing their movement speed to slow down. 
*	**You want to pass variables to a HUD or UI Widget, Save Game, Controller, or Game Mode.** 
	*	Passing player or enemy health from a Character Blueprint to a HUD or Widget Blueprint to display the value on screen. 
	*	Passing variables (current health or energy, money, items, or abilities) to a Save Game Blueprint so that they can be restored later. 
*	**You have multiple Blueprints which are children of another Blueprint and you want to access one of the children.**
	*	You have Cat, Dog, and Bird Blueprints which share functionality from an Animal Blueprint. Using the Animal Blueprint, you **Cast To** the Bird Blueprint to execute a "Flying" function. 
*	**You have a Blueprint that is dependent on another Blueprint's Variables, Events, or Functions.** 
	*	Plugging a battery into a flashlight turns on the light and the intensity of the light is determined by a value in the battery. 
*	**You want to access multiple Blueprints of the same class and modify them all the same way at once.**
	*	You have several lights in your level and you want them all to turn on or off when an event occurs. 
[/EXCERPT:Castusage]

Refer to [Setting Up Blueprint Casts](Engine\Blueprints\UserGuide\BlueprintCommsUsage\BPComHowTo#blueprintcasting) for a walk through of how to set one up. 
	
## Event Dispatchers

![](Engine\Blueprints\UserGuide\BlueprintCommsUsage\BPComHowTo\InterfaceExample2_7.png)

By binding one or more Events to an **Event Dispatcher**, you can cause all of Events that are bound to the dispatcher to fire once the **Event Dispatcher** is called. 

For example, inside the player character Blueprint you create an **Event Dispatcher** called "SpawnEnemy" and it is executed when the player presses the **F** key. Inside your level you place several spawn points from which an enemy can spawn, then in the Level Blueprint you bind the SpawnEnemy **Event Dispatcher** from the character Blueprint with an Event in the Level Blueprint called "ExecuteSpawn" that randomly chooses a spawn location and spawns an enemy. 

Whenever the player presses the **F** key, the **Event Dispatcher** is called and since it is bound to the "ExecuteSpawn" Event in the Level Blueprint, that Event is also called resulting in an enemy being spawned. 

Refer to [](Engine/Blueprints/UserGuide/EventDispatcher) for more detailed information. 

### When to Use It...
 
The examples below would be a case where an **Event Dispatcher** could be used: 

*	**You want to communicate from your character Blueprint to your Level Blueprint.**
	*	Your player character levels up and you want to open a previously locked area. 
	*	Your player character presses an action button that does something in your level. 
*	**You want to have Events fired when a spawned Actor has something done to it.** 
	*	You spawn a boss and an Event is fired when the boss is killed which spawns a reward in the world.
	*	You spawn an item in your level (weapon, health, boost, etc.) and through an Event, notify the item and character when it is picked up.

Refer to [Setting Up Event Dispatchers](Engine\Blueprints\UserGuide\BlueprintCommsUsage\BPComHowTo#eventdispatchers) for a walk through of how to set one up. 


## Blueprint Interfaces

![](Engine\Blueprints\UserGuide\BlueprintCommsUsage\BPComHowTo\InterfaceExample2_5.png)

**Blueprint Interfaces** allow for a common method of interacting with multiple types of objects that all share some specific functionality. This means you can have completely different types of objects, such as a car and a tree, that share one specific thing; they can both be shot by weapon fire and take damage. 

By creating a **Blueprint Interface** that contains an "OnTakeWeaponFire" function and having both the car and the tree implement that **Blueprint Interface**, you can treat the car and the tree as the same and simply call the "OnTakeWeaponFire" function when either of them is shot and have them respond differently.

Refer to [](Engine/Blueprints/UserGuide/Types/Interface/UsingInterfaces) for more detailed information. 

### When to Use It...

Each of the examples below are scenarios where a **Blueprint Interface** might be the best method of communication: 

*	**You have some functionality in a Blueprint that can produce different results when interacted with or based off other variables you define.**
	*	Player has a flamethrower that when used, fires an Event called **ElementalDamage**. A Tree Blueprint gets the call and burns the tree down while a Snowman Blueprint melts the snowman. 
	*	Player has a "use" button, pressing the use button opens doors, turns off lights, picks up items, etc. 
	*	Enemy has a special ability that changes based on player health. 

Refer to [Setting Up Blueprint Interfaces](Engine\Blueprints\UserGuide\BlueprintCommsUsage\BPComHowTo#blueprintinterfaces) for a walk through of how to set one up. 











