INTSourceChangelist:0
Availability:Public
Title:Bitmask Blueprint Variables
Crumbs: %ROOT%, Engine, Engine/Blueprints, Engine/Blueprints/Scripting
Description: Blueprint integer variables can be declared as bitmasks to store binary flags in a more compact fashion.
version: 4.12
skilllevel:Intermediate
Parent:Engine/Blueprints/Scripting
type:guide

[TOC (start:2)]

Blueprints now support declaring an integer variable as a bitmask. This allows individual mask bits (flags) to be set and unset through the editor rather than having to manually enter values. 
Additionally, _Blueprint Enumerations _can also be declared as a **Bitmask Flags** type for use as explicit bitflag identifiers.

## Setup

Any integer variable can also be created and declared as a bitmask when working with a _Blueprint Class_ in the **Blueprint Editor**. To enable this, the **Details** panel exposes a **Bitmask** attribute that can be 
toggled on and off for integer variables:

![image alt text](image_2.png)This equates to the `Bitmask` metadata in C++ code. Turning it on will change the UI on variable nodes in the _Blueprint Graph_ to match the **Property Editor** user interface for default pin values: 

![image alt text](image_3.png)

The additional **Bitflags Enum** attribute allows changing the enumeration type associated with the bitmask variable. The drop-down will only list enumeration types that have the **Bitmask Flags** attribute set. 
This option equates to the `BitmaskEnum=` metadata in C++ code.
Finally, it is possible to create a _Blueprint Enumeration_ that is also a bitflag enumeration type; that is, bitflag enumeration types are not limited to C++ code. To enable this, the _Blueprint
Enumeration Editor_ includes an option in the **Advanced** section to toggle the **Bitmask Flags** attribute on or off for the enumeration type:

![image alt text](image_4.png)

Turning this option on will include the type alongside native types in the **Bitmask Enum** dropdown menu in the **Details** panel for bitmask integer variables created in the Blueprint Editor:

![image alt text](image_5.png)

## Make Bitmask Nodes

Bitmask literals can be created in a _Blueprint Class_ graph via the **Make Bitmask** node. To add this to a graph, **right-click** and choose it from the context menu:

![image alt text](image_6.png)

When the node is selected, the **Details** panel will include an option for changing the enumeration type that is associated with the bitmask. As with integer variables defined within the class, only 
enumeration types with the **Bitmask Flags** attribute enabled will be listed in the dropdown:

![image alt text](image_7.png)![image alt text](image_8.png)

## Using Bitmasks

Bitmasks are treated the same as an integer value in a Blueprint Graph. Bitmask integer output pins can be connected to any input pin that accepts an integer value; this will 
usually be the bitwise OR, AND, XOR and NOT operations.

In this first example, a single **Make Bitmask** node is passed to a **Bitwise XOR** node to toggle the **Red** flag stored in **Target Color Flags**. The enumeration storing the color values would also
have the **Bitmask Flags** attribute toggled on. 

![image alt text](image_9.png)

In the second example, the **Select** node, **Bitwise NOT**, and **Bitwise AND** nodes all take integers as inputs, so they can be used to select one of three sets of colors, toggle them, and then
save that result out to the **Target Color Flags** bitmask.

![image alt text](image_10.png)

