INTSourceChangelist:2704972
Availability:Public
Title:Properties
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture/Reference
Description:ゲームプレイ クラス用関数の作成および実装に関する参照ページ
Version:4.9

## プロパティ宣言

プロパティは標準の C++ 変数記法を使って宣言され、プロパティ メタデータと変数指定子を定義する UPROPERTY マクロが先にきます。

	UPROPERTY([specifier, specifier, ...], [meta(key=value, key=value, ...)])
	Type VariableName;

## 主要なデータタイプ

### 整数
整数データ タイプの規約は、ビット サイズの前に「int」あるいは「uint」をつけることです。

| 変数タイプ | 説明 |
| ------------| -------------|
| **uint8**	 | 8-bit  符号なし|
| **uint16**	| 16-bit 符号なし|
| **uint32**	| 32-bit 符号なし|
| uint64**	| 64-bit 符号なし|
| int8**	| 8-bit  符号付き|
| int16**	| 16-bit 符号付き|
| int32**	| 32-bit 符号付き|
| int64 | 64-bit 符号付き|

### 浮動小数点タイプ
アンリアルでは、標準の C++ 浮動小数点タイプであるフロート型と double 型 が使用されています。

### Boolean タイプ
Boolean タイプは、 C++ bool キーワードで、あるいはビットフィールドとして表現されます。

	uint32 bIsHungry :1;
    bool bIsThirsty;

### Strings
アンリアルがサポートしている文字列タイプは、以下の主要な 3 つになります。
* FString は「dynamic array」文字列タイプの典型といえます。
* FName は、グローバル文字列表のコピー不可能な大文字・小文字を区別しない文字列へのリファレンスです。FString より小さく、より効率よく受け渡しができますが、操作は難しくなります。
* FText は、ローカリゼーションに対処するために作成された更に剛健な文字列表現です。

使用する場合はたいてい、アンリアルはキャラクターの TCHAR タイプに依存します。TEXT() マクロは TCHAR リテラルを表すために利用できます。

	MyDogPtr->DogName = FName(TEXT("Samson Aloysius"));

いつ使用するのか、どのように機能するのかなど、3 つの文字列タイプの詳細は [文字列の取り扱い](Programming/UnrealArchitecture/StringHandling) を参照してください。

## プロパティ指定子

[INCLUDE:Programming/UnrealArchitecture/Reference/Properties/Specifiers#main(offset:2)]

