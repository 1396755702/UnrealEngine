INTSourceChangelist:2291853
Availability:Public
Title:アクタのスポーン
Crumbs:%ROOT%, Programming, Programming/UnrealArchitecture
Description:ゲームプレイコードでアクタの新インスタンスを作成する方法

[TOC (start:2 end:3)]

## SpawnActor メソッド

_アクタ_ の新インスタンスを作成するプロセスは **スポーン** として知られています。_アクタ_ のスポーンは UWorld::SpawnActor() 関数で実行します。この関数は、指定したクラスの新規インスタンスを作成し、新規作成した _アクタ_ にポインタを戻します。
`UWorld::SpawnActor()` は、その階層で _Actor_ クラスから継承するクラスのインスタンスを作成するためにのみ使用される場合があります。
 

	AActor* UWorld::SpawnActor
	(
		UClass*			Class,
		FName			InName,
		FVector const*	Location,
		FRotator const*	Rotation,
		AActor*			Template,
		bool			bNoCollisionFail,
		bool			bRemoteOwned,
		AActor*			Owner,
		APawn*			Instigator,
		bool			bNoFail,
		ULevel*			OverrideLevel,
		bool			bDeferConstruction
	)

| パラメータ | 説明 |
| --- | --- |
| `Class` | スポーンされる _アクタ_ のクラスを指定する UClass 。 |
| `InName` | 任意。スポーンされる _アクタ_ の「名前」として割り当てる `FName`。値が指定されない場合、スポーンされた _アクタ_ の名前は *[Class]_[Number]* の形式で自動生成されます。 |
| `Location` | 任意。_アクタ_ をスポーンする初期位置を設定する FVector 。 |
| `Rotation` | 任意。_アクタ_ と一緒にスポーンする初期回転を設定する `FRotator`。 |
| `Template` | 任意。新規の _アクタ_ のスポーン時にテンプレートとして使用する `AActor`。スポーンされた _アクタ_ を、テンプレート アクタのプロパティ値を使用して初期化。テンプレート _アクタ_ が指定されない場合、スポーンされた _アクタ_ の初期化にはクラス デフォルト オブジェクト (CDO) を使用。|
| `bNoCollisionFail` | 任意。_アクタ_ のスポーン時にコリジョンテストを実行するかどうかを決定する`bool` 。 `true` の場合、ルート コンポーネントまたはテンプレート _アクタ_ のコリジョン設定に関係なく、_アクタ_ のスポーン時にコリジョンテストを非実行。 |
| `bRemoteOwned` | 任意。 bool 。 |
| `Owner` | 任意。スポーンされた _アクタ_ を所有する `AActor`。 |
| `Instigator` | 任意。スポーンされた _アクタ_ によって与えられたダメージの原因となる `APawn`。 |
| `bNoFail` |任意。特定の条件に満たなかった場合にスポーンを成功させるか否かを決定する `bool`。`true` の場合、スポーンされているクラスが `bStatic=true` であるため、もしくはテンプレート アクタのクラスはスポーンされている _アクタ_ のクラスとは異なるため、スポーンは成功。 |
| `OverrideLevel` | 任意。_アクタ_ をスポーンする `ULevel`。例えば _アクタ_ の `Outer`。レベルが指定されない場合、`Owner` の `Outer` を使用。`Owner`が指定されない場合、永続的なレベルを使用。 | 
| `bDeferConstruction` | 任意。コンストラクション スクリプトの実行を決定する `bool`。`true` の場合、スポーンされた _アクタ_、上でコンストラクション スクリプトは非実行。 _アクタ_ が [ブループリント](Engine/Blueprints) からスポーンされた時のみ適用。 |
|[REGION:tablesection]戻り値[/REGION]||
| AActor ポインター形式のスポーンされた _アクタ_。戻り値は `Class` パラメータによって指定された派生タイプへ変換するためキャストしなくてはいけません。||

### 使用方法

	AKAsset* SpawnedActor1 = (AKAsset*) GetWorld()->SpawnActor(AKAsset::StaticClass(), NAME_None, &Location);

## Spawn 関数のテンプレート

スポーンされた _アクタ_ をより扱いやすくするために、最も一般的に使用されている関数のテンプレートをいくつか用意しました。これらのテンプレートは、パラメータのテンプレートのサブセットを最小限にとどめることにより容易に _アクタ_ を作成し、
返される _アクタ_ のタイプの指定が可能となります。

### Spawn T Instance、 Return T Pointer

この関数テンプレートは、同位置に、同回転で、_アクタ_ のルートコンポーネントがスポーン操作を実行時に、テンプレートクラス`T`のインスタンスをスポーンします。 
そしてテンプレートクラスとして同タイプのインスタンスへポインターを返します。例えば `T*` です。所有する _アクタ_、 _ポーン_ の扇動、またスポーンされた _アクタ_ がワールドに存在する別 _アクタ_ を侵害 
またはワールドに存在する別 _アクタ_ と衝突した場合に、スポーン操作を失敗させるかを指定することができます。

	/** ルートコンポーネントの初期回転と平行移動を保ちながら、クラス T をスポーンして返します。 */
	template< class T >
	T* SpawnActor
	(
		AActor* Owner=NULL,
		APawn* Instigator=NULL,
		bool bNoCollisionFail=false
	)
	{
		return (T*)(GetWorld()->SpawnActor(T::StaticClass(), NAME_None, NULL, NULL, NULL, bNoCollisionFail, false, Owner, Instigator));
	}

#### 使用法

	MyHUD = SpawnActor<AHUD>(this, Instigator);

### Spawn T Instance with Transform、 Return T Pointer

この関数テンプレートは、指定された `Location` に指定された `Rotation` でテンプレートクラス `T` のインスタンスをスポーンします。そしてテンプレートクラスとして同タイプのインスタンスへポインターを返します。 
例えば `T*` です。位置と回転に加え、所有する _アクタ_、 _ポーン_ の扇動、またスポーンされた_アクタ_ がはワールドに存在する別 _アクタ_ を侵害した場合、 
またはワールドに存在する別 _アクタ_ と衝突した場合にスポーン操作を失敗させるかを指定することができます。

	/** 強制的にワールド位置を設定してクラス T をスポーンして返します。 */
	template< class T >
	T* SpawnActor
	(
		FVector const& Location,
		FRotator const& Rotation,
		AActor* Owner=NULL,
		APawn* Instigator=NULL,
		bool bNoCollisionFail=false
	)
	{
		return (T*)(GetWorld()->SpawnActor(T::StaticClass(), NAME_None, &Location, &Rotation, NULL, bNoCollisionFail, false, Owner, Instigator));
	}

#### 使用法

	Controller = SpawnActor<AController>(GetLocation(), GetRotation(), NULL, Instigator, true);

### Spawn Class Instance、 Return T Pointer

この関数テンプレートは、同位置に、同回転で、_アクタ_ のルートコンポーネントがスポーン操作を実行時に、指定されたクラスのインスタンスをスポーンします。そしてテンプレートクラスとして同タイプのインスタンスへポインターを返します。 
例えば `T*` です。指定した `Class` は、テンプレートクラス `T` の子でなくていはいけません。クラスに加え、 
所有する_アクタ_、_ポーン_ の扇動、またスポーンされたアクタがワールドに存在する別 _アクタ_ を侵害した場合、または 
ワールドに存在する別 _アクタ_ と衝突した場合にスポーン操作を失敗させるかを指定できます。

	/** ルートコンポーネントの初期回転と平行移動を保ちながら、任意のクラスをスポーンしてクラスTを返します。 */
	template< class T >
	T* SpawnActor
	(
		UClass* Class,
		AActor* Owner=NULL,
		APawn* Instigator=NULL,
		bool bNoCollisionFail=false
	)
	{
		return (Class != NULL) ?Cast<T>(GetWorld()->SpawnActor(Class, NAME_None, NULL, NULL, NULL, bNoCollisionFail, false, Owner, Instigator)) :NULL;
	}
#### 使用法

	MyHUD = SpawnActor<AHUD>(NewHUDClass, this, Instigator);

### Spawn Class Instance with Transform、 Return T Pointer

この関数テンプレートは、指定された `Location` に指定された `Rotation` で、指定された `Class` のインスタンスをスポーンします。そしてテンプレートクラスとして同タイプのインスタンスへポインターを返します。 
例えば `T*` です。指定した `Class` は、テンプレートクラス `T` の子でなくていはいけません。クラス、位置、回転に加え、 
所有する _アクタ_、ポーンの扇動、またスポーンされた _アクタ_ がワールドに存在する別 _アクタ_ を侵害した場合、またはワールドに存在する別 _アクタ_ と衝突した場合にスポーン操作を失敗させるかの指定をすることができます。

	/** 強制的にワールド位置を設定して任意のクラスをスポーンしてクラス T ポインターを返します。 */
	template< class T >
	T* SpawnActor
	(
		UClass* Class,
		FVector const& Location,
		FRotator const& Rotation,
		AActor* Owner=NULL,
		APawn* Instigator=NULL,
		bool bNoCollisionFail=false
	)
	{
		return (Class != NULL) ?Cast<T>(GetWorld()->SpawnActor(Class, NAME_None, &Location, &Rotation, NULL, bNoCollisionFail, false, Owner, Instigator)) :NULL;
	}

#### 使用法

	APawn* ResultPawn = SpawnActor<APawn>(DefaultPawnClass, StartLocation, StartRotation, NULL, Instigator);
