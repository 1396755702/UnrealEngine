INTSourceChangelist:3090659
Availability:Docs
Title:BuildGraph スクリプトのアナトミー
Crumbs: %ROOT%, Programming, Programming/Development, Programming/Development/BuildGraph
Description:BuildGraph スクリプティング システムについて説明します。
version:4.13
parent:Programming/Development/BuildGraph
type:Overview
tags:BuildGraph
related:Programming/Development/BuildGraph/Usage

[VAR:TopicCompact]
[OBJECT:TopicCompact]
	[PARAM:image]
		![%Programming/Development/BuildGraph/ScriptAnatomy%](anatomy_topic.png)
	[/PARAM]
	[PARAM:icon]
		![](%ROOT%/reference_icon.png)(convert:false)
	[/PARAM]
	[PARAM:title]
		%Programming/Development/BuildGraph/ScriptAnatomy:title%
	[/PARAM]
	[PARAM:description]
		%Programming/Development/BuildGraph/ScriptAnatomy:description%
	[/PARAM]
	[PARAM:path]
		[RELATIVE:Programming/Development/BuildGraph/ScriptAnatomy]
	[/PARAM]
[/OBJECT]
[/VAR]

[TOC(start:1 end:4)]

**BuildGraph** スクリプトの記述方法を学びたい場合は、グラフを構成する様々な部分のことを知ると役立ちます。 
グラフは以下のエレメントで作成されます。

* Tasks:ビルド プロセスの一部として実行されるアクション (コンパイル、クックなど) です。
* Nodes:出力を生成するために実行される順序付けされたタスクに対して名前付けされたシーケンスです。実行前に、ノードは 
先にタスクを実行している他のノードに依存する場合があります。
* Agents:同じマシンで実行される (ビルド システムの一部として実行している場合) 複数のノードのグループです。ローカルでビルドする場合、 
エージェントは何も効果を及ぼしません。 
* Triggers:手動で介入後に限り実行するグループのためのコンテナです。 
* Aggregates:単一の名前で参照可能なノードのグループと名前付けされた出力です。

スクリプトでは通常、再利用可能または条件付きで定義される値のプロパティを頻繁に使用します。プロパティは、 
`<Property>` エレメントで宣言され、最初の宣言のポイントにスコープが適用されます。`$(PropertyName)` の表記法で参照されるプロパティは、 
すべての属性文字列内で有効であり、スクリプトが読み出されるときに展開されます。コマンドラインでユーザーが指定するプロパティは、 
`<Option>`エレメントで宣言可能であり、環境変数は 
`<EnvVar>` エレメントを使ってプロパティにインポートすることができます。

"If" 属性でどのようなエレメントでも条件付きで定義することができます。条件式のシンタックスについては、以下をご覧ください。

BuildGraph は通常、パッケージ化されたゲームで使用されます。そのため、フィルタリングとファイルの操作はネイティブにサポートされます。ファイルの一覧をアクセプトする属性があれば、 
Perforce スタイルのワイルドカード (どの場所でも "..."、 "*"、および "?" のパターンにいくつでもマッチ)、 
フルパス名、タグ付けされたファイル コレクションへの参照で構成されます。属性は、 `#` の文字の 
プレフィックスを付けて表します。`<Tag>` タスクを使ってタグ セットにファイルを追加することができます。これにより、結合 / 差分スタイルの演算を 
行うことができます。各ノードは、名前付けされたタグの一覧という形式で複数の出力を宣言することができます。こうしたタグに、他のノードが依存することができます。

ビルド システムの一部としてグラフを平行して実行することができます。これを行うには、最初のグラフ設定は、 
`-Export=<Filename>` 引数を実行することによって生成されます (実行するノードと従属関係を一覧表示する JSON ファイルを生成します)。参加する各エージェントは、 
同じチェンジリストに同期し、AutomationTool (UAT) は適切な`-SingleNode=<Name>` 引数で 
再実行するようにします。様々なノードからの出力は共有ストレージを介して (通常は、ネットワークで共有)  
エージェント間で転送されます。このストレージへのパスは `-SharedStorageDir=<Path>`引数を使ってコマンドラインで指定することができます。マシンの割り当て (およびマシン間の調整) は、 
外部システムによる管理を前提にしていることにご注意ください。

BuildGraph の構成要素を定義するために使うエレメントのシンタックスは、以下のセクションに一覧表示されています。

## BuildGraph スクリプティングのリファレンス

[REGION:topics third]
%Programming/Development/BuildGraph/ScriptAnatomy/Types:topiccompact%
%Programming/Development/BuildGraph/ScriptAnatomy/Elements:topiccompact%
%Programming/Development/BuildGraph/ScriptAnatomy/Conditions:topiccompact%
%Programming/Development/BuildGraph/ScriptAnatomy/Tasks:topiccompact%
[/REGION]