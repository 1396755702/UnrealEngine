INTSourceChangelist:2938862
Availability:Docs
Title:2.5 - キャラクターのジャンプを実装する
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/2
Description:FPS キャラクターのジャンプの実装方法を学びます。
SkillLevel:Beginner
Version:4.11

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming/Tutorials/FirstPersonShooter/2/4)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/2)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming/Tutorials/FirstPersonShooter/2/6)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

一般的にアクション マッピングでは、個別のイベントに対する入力を扱います。キーボード、マウス、およびコントローラーの入力を「フレンドリー ネーム」にマッピングします。この「フレンドリー ネーム」は後でゲームの動作 (移動など) にバインドすることができます。 
最終的な効果としては、キー、マウスボタン、またはキーパッドボタンを押す (または解放する) と、特定のゲーム動作が直接トリガーされます。

このステップでは、キャラクターがジャンプする機能を追加します。そのために、スペースバーに対して入力アクションのマッピングを設定します。

## ジャンプ アクションのマッピング

1.	**[Edit (編集)]** メニューで、 **[Project Settings (プロジェクト設定)]** をクリック します。

1.	**[Project Settings]** タブの左側にある **[Engine]** の見出しで、 **[Input]** をクリックします。

1.	**[Bindings]** の **[Action Mappings]** の隣にあるプラス記号をクリックします。

1.	**[Axis Mappings]** の左側にある矢印をクリックします。

1.	表示されるテキスト欄に "Jump" と入力し、テキスト ボックスの左側の矢印をクリックしてアクション バインディングのオプションを展開します。

1.	ドロップダウン メニューで **[Keyboard]** ドロップダウン リストから **[Space Bar]** を選択します。

1.	入力設定は以下のようになります。

	![](JumpActionMapping_SpaceBar.png)

1.	**[Project Settings]** メニューを閉じます。

## 入力処理の実装

Character 基本クラスの interface ファイル (*.h) 内を見ると、ジャンプするキャラクターのビルトインのサポートがあることがわかります。 
キャラクターのジャンプは、`bPressedJump` 変数に結び付けられているため、行うべきことは、ジャンプ アクションが押された場合に、その boolean 値を `true` に設定するだけです。
これを実行するには以下の 2 つの関数を追加する必要があります。

*	`OnStartJump`
*	`OnStopJump`

FPSCharacter クラスにコードを追加するには、Visual Studio に戻ります。

1.	`FPSCharacter.h` で、以下のパブリック関数宣言を追加します。

		// キー押下時のジャンプフラグを設定
		UFUNCTION()
		void OnStartJump();
		//キー解放時のジャンプフラグをクリア

		UFUNCTION()
		void OnStopJump();

1.	`FPSCharacter.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Character.h"

		#include "FPSCharacter.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()
		public:

			// このキャラクターのプロパティのデフォルト値を設定
			AFPSCharacter();
		// ゲーム開始時またはスポーン時に呼ばれます。

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます。

			virtual void Tick( float DeltaSeconds ) override;
		// 機能と入力をバインドするために呼ばれます。

			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		// 前後方向の移動を処理します。

			UFUNCTION()
			void MoveForward(float Value);
		// 左右の移動を処理します。

			UFUNCTION()
			void MoveRight(float Value);
		// キー押下時のジャンプフラグを設定

			UFUNCTION()
			void OnStartJump();
			//キー解放時のジャンプフラグをクリア

			UFUNCTION()
			void OnStopJump();
		};

1.	`FPSCharacter.cpp` で、以下の関数定義を追加します。

		//ジャンプ フラグを設定する関数
		void AFPSCharacter::OnStartJump()
		{
			bPressedJump = true;
		}
		//ジャンプ フラグをクリアする関数

		void AFPSCharacter::OnStopJump()
		{
			bPressedJump = false;
		}

1.	以下のコードを `SetupPlayerInputComponent` に追加し、ジャンプ アクションを新しく記述した関数にバインドします。

		// ジャンプ アクションのバインドのセットアップ
		InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
		InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);

1.	`FPSCharacter.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSCharacter.h"
		// デフォルト値を設定

		AFPSCharacter::AFPSCharacter()
		{
		 	// このキャラクターがフレーム毎に Tick() を呼び出すように設定します。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		}

		// ゲーム開始時またはスポーン時に呼ばれます。

		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			const int32 Key = -1;

			static const FString DebugMessage = TEXT("We are using FPSCharacter.");
			FColor DisplayColor = FColor::Red;
			float TimeToDisplay = 5.0f; //秒
		if (GEngine != nullptr)

			{
				GEngine->AddOnScreenDebugMessage(Key, TimeToDisplay, DisplayColor, DebugMessage);
		}

		}
		// フレームごとに呼ばれます。

		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}

		// 機能と入力をバインドするために呼ばれます。

		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
		// ゲームプレイのキーバインド設定

			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
		// ゲームプレイのマウス バインドのセットアップ。

			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
		// ジャンプ アクションのバインドのセットアップ

			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
		}
		void AFPSCharacter::MoveForward(float Value)

		{
			// 前進方向の確認
			FRotator Rotation = Controller->GetControlRotation();
			// その方向へ動きを追加
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
			AddMovementInput(Direction, Value);
		}
		void AFPSCharacter::MoveRight(float Value)

		{
			// 右方向の確認
			FRotator Rotation = Controller->GetControlRotation();
			// その方向へ動きを追加
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
			AddMovementInput(Direction, Value);
		}
		void AFPSCharacter::OnStartJump()

		{
			bPressedJump = true;
		}
		void AFPSCharacter::OnStopJump()

		{
			bPressedJump = false;
		}

## キャラクターのジャンプのテスト

新規で実装したキャラクターの移動の関数をコンパイルし、テストします。

1.	Visual Studio に `FPSCharacter` のヘッダ (\*.h) と CPP (\*.cpp) ファイルを保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	[FPSProject] 上で **右クリック** して、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildProject.png)

1.	ビルドが終了したらアンリアル エディタでご自身の **FPSProject** を開きます。

1.	レベル エディタのツールバーで、**[Play (再生)]** ボタンをクリックします。マップ全体でジャンプできるようになります。

1.	[PIE (Play In Editor)] モードを終了するには、レベル エディタで Escape キーを押すか、**[Stop]** ボタンをクリックします。

%Steps%