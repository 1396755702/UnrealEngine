INTSourceChangelist:2938865
Availability:Docs
Title:2.7 - カメラビューの変更
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/2
Description:FPS キャラクターのカメラビューの変更方法を学びます。
SkillLevel:Beginner
Version:4.11

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming/Tutorials/FirstPersonShooter/2/6)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/2)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming/Tutorials/FirstPersonShooter/2/8)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

前回の手順の最後で、デフォルトのカメラがメッシュのネックの内側に配置されました。このステップでは、カメラのプロパティ (位置やFOV (視野角) など) を調整するために使用可能な FPS カメラをセットアップします。

## Camera コンポーネントをアタッチする

1.	Visual Studio に切り替えて、`FPSCharacter.h` を開き、以下のコードを追加します。

		// FPS カメラ
		UPROPERTY(VisibleAnywhere)
		UCameraComponent* FPSCameraComponent;

1.	`FPSCharacter.h` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#pragma once

		#include "GameFramework/Character.h"

		#include "FPSCharacter.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()
		public:

			// このキャラクターのプロパティのデフォルト値を設定
			AFPSCharacter();
		// ゲーム開始時またはスポーン時に呼ばれます。

			virtual void BeginPlay() override;
			// フレームごとに呼ばれます。

			virtual void Tick( float DeltaSeconds ) override;
		// 機能を入力にバインドするために呼ばれます。

			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		// 前後方向の移動を処理します。

			UFUNCTION()
			void MoveForward(float Value);
		// 左右の移動を処理します。

			UFUNCTION()
			void MoveRight(float Value);
		// キー押下時のジャンプフラグを設定

			UFUNCTION()
			void OnStartJump();
		// キー解放時のジャンプフラグをクリア

			UFUNCTION()
			void OnStopJump();
		// FPS カメラ

			UPROPERTY(VisibleAnywhere)
			UCameraComponent* FPSCameraComponent;
		};

1.	`FPSCharacter.cpp` を開いて次のコードをコンストラクタに追加します。

		// first person camera コンポーネントを作成
		FPSCameraComponent = CreateDefaultSubobject<UCameraComponent>(TEXT("FirstPersonCamera"));
		// camera コンポーネントを capsule コンポーネントにアタッチします。
		FPSCameraComponent->AttachTo(GetCapsuleComponent());

	前述のコードは、`UCameraComponent` を作成し、それをキャラクターの`CapsuleComponent` にアタッチします。

1.	以下のコードをコンストラクタに記述したブロックの下に追加します。

		// 目の高さより少し上にカメラを設定
		FPSCameraComponent->SetRelativeLocation(FVector(0.0f, 0.0f, 50.0f + BaseEyeHeight));
		// ポーンが回転を制御できるようにします。
		FirstPersonCameraComponent->bUsePawnControlRotation = true;

	このコードは、カメラの位置をキャラクターの目の位置より少し高めに調整します。

1.	`FPSCharacter.cpp` は以下のようになります。

		// Project Settings の Description ページに著作権情報を入力してください。
		#include "FPSProject.h"

		#include "FPSCharacter.h"
		// デフォルト値を設定

		AFPSCharacter::AFPSCharacter()
		{
		 	// このキャラクターがフレーム毎に Tick() を呼び出すように設定します。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		// first person camera コンポーネントを作成

			FPSCameraComponent = CreateDefaultSubobject<UCameraComponent>(TEXT("FirstPersonCamera"));
			// camera コンポーネントを capsule コンポーネントにアタッチします。
			FPSCameraComponent->AttachTo(GetCapsuleComponent());
			// 目の高さより少し上にカメラを設定
			FPSCameraComponent->SetRelativeLocation(FVector(0.0f, 0.0f, 50.0f + BaseEyeHeight));
			// ポーンが回転を制御できるようにします。
			FPSCameraComponent->bUsePawnControlRotation = true;
		}
		// ゲーム開始時またはスポーン時に呼ばれます。

		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			const int32 Key = -1;

			static const FString DebugMessage = TEXT("We are using FPSCharacter.");
			FColor DisplayColor = FColor::Red;
			float TimeToDisplay = 5.0f; //秒
		if (GEngine != nullptr)

			{
				GEngine->AddOnScreenDebugMessage(Key, TimeToDisplay, DisplayColor, DebugMessage);
		}

		}
		// フレームごとに呼ばれます。

		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}

		// 機能を入力にバインドするために呼ばれます。

		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
		// ゲームプレイのキーバインドのセットアップ

			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
		// ゲームプレイのマウス バインドのセットアップ

			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
		// ジャンプ アクションのバインドのセットアップ

			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
		}
		void AFPSCharacter::MoveForward(float Value)

		{
			// 前進方向の確認
			FRotator Rotation = Controller->GetControlRotation();
			// その方向へ動きを追加
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
			AddMovementInput(Direction, Value);
		}
		void AFPSCharacter::MoveRight(float Value)

		{
			// 右方向の確認
			FRotator Rotation = Controller->GetControlRotation();
			// その方向へ動きを追加
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
			AddMovementInput(Direction, Value);
		}
		void AFPSCharacter::OnStartJump()

		{
			bPressedJump = true;
		}
		void AFPSCharacter::OnStopJump()

		{
			bPressedJump = false;
		}

## 新しいカメラをテストする

新たに実装したカメラのコードをコンパイルし、テストします。

1.	Visual Studio に `FPSCharacter` のヘッダ (\*.h) と CPP (\*.cpp) ファイルを保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	**[FPSProject]** 上で右クリックして、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildProject.png)

1.	ビルドが終了したらアンリアル エディタでご自身の **FPSProject** を開きます。

1.	レベル エディタのツールバーで、**[Play (プレイ)]** ボタンを **クリック** します。

	![](NewCameraComponent.png)

	これで、カメラはキャラクターの頭の少し上に位置するようになります。

1.	[PIE (Play In Editor)] モードを終了するには、レベル エディタで Escape キーを押すか、**[Stop]** ボタンをクリックします。

%Steps%