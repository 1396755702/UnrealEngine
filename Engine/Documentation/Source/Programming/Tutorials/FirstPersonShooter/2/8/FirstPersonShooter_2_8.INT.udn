Availability: Docs
Title: 2.8 - Add a First Person Mesh to your Character
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/2
Description: Learn how to add a first person mesh to your First Person Shooter character.
SkillLevel: Beginner
Version: 4.11

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[Previous Step](Programming/Tutorials/FirstPersonShooter/2/7)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[Section Home](Programming/Tutorials/FirstPersonShooter/2)
	[/PARAM]
	[PARAM:next]
		[Next Section](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

A common approach for building FPS games is to use two separate character meshes where one is the full-body mesh and the other is the "weapon and hands" mesh. 
The full-body mesh is used to see the character from a third-person perspective; however, it's hidden when the player is viewing the game in first-person perspective. 
The "weapon and hands" mesh is typically attached to the camera and is only visible to the player when they're viewing the map in first-person perspective.
During this step, we're going to add a first person mesh to our character.

## Adding the First Person Character Mesh

1.	Switch back to Visual Studio and open `FPSCharacter.h` to add the following code:

		// pawn mesh: FPS view (arms are only seen by self)
		UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
		USkeletalMeshComponent* FPSMesh;

1.	`FPSCharacter.h` should now look like the following:

		// Fill out your copyright notice in the Description page of Project Settings.
		
		#pragma once
		
		#include "GameFramework/Character.h"
		#include "FPSCharacter.generated.h"
		
		UCLASS()
		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()
		
		public:
			// Sets default values for this character's properties
			AFPSCharacter();
		
			// Called when the game starts or when spawned
			virtual void BeginPlay() override;
			
			// Called every frame
			virtual void Tick( float DeltaSeconds ) override;
		
			// Called to bind functionality to input
			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		
			// handles moving forward and backward
			UFUNCTION()
			void MoveForward(float Value);
		
			// handles moving right and left
			UFUNCTION()
			void MoveRight(float Value);
		
			// sets jump flag when key is pressed
			UFUNCTION()
			void OnStartJump();
		
			// clears jump flag when key is released
			UFUNCTION()
			void OnStopJump();
		
			// FPS camera
			UPROPERTY(VisibleAnywhere)
			UCameraComponent* FPSCameraComponent;
		
			// pawn mesh: FPS view (arms are only seen by self)
			UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
			USkeletalMeshComponent* FPSMesh;
		};

1.	Open `FPSCharacter.cpp` and add the following code to create and configure the first person mesh:

		// create a first person mesh component
		FPSMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("FirstPersonMesh"));
		// only the owning player sees this mesh
		FPSMesh->SetOnlyOwnerSee(true);
		// attach the FPS mesh to the FPS camera
		FPSMesh->AttachTo(FPSCameraComponent);
		// disable some environmental shadowing to preserve the illusion of having a single mesh
		FPSMesh->bCastDynamicShadow = false;
		FPSMesh->CastShadow = false;

	`SetOnlyOwnerSee` indicates that this mesh is only visible to the `PlayerController` that has possessed this `Character`. 
	This code is also attaching the mesh to the camera and disabling some environmental shadowing.
	Allowing the the camera-attahed arms to cast shadows would destroy the illusion of having a single mesh for the first person character.

1.	Add the following code to `FPSCharacter.cpp` to hide the existing third-person mesh from the owning character:

		// everyone but you can see the regular body mesh
		GetMesh()->SetOwnerNoSee(true);

1.	`FPSCharacter.cpp` should now look like the following:

		// Fill out your copyright notice in the Description page of Project Settings.
		
		#include "FPSProject.h"
		#include "FPSCharacter.h"
		
		// Sets default values
		AFPSCharacter::AFPSCharacter()
		{
		 	// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
			PrimaryActorTick.bCanEverTick = true;
		
			// create a first person camera component
			FPSCameraComponent = CreateDefaultSubobject<UCameraComponent>(TEXT("FirstPersonCamera"));
			// attach the camera component to our capsule component
			FPSCameraComponent->AttachTo(GetCapsuleComponent());
			// position the camera slightly above the eyes
			FPSCameraComponent->SetRelativeLocation(FVector(0.0f, 0.0f, 50.0f + BaseEyeHeight));
			// allow the pawn to control rotation
			FPSCameraComponent->bUsePawnControlRotation = true;
		
			// create a first person mesh component
			FPSMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("FirstPersonMesh"));
			// only the owning player sees this mesh
			FPSMesh->SetOnlyOwnerSee(true);
			// attach the FPS mesh to the FPS camera
			FPSMesh->AttachTo(FPSCameraComponent);
			// disable some environmental shadowing to preserve the illusion of having a single mesh
			FPSMesh->bCastDynamicShadow = false;
			FPSMesh->CastShadow = false;
			
			// everyone but you can see the regular body mesh
			GetMesh()->SetOwnerNoSee(true);
		}
		
		// Called when the game starts or when spawned
		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			
			const int32 Key = -1;
			static const FString DebugMessage = TEXT("We are using FPSCharacter.");
			FColor DisplayColor = FColor::Red;
			float TimeToDisplay = 5.0f; //seconds
		
			if (GEngine != nullptr)
			{
				GEngine->AddOnScreenDebugMessage(Key, TimeToDisplay, DisplayColor, DebugMessage);
		
			}
		}
		
		// Called every frame
		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		
		}
		
		// Called to bind functionality to input
		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
		
			// set up gameplay key bindings
			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
		
			// set up gameplay mouse bindings
			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
		
			// set up jump action bindings
			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
		}
		
		void AFPSCharacter::MoveForward(float Value)
		{
			// find out which way is forward
			FRotator Rotation = Controller->GetControlRotation();
			// add movement in that direction
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
			AddMovementInput(Direction, Value);
		}
		
		void AFPSCharacter::MoveRight(float Value)
		{
			// find out which way is right
			FRotator Rotation = Controller->GetControlRotation();
			// add movement in that direction
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::Y);
			AddMovementInput(Direction, Value);
		}
		
		void AFPSCharacter::OnStartJump()
		{
			bPressedJump = true;
		}
		
		void AFPSCharacter::OnStopJump()
		{
			bPressedJump = false;
		}

1.	Save the `FPSCharacter` header (\*.h) and CPP (\*.cpp) files in Visual Studio.

1.	Locate **FPSProject** in the **Solution Explorer**.

1.	Right-click on **FPSProject** and select **Build** to compile your project.

	![](BuildProject.png)

1.	After the build finishes, open your **FPSProject** in Unreal Editor. At this point, your character mesh should not be visible inside the editor.

## Building the Mesh Blueprint

[REGION:note]
Before continuing, download and extract our sample mesh from the following link:
["First Person Skeletal Mesh"](HeroFPP.zip "First Person Skeletal Mesh")
[/REGION]

1.	Right-click inside the Content Browser's file box to open the **Import Asset** dialog box

1.	Click **'Import to /Game...'** to open the **Import** dialog box.

	![](RightClickImport.png)

1.	Locate and select the **HeroFPP.fbx** mesh file.

1.	Click **Open** to begin importing the mesh to your project.

1.	In the **Content Browser**, the **FBX Import Options** dialog box appears. Clicking **Import** adds your mesh to the Project.

	[REGION:warning]
	Disregard the following error regarding smoothing groups:
	![](FBXWarning.png)  
	This mesh still illustrates the first person mesh set-up and it will work with the animations you'll set-up in a later section.
	[/REGION]

1.	Click the **Save** button to save your imported mesh.

1.	Navigate back to the **Blueprints** folder in the **Content Browser**.

1.	Double-click the **BP_FPSCharacter** icon to open it in the **Blueprint Editor**.

1.	Locate the new **FPSMesh** component in the **Components** tab.

	![](LocateFPSMeshComponent.png)

	The **FirstPersonMesh** component is a child of the **FirstPersonCameraComponent**, which means that it will always be attached to the camera.

1.	Click on the **FirstPersonMesh** in the **Components** menu.

1.	Scroll down to the **Mesh** section of the **Details** tab and click on the dropdown menu that says "None". 
	Now, select the **HeroFPP** skeletal mesh to add the arms to the **Viewport**.

	![](SelectHeroFPPSkeletalMesh.png)

1.	The newly added **HeroFPP** skeletal mesh should look like the following inside the **Viewport**.

	![](HeroFPPMesh_Viewport.png)

1.	Adjust the newly added mesh's transform to be in front of the camera by setting its **Location** to {240, 0, 35} and by setting its **Rotation** to {-180, 50, -180}.

	[REGION:lightbox]
		[![](AdjustingArmsTransform.png)(w:750)](AdjustingArmsTransform.png)
	[/REGION]
	_Click on the image to zoom in._

1.	 Make sure to **Compile** and **Save** the **BP_FPSCharacter** Blueprint before closing the **Blueprint Editor**.

## Viewing the New Mesh In-Game

1.	Click the **Play In** button in the **Level Editor Toolbar** to view the new mesh in-game.

	![](NewMeshInGame.png)

1.	Press the Escape key or click the **Stop** button in the Level Editor to exit Play in Editor (PIE) mode.

Congratulations! You've learned how to:

&#x2713; Make a New Character  
&#x2713; Set-up Axis Mapping  
&#x2713; Implement Character Movement Functions  
&#x2713; Implement Mouse Camera Control  
&#x2713; Implement Character Jumping  
&#x2713; Add a Mesh to your Character  
&#x2713; Change the Camera View  
&#x2713; Add a First Person Mesh to your Character  

You're now ready to learn how to implement projectiles in the next section.

%Steps%