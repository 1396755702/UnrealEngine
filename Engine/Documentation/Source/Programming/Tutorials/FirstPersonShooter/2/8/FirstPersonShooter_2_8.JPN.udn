INTSourceChangelist:2938864
Availability:Docs
Title:2.8 - ファーストパーソン メッシュをキャラクターに追加する
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/2
Description:FPS キャラクターにファーストパーソン メッシュを追加する方法を学びます。
SkillLevel:Beginner
Version:4.11

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
		[前のステップ](Programming/Tutorials/FirstPersonShooter/2/7)
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/2)
	[/PARAM]
	[PARAM:next]
		[次のセクション](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

ファーストパーソン シューティングゲーム (FPS) ゲームを構築する一般的な手法は、2 つの別個のキャラクター メッシュを使用するやり方です。ひとつは、ボディ全体のメッシュでもうひとつは「武器と手」のメッシュです。 
ボディ全体のメッシュは三人称視点でキャラクターを見るために使用されますが、これはプレイヤーが一人称視点でゲームを見ると非表示になります。 
「武器と手」のメッシュは通常カメラにアタッチされ、プレイヤーが一人称視点でマップを見ているときにのみ可視になります。
このステップでは、ファーストパーソン メッシュをキャラクターに追加します。

## ファーストパーソン キャラクターのメッシュを追加する

1.	Visual Studio に切り替えて、`FPSCharacter.h` を開き、以下のコードを追加します。

		// pawn mesh:FPS view (arms are only seen by self) (一人称視点 (自分からだけ見える腕))
		UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
		USkeletalMeshComponent* FPSMesh;

1.	`FPSCharacter.h` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)
		#pragma once

		#include "GameFramework/Character.h"

		#include "FPSCharacter.generated.h"
		UCLASS()

		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()
		public:

			// Sets default values for this character's properties (このキャラクターのプロパティのデフォルト値を設定)
			AFPSCharacter();
		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)

			virtual void BeginPlay() override;
			// Called every frame (フレーム毎に呼ばれます) 

			virtual void Tick( float DeltaSeconds ) override;
		// Called to bind functionality to input (機能と入力をバインドするために呼ばれます) 

			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		// handles moving forward and backward (前後方向の移動を処理します) 

			UFUNCTION()
			void MoveForward(float Value);
		// handles moving right and left (左右の移動を処理します)

			UFUNCTION()
			void MoveRight(float Value);
		// sets jump flag when key is pressed (キー押下時のジャンプフラグを設定) 

			UFUNCTION()
			void OnStartJump();
		// clears jump flag when key is released (キー解放時のジャンプフラグをクリア)

			UFUNCTION()
			void OnStopJump();
		// FPS camera (FPS カメラ)

			UPROPERTY(VisibleAnywhere)
			UCameraComponent* FPSCameraComponent;
		// pawn mesh:FPS view (arms are only seen by self) (一人称視点 (自分からだけ見える腕))

			UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
			USkeletalMeshComponent* FPSMesh;
		};

1.	`FPSCharacter.cpp` を開いて次のコードを追加して、ファーストパーソン メッシュを作成し設定します。

		// create a first person mesh component (first person mesh コンポーネントを作成) 
		FPSMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("FirstPersonMesh"));
		// only the owning player sees this mesh (このメッシュは所有しているプレイヤーだけから見えます)
		FPSMesh->SetOnlyOwnerSee(true);
		// attach the FPS mesh to the FPS camera (FPS メッシュを FPS カメラにアタッチします)
		FPSMesh->AttachTo(FPSCameraComponent);
		// disable some environmental shadowing to preserve the illusion of having a single mesh (一部の背景のシャドウイングを無効にして、ひとつのメッシュを持っているという錯覚を維持します) 
		FPSMesh->bCastDynamicShadow = false;
		FPSMesh->CastShadow = false;

	`SetOnlyOwnerSee` は、このメッシュがこの `Character` を所有した `PlayerController` からのみ可視であることを示しています。 
	また、このコードはメッシュをカメラにアタッチし、一部の背景シャドウイングを無効にします。
	カメラがアタッチされたアームがシャドウをキャストするようにすると、ファースト パーソン キャラクターに対して単一のメッシュという錯覚が台無しになります。

1.	以下のコードを `FPSCharacter.cpp` に追加して既存のサードパーソン メッシュを所有しているキャラクターから見えないようにします。

		// everyone but you can see the regular body mesh (自分以外は誰でも通常のボディメッシュを見ることができます)
		GetMesh()->SetOwnerNoSee(true);

1.	`FPSCharacter.cpp` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)
		#include "FPSProject.h"

		#include "FPSCharacter.h"
		// デフォルト値を設定

		AFPSCharacter::AFPSCharacter()
		{
		 	// このキャラクターがフレーム毎に Tick() を呼び出すように設定します。必要がなければパフォーマンスを向上させるためにオフにすることができます。
			PrimaryActorTick.bCanEverTick = true;
		//  create a first person camera component (first person camera コンポーネントを作成)

			FPSCameraComponent = CreateDefaultSubobject<UCameraComponent>(TEXT("FirstPersonCamera"));
			// attach the camera component to our capsule component (camera コンポーネントを capsule コンポーネントにアタッチします)
			FPSCameraComponent->AttachTo(GetCapsuleComponent());
			// position the camera slightly above the eyes (目の高さより少し上にカメラを設定)
			FPSCameraComponent->SetRelativeLocation(FVector(0.0f, 0.0f, 50.0f + BaseEyeHeight));
			// allow the pawn to control rotation (ポーンが回転を制御できるようにします)。
			FPSCameraComponent->bUsePawnControlRotation = true;
		// create a first person mesh component (first person mesh コンポーネントを作成) 

			FPSMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("FirstPersonMesh"));
			// only the owning player sees this mesh (このメッシュは所有しているプレイヤーだけから見えます)
			FPSMesh->SetOnlyOwnerSee(true);
			// attach the FPS mesh to the FPS camera (FPS メッシュを FPS カメラにアタッチします)
			FPSMesh->AttachTo(FPSCameraComponent);
			// disable some environmental shadowing to preserve the illusion of having a single mesh (一部の背景のシャドウイングを無効にして、ひとつのメッシュを持っているという錯覚を維持します) 
			FPSMesh->bCastDynamicShadow = false;
			FPSMesh->CastShadow = false;
			// everyone but you can see the regular body mesh (自分以外は誰でも通常のボディメッシュを見ることができます)

			GetMesh()->SetOwnerNoSee(true);
		}
		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)

		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();
			const int32 Key = -1;

			static const FString DebugMessage = TEXT("We are using FPSCharacter.");
			FColor DisplayColor = FColor::Red;
			float TimeToDisplay = 5.0f; //seconds (秒) 
		if (GEngine != nullptr)

			{
				GEngine->AddOnScreenDebugMessage(Key, TimeToDisplay, DisplayColor, DebugMessage);
		}

		}
		// Called every frame (フレーム毎に呼ばれます) 

		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );
		}

		// Called to bind functionality to input (機能と入力をバインドするために呼ばれます) 

		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);
		// set up gameplay key bindings (ゲームプレイのキーバインドのセットアップ)

			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);
		// set up gameplay mouse bindings (ゲームプレイのマウス バインドのセットアップ) 

			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
		// set up jump action bindings (ジャンプ アクションのバインドのセットアップ) 

			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
		}
		void AFPSCharacter::MoveForward(float Value)

		{
			// find out which way is forward (前進方向の確認)
			FRotator Rotation = Controller->GetControlRotation();
			// add movement in that direction (その方向へ動きを追加)
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
			AddMovementInput(Direction, Value);
		}
		void AFPSCharacter::MoveRight(float Value)

		{
			// find out which way is right (右方向の確認)
			FRotator Rotation = Controller->GetControlRotation();
			// add movement in that direction (その方向へ動きを追加)
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
			AddMovementInput(Direction, Value);
		}
		void AFPSCharacter::OnStartJump()

		{
			bPressedJump = true;
		}
		void AFPSCharacter::OnStopJump()

		{
			bPressedJump = false;
		}

1.	Visual Studio に `FPSCharacter` のヘッダ (\*.h) と CPP (\*.cpp) ファイルを保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	[FPSProject] 上で **右クリック** して、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildProject.png)

1.	ビルドが終了したらアンリアル エディタでご自身の **FPSProject** を開きます。この時点で、キャラクターのメッシュがエディタ内で可視状態になります。

## メッシュのブループリントを構築する

[REGION:note]
先に進む前に、次のリンクからサンプル メッシュをダウンロードし、抽出してください。
["First Person Skeletal Mesh"](HeroFPP.zip "First Person Skeletal Mesh")
[/REGION]

1.	コンテンツ ブラウザのファイル ボックス内で右クリックして **[Import Asset (インポート アセット)]** ダイアログボックスを開きます。

1.	**'Import to /Game...'** をクリックして **[Import]** ダイアログボックスを開きます。

	![](RightClickImport.png)

1.	 **HeroFPP.fbx** メッシュ ファイルを探して選択します。

1.	プロジェクトへのメッシュのインポートを開始するには、**[Open]** をクリックします。

1.	**コンテンツ ブラウザ** に、**[FBX Import Options]** ダイアログ ボックスが表示されます。メッシュをプロジェクトに追加するには、**[インポート]** をクリックします。

	[REGION:warning]
	スムージング グループに関する以下のエラーは無視してください。
	![](FBXWarning.png)  
	このメッシュはファーストパーソン メッシュの設定を表していますが、この後のセクションで設定するアニメーションでも機能します。
	[/REGION]

1.	**[Save]** ボタンをクリックしてインポートしたメッシュを保存します。

1.	**コンテンツ ブラウザ** の **Blueprints** フォルダに戻ります。

1.	**BP_FPSCharacter** のアイコンをダブルクリックして **ブループリント エディタ** 内で開きます。

1.	**[Components]** タブで新しい **FPSMesh** コンポーネントを探します。

	![](LocateFPSMeshComponent.png)

	**FirstPersonMesh** コンポーネントは **FirstPersonCameraComponent** の子です。つまり、常にカメラにアタッチされます。

1.	**[Components]** メニューで **[FirstPersonMesh]** をクリックしてください。

1.	**[Details (詳細)]** タブの **[Mesh]** セクションまで下にスクロールして、"None" と表示されているドロップダウン メニュー上でクリックします。 
	**HeroFPP** スケルタルメッシュを選択し、**ビューポート** に腕を追加します。

	![](SelectHeroFPPSkeletalMesh.png)

1.	新たに追加した **HeroFPP** スケルタルメッシュは、**ビューポート** 内で以下のように表示されます。

	![](HeroFPPMesh_Viewport.png)

1.	次のように設定して、この新たに追加したメッシュの変形がカメラの前にくるように調整します。その **Location** を {240, 0, 35} に、**Rotation** を {-180, 50, -180} に設定します。

	[REGION:lightbox]
		[![](AdjustingArmsTransform.png)(w:750)](AdjustingArmsTransform.png)
	[/REGION]
	_ズームインするには画像をクリックします。_

1. 	 **BP_FPSCharacter** ブループリントを **Compile (コンパイル)** および **Save (保存)** してから、**ブループリント エディタ** を閉じてください。

## 新しいメッシュをインゲームで見る

1.	**レベル エディタのツールバー** で、**[Play In]** ボタンを **クリック** します。

	![](NewMeshInGame.png)

1.	[PIE (Play In Editor)] モードを終了するには、レベル エディタで Escape キーを押すか、**[Stop]** ボタンをクリックします。

これで終わりです！以下について学習しました。

&#x2713; キャラクターの新規作成  
&#x2713; 軸マッピングの設定  
&#x2713; キャラクターの Movement 関数の実装  
&#x2713; マウスによるカメラ制御の実装  
&#x2713; キャラクターのジャンプの実装  
&#x2713; キャラクターにメッシュを追加  
&#x2713; カメラビューの変更  
&#x2713; ファーストパーソン メッシュをキャラクターに追加  

これで次のセクションで発射物の実装について学ぶ準備が整いました。

%Steps%