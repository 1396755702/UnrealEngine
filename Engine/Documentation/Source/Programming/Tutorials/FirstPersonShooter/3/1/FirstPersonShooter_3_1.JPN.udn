INTSourceChangelist:2939925
Availability:Docs
Title:3.1 - ゲームに発射物を追加する
Crumbs: %ROOT%, Programming, Programming/Tutorials/FirstPersonShooter, Programming/Tutorials/FirstPersonShooter/3
Description:First Person Shooter プロジェクトに発射物を追加する方法を学びます。
SkillLevel:Beginner
Version:4.11

[VAR:Steps]
[OBJECT:Navigation]
	[PARAM:previous]
	[/PARAM]
	[PARAM:current]
	[/PARAM]
	[PARAM:home]
		[セクション ホーム](Programming/Tutorials/FirstPersonShooter/3)
	[/PARAM]
	[PARAM:next]
		[次のステップ](Programming/Tutorials/FirstPersonShooter/3/2)
	[/PARAM]
[/OBJECT]
[/VAR]

%Steps%

キャラクターの設定が完了したので、簡易な射出武器を実装してみましょう。武器の発射時に手榴弾のような発射物をスクリーン中央から投射し、ワールドに衝突するまでこれを飛ばしてみましょう。このステップでは、入力を追加し、発射物に新規コード クラスを追加します。

## Fire Action Mapping を追加する

1.	**[Edit (編集)]** メニューで、 **[Project Settings (プロジェクト設定)]** をクリックします。

1.	**[Project Settings]** タブの左側にある **[Engine]** の見出しで、 **[Input]** をクリックします。

1.	**[Bindings]** の **[Action Mappings]** の隣にあるプラス記号をクリックします。

1.	**[Axis Mappings]** の左側にある矢印をクリックします。

1.	表示されるテキスト欄に "Fire" と入力し、テキスト ボックスの左側の矢印をクリックしてアクション結合オプションを展開します。

1.	ドロップダウン メニューで **[Mouse]** ドロップダウン リストから **[Left Mouse Button]** を選択します。

1.	入力設定は以下のようになります。

	![](ActionMapping.png)

1.	**[Project Settings]** メニューを閉じます。

## Projectile クラスを追加する

1.	ファイル メニューで **[New C++ Class... (新規 C++ クラス)]** を選択して、新しい Parent (親) クラスを選択します。

1.	**[Choose Parent Class (親クラスを選択)]** メニューが開きます。下方にスクロールして、親クラスとして **[Actor]** を選択して、**[Next] ** をクリックします。

	![](AddProjectileClass.png)

1.	新しいクラスに 「FPSProjectile」 と名前を付けて、 **[Create]** をクリックします。

	![](CreateProjectileClass.png)

## USphere コンポーネントを追加する

1.	**Solution Explorer** で、`FPSProjectile` クラス ヘッダーを探して、 `FPSProjectile.h` を開きます。

1.	`FPSProjectile` インターフェースで、.`USphereComponent` への参照を追加します。

		// Sphere collision component (Sphere collision コンポーネント)
		UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
		USphereComponent* CollisionComp;

1.	`FPSProjectile.h` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)
		#pragma once

		#include "GameFramework/Actor.h"
		#include "FPSProjectile.generated.h"

		UCLASS()
		class FPSPROJECT_API AFPSProjectile : public AActor
		{
			GENERATED_BODY()

			public:
			// Sets default values for this actor's properties (このアクタのプロパティのデフォルト値を設定します)
			AFPSProjectile();

		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)

			virtual void BeginPlay() override;

			// Called every frame (フレーム毎に呼ばれます)

			virtual void Tick( float DeltaSeconds ) override;

		// Sphere collision component (Sphere collision コンポーネント)

			UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
			USphereComponent* CollisionComponent;

			};

1.	**Solution Explorer** で、`FPSProjectile` クラスの実装ファイルを探して、 `FPSProjectile.cpp` を開きます。

1.	以下のコードを、`FPSProjectile.cpp` 内の `AFPSProjectile` コンストラクタに追加します。

		// use a sphere as a simple collision representation (簡易なコリジョン表現に球体を使用)
		CollisionComponent = CreateDefaultSubobject<USphereComponent>(TEXT("SphereComponent"));
		// set the sphere's collision radius (球体のコリジョン半径を設定します)
		CollisionComponent->InitSphereRadius(15.0f);
		// set the root component to be the collision component (ルート コンポーネントを collision コンポーネントに設定します)
		RootComponent = CollisionComponent;

		[REGION:note]
		シミュレーションで動かすため、`CollisionComponent` を `RootComponent` にします。
		[/REGION]

1. `FPSProjectile.cpp` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)

		#include "FPSProject.h"
		#include "FPSProjectile.h"

		// Sets default values (デフォルト値を設定)
		AFPSProjectile::AFPSProjectile()
		{
		 	// Set this actor to call Tick() every frame. (フレーム毎に Tick() を呼び出すようにこのアクタを設定) You can turn this off to improve performance if you don't need it. (必要がなければパフォーマンスを向上させるためにオフにすることができます) 
			PrimaryActorTick.bCanEverTick = true;
		// use a sphere as a simple collision representation (簡易なコリジョン表現に球体を使用)
			CollisionComponent = CreateDefaultSubobject<USphereComponent>(TEXT("SphereComponent"));
			// set the sphere's collision radius (球体のコリジョン半径を設定します)
			CollisionComponent->InitSphereRadius(15.0f);
			// set the root component to be the collision component (ルート コンポーネントを collision コンポーネントに設定します)
			RootComponent = CollisionComponent;
		}

		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)

		void AFPSProjectile::BeginPlay()
		{
			Super::BeginPlay();

			}

		// Called every frame (フレーム毎に呼ばれます)

		void AFPSProjectile::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );

		}

## Projectile Movement  コンポーネントを追加する

1.	**Solution Explorer** で、`FPSProjectile` クラス ヘッダー ファイルを探して、 `FPSProjectile.h` を開きます。

1.	次のコードを `FPSProjectile.cpp` に追加します。

		//Projectile movement component (Projectile Movement コンポーネント)
		UPROPERTY(VisibleAnywhere, Category = Movement)
		UProjectileMovementComponent* ProjectileMovementComponent;

1.	`FPSProjectile.h` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)

		#pragma once

		#include "GameFramework/Actor.h"
		#include "FPSProjectile.generated.h"

		UCLASS()
		class FPSPROJECT_API AFPSProjectile : public AActor
		{
			GENERATED_BODY()

			public:
			// Sets default values for this actor's properties (このアクタのプロパティのデフォルト値を設定します)
			AFPSProjectile();

		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)
			virtual void BeginPlay() override;

			// Called every frame (フレーム毎に呼ばれます)

			virtual void Tick( float DeltaSeconds ) override;

		// Sphere collision component (Sphere collision コンポーネント)

			UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
			USphereComponent* CollisionComponent;

			//Projectile movement component (Projectile Movement コンポーネント)

			UPROPERTY(VisibleAnywhere, Category = Movement)
			UProjectileMovementComponent* ProjectileMovementComponent;
		};

1.	**Solution Explorer** で、`FPSProjectile` CPP ファイルを探して、`FPSProjectile.cpp` を開きます。

1.	以下のコードの行を、`FPSProjectile.cpp` 内の `FPSProjectile` コンストラクタに追加します。

		// この発射物の動作管理に ProjectileMovement コンポーネントを利用します。
		ProjectileMovement = ObjectInitializer.CreateDefaultSubobject<UProjectileMovementComponent>(this, TEXT("ProjectileComp"));

		if (ProjectileMovement != NULL)
		{
			ProjectileMovement->UpdatedComponent = CollisionComp;
			ProjectileMovement->InitialSpeed = 3000.f;
			ProjectileMovement->MaxSpeed = 3000.f;
			ProjectileMovement->bRotationFollowsVelocity = true;
			ProjectileMovement->bShouldBounce = true;
			ProjectileMovement->Bounciness = 0.3f;
		}

1.	`FPSProjectile.cpp` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)

		#include "FPSProject.h"
		#include "FPSProjectile.h"

		// Sets default values (デフォルト値を設定)
		AFPSProjectile::AFPSProjectile()
		{
		 	// Set this actor to call Tick() every frame. (フレーム毎に Tick() を呼び出すようにこのアクタを設定) You can turn this off to improve performance if you don't need it. (必要がなければパフォーマンスを向上させるためにオフにすることができます) 
			PrimaryActorTick.bCanEverTick = true;

		// use a sphere as a simple collision representation (簡易なコリジョン表現に球体を使用)

			CollisionComponent = CreateDefaultSubobject<USphereComponent>(TEXT("SphereComponent"));
			// set the sphere's collision radius (球体のコリジョン半径を設定します)
			CollisionComponent->InitSphereRadius(15.0f);
			// set the root component to be the collision component (ルート コンポーネントを collision コンポーネントに設定します)
			RootComponent = CollisionComponent;
		// use this component to drive this projectile's movement (このコンポーネントを使って発射物の動きを操作します)
			ProjectileMovementComponent = CreateDefaultSubobject<UProjectileMovementComponent>(TEXT("ProjectileMovementComponent"));
			ProjectileMovementComponent->SetUpdatedComponent(CollisionComponent);
			ProjectileMovementComponent->InitialSpeed = 3000.0f;
			ProjectileMovementComponent->MaxSpeed = 3000.0f;
			ProjectileMovementComponent->bRotationFollowsVelocity = true;
			ProjectileMovementComponent->bShouldBounce = true;
			ProjectileMovementComponent->Bounciness = 0.3f;
		}

		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)
		void AFPSProjectile::BeginPlay()
		{
			Super::BeginPlay();

			}

		// Called every frame (フレーム毎に呼ばれます)
		void AFPSProjectile::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );

		}

## 発射物の初期べロシティ（方向付き速度）を設定する

1.	**Solution Explorer** で、`FPSProjectile` クラス ヘッダー ファイルを探して、 `FPSProjectile.h` を開きます。

1.	`FPSProjectile.h` に以下の関数の宣言を追加します。

		//  Initiallizes velocity of the projectile in the shoot direction (発射方向の発射物のべロシティを初期化します) 
		void InitVelocity(const FVector& ShootDirection);

	この関数は、発射物を発射します。

1.	`FPSProjectile.h` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)

		#pragma once

		#include "GameFramework/Actor.h"

		#include "FPSProjectile.generated.h"

		UCLASS()
		class FPSPROJECT_API AFPSProjectile : public AActor
		{
			GENERATED_BODY()

		public:
			// Sets default values for this actor's properties (このアクタのプロパティのデフォルト値を設定します)
			AFPSProjectile();

		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)

			virtual void BeginPlay() override;
			// Called every frame (フレーム毎に呼ばれます)
			virtual void Tick( float DeltaSeconds ) override;
		// Sphere collision component (Sphere collision コンポーネント)
			UPROPERTY(VisibleDefaultsOnly, Category = Projectile)
			USphereComponent* CollisionComponent;

			//Projectile movement component (Projectile Movement コンポーネント)

			UPROPERTY(VisibleAnywhere, Category = Movement)
			UProjectileMovementComponent* ProjectileMovementComponent;
		// Function that initializes the projectile's velocity in the shoot direction (発射方向に発射物のべロシティを初期化する関数)
			void InitVelocity(const FVector& ShootDirection);
		};

1.	**Solution Explorer** で、`FPSProjectile` CPP ファイルを探して、`FPSProjectile.cpp` を開きます。

1.	次の関数定義を `FPSProjectile.cpp` に追加します。

		// Function that initializes the projectile's velocity in the shoot direction (発射方向に発射物のべロシティを初期化する関数)
		void AFPSProjectile::InitVelocity(const FVector& ShootDirection)
		{
			ProjectileMovementComponent->Velocity = ShootDirection * ProjectileMovementComponent->InitialSpeed;
		}

	[REGION:note]
	発射物の速度は `ProjectileMovementComponent` によって定義されているため、指定するのは発射方向だけです。
	[/REGION]

1.	`FPSProjectile.cpp` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)

		#include "FPSProject.h"
		#include "FPSProjectile.h"

		// Sets default values (デフォルト値を設定)
		AFPSProjectile::AFPSProjectile()
		{
		 	// Set this actor to call Tick() every frame. (フレーム毎に Tick() を呼び出すようにこのアクタを設定) You can turn this off to improve performance if you don't need it. (必要がなければパフォーマンスを向上させるためにオフにすることができます) 
			PrimaryActorTick.bCanEverTick = true;

		// use a sphere as a simple collision representation (簡易なコリジョン表現に球体を使用)

			CollisionComponent = CreateDefaultSubobject<USphereComponent>(TEXT("SphereComponent"));
			// set the sphere's collision radius (球体のコリジョン半径を設定します)
			CollisionComponent->InitSphereRadius(15.0f);
			// set the root component to be the collision component (ルート コンポーネントを collision コンポーネントに設定します)
			RootComponent = CollisionComponent;
		// use this component to drive this projectile's movement (このコンポーネントを使って発射物の動きを操作します)
			ProjectileMovementComponent = CreateDefaultSubobject<UProjectileMovementComponent>(TEXT("ProjectileMovementComponent"));
			ProjectileMovementComponent->SetUpdatedComponent(CollisionComponent);
			ProjectileMovementComponent->InitialSpeed = 3000.0f;
			ProjectileMovementComponent->MaxSpeed = 3000.0f;
			ProjectileMovementComponent->bRotationFollowsVelocity = true;
			ProjectileMovementComponent->bShouldBounce = true;
			ProjectileMovementComponent->Bounciness = 0.3f;
		}

		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)

		void AFPSProjectile::BeginPlay()
		{
			Super::BeginPlay();

			}

		// Called every frame (フレーム毎に呼ばれます)

		void AFPSProjectile::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );

		}

		// Function that initializes the projectile's velocity in the shoot direction (発射方向に発射物のべロシティを初期化する関数)

		void AFPSProjectile::InitVelocity(const FVector& ShootDirection)
		{
			ProjectileMovementComponent->Velocity = ShootDirection * ProjectileMovementComponent->InitialSpeed;
		}

## Fire 入力アクションをバインドする

1.	**Solution Explorer** で、`FPSCharacter` クラスヘッダ ファイルを探して、`FPSCharacter.cpp` を開きます。

1.	`FPSCharacter.h` に以下の関数の宣言を追加します。

		// handles firing (アクティベート処理)
		UFUNCTION()
		void OnFire();

1.	`FPSCharacter.h` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)
		#pragma once

		#include "GameFramework/Character.h"
		#include "FPSCharacter.generated.h"

		UCLASS()
		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()

		public:
			// Sets default values for this character's properties (このキャラクターのプロパティのデフォルト値を設定)
			AFPSCharacter();

		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)

			virtual void BeginPlay() override;
			// Called every frame (フレーム毎に呼ばれます)
			virtual void Tick( float DeltaSeconds ) override;
		// Called to bind functionality to input (機能と入力をバインドするために呼ばれます)
			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;

		// handles moving forward and backward (前後方向の移動を処理します)
			UFUNCTION()
			void MoveForward(float Value);

		// handles moving right and left (左右の移動を処理します)

			UFUNCTION()
			void MoveRight(float Value);
		// sets jump flag when key is pressed (キー押下時のジャンプフラグを設定) 
			UFUNCTION()
			void OnStartJump();

		// clears jump flag when key is released (キー解放時のジャンプフラグをクリア)

			UFUNCTION()
			void OnStopJump();

		// Function that handles firing projectiles (発射物をアクティベートする関数)

			UFUNCTION()
			void OnFire();
		// FPS camera (FPS カメラ)
			UPROPERTY(VisibleAnywhere)
			UCameraComponent* FPSCameraComponent;
		// pawn mesh:FPS view (arms are only seen by self) (一人称視点 (自分からだけ見える腕))
			UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
			USkeletalMeshComponent* FPSMesh;
		};

1.	**Solution Explorer** で、`FPSCharacter` CPP ファイルを探して、`FPSCharacter.cpp` を開きます。

1.	 `FPSCharacter.cpp` で以下のコードを `SetupPlayerInputComponent` に追加して `OnFire` 関数をバインドします。

		// set up projectile fire action binding (発射物のアクティベート操作のバインドを設定)
		InputComponent->BindAction("Fire", IE_Pressed, this, &AFPSCharacter::OnFire);

1.	次の関数定義を `FPSCharacter.cpp` に追加します。

		void AFPSCharacter::OnFire()
		{
		}	

1.	`FPSCharacter.cpp` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)

		#include "FPSProject.h"
		#include "FPSCharacter.h"
		// Sets default values (デフォルト値を設定)
		AFPSCharacter::AFPSCharacter()
		{
		 	// このキャラクターがフレーム毎に Tick() を呼び出すように設定します。You can turn this off to improve performance if you don't need it. (必要がなければパフォーマンスを向上させるためにオフにすることができます) 
			PrimaryActorTick.bCanEverTick = true;

		// create a first person camera component (first person camera コンポーネントを作成)
			FPSCameraComponent = CreateDefaultSubobject<UCameraComponent>(TEXT("FirstPersonCamera"));
			// attach the camera component to our capsule component (camera コンポーネントを capsule コンポーネントにアタッチします)
			FPSCameraComponent->AttachTo(GetCapsuleComponent());
			// position the camera slightly above the eyes (目の高さより少し上にカメラを設定)
			FPSCameraComponent->SetRelativeLocation(FVector(0.0f, 0.0f, 50.0f + BaseEyeHeight));
			// allow the pawn to control rotation (ポーンが回転を制御できるようにします)
			FPSCameraComponent->bUsePawnControlRotation = true;
		// create a first person mesh component (first person mesh コンポーネントを作成) 

			FPSMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("FirstPersonMesh"));
			// only the owning player sees this mesh (このメッシュは所有しているプレイヤーだけから見えます)
			FPSMesh->SetOnlyOwnerSee(true);
			// attach the FPS mesh to the FPS camera (FPS メッシュを FPS カメラにアタッチします)
			FPSMesh->AttachTo(FPSCameraComponent);
			// disable some environmental shadowing to preserve the illusion of having a single mesh (一部の背景のシャドウイングを無効にして、ひとつのメッシュを持っているという錯覚を維持します) 
			FPSMesh->bCastDynamicShadow = false;
			FPSMesh->CastShadow = false;

			// everyone but you can see the regular body mesh (自分以外は誰でも通常のボディメッシュを見ることができます)

			GetMesh()->SetOwnerNoSee(true);
		}

		// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)

		void AFPSCharacter::BeginPlay()
		{
			Super::BeginPlay();

			const int32 Key = -1;
			static const FString DebugMessage = TEXT("We are using FPSCharacter.");
			FColor DisplayColor = FColor::Red;
			float TimeToDisplay = 5.0f; //seconds (秒) 
			if (GEngine != nullptr)
			{
				GEngine->AddOnScreenDebugMessage(Key, TimeToDisplay, DisplayColor, DebugMessage);

			}
		}
		// Called every frame (フレーム毎に呼ばれます)
		void AFPSCharacter::Tick( float DeltaTime )
		{
			Super::Tick( DeltaTime );

		}

		// Called to bind functionality to input (機能と入力をバインドするために呼ばれます)

		void AFPSCharacter::SetupPlayerInputComponent(class UInputComponent* InputComponent)
		{
			Super::SetupPlayerInputComponent(InputComponent);

		// set up gameplay key bindings (ゲームプレイのキーバインドのセットアップ)

			InputComponent->BindAxis("MoveForward", this, &AFPSCharacter::MoveForward);
			InputComponent->BindAxis("MoveRight", this, &AFPSCharacter::MoveRight);

		// set up gameplay mouse bindings (ゲームプレイのマウス バインドのセットアップ) 

			InputComponent->BindAxis("Turn", this, &AFPSCharacter::AddControllerYawInput);
			InputComponent->BindAxis("LookUp", this, &AFPSCharacter::AddControllerPitchInput);
		// set up jump action bindings (ジャンプ アクションのバインドのセットアップ) 
			InputComponent->BindAction("Jump", IE_Pressed, this, &AFPSCharacter::OnStartJump);
			InputComponent->BindAction("Jump", IE_Released, this, &AFPSCharacter::OnStopJump);
		// set up projectile fire action binding (発射物のアクティベート操作のバインドを設定)
			InputComponent->BindAction("Fire", IE_Pressed, this, &AFPSCharacter::OnFire);
		}
		void AFPSCharacter::MoveForward(float Value)
		{
			// find out which way is forward (前進方向の確認)
			FRotator Rotation = Controller->GetControlRotation();
			// add movement in that direction (その方向へ動きを追加)
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
			AddMovementInput(Direction, Value);
		}

		void AFPSCharacter::MoveRight(float Value)
		{
			// find out which way is right (右方向の確認)
			FRotator Rotation = Controller->GetControlRotation();
			// add movement in that direction (その方向へ動きを追加)
			const FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);
			AddMovementInput(Direction, Value);
		}

		void AFPSCharacter::OnStartJump()
		{
			bPressedJump = true;
		}
		void AFPSCharacter::OnStopJump()
		{
			bPressedJump = false;
		}
		void AFPSCharacter::OnFire()

		{
		}

## 発射物のスポーン位置を定義する

1.	`FPSProjectile` アクタをスポーンする場合、`OnFire` 関数を実装する場合に考慮すべきポイントが以下のように 2 つあります。

*	発射物をスポーンする位置
*	projectile クラス ( `FPSCharacter` とその派生ブループリントがどの発射物をスポーンするかをわかるようにするため)

[REGION:note]
カメラ空間のオフセット ベクターを使用して発射物のスポーン位置を決めます。
このパラメータを編集可能にして、BP_FPSCharacter ブループリントで設定および微調整ができるようにします。
最終的に、このデータに基づいて、発射物の初期位置を計算します。
[/REGION]

1.	**Solution Explorer** で、`FPSCharacter` クラスヘッダ ファイルを探して、`FPSCharacter.cpp` を開きます。

1.	次のコードを `FPSCharacter.h` に追加します。

		// Gun muzzle's offset from the camera location (カメラ位置から銃口のオフセット)
		UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Gameplay)
		FVector MuzzleOffset;

	[REGION:note]
	EditAnywhere 指定子は、ブループリントエディタの [Defaults] モード、またはキャラクターの任意のインスタンスの [Details] タブから銃口のオフセット値を変更することができます。 
	BlueprintReadWrite 指定子は、ブループリント内で銃口のオフセット値の取得および設定をできるようにします。
	[/REGION]

1.	次のコードを `FPSCharacter.h` に追加します。

		// Projectile class to spawn (スポーンする Projectile クラス)
		UPROPERTY(EditDefaultsOnly, Category = Projectile)
		TSubclassOf<class AFPSProjectile> ProjectileClass;

	[REGION:note]
	EditDefaultsOnly 指定子では、ブループリントの各インスタンスではなく、ブループリントのデフォルトとして projectile クラスを設定できます。
	[/REGION]

1.	`FPSCharacter.h` は以下のようになります。

		// Fill out your copyright notice in the Description page of Project Settings. (Project Settings の Description ページに著作権情報を入力してください)
		#pragma once

		#include "GameFramework/Character.h"
		#include "FPSCharacter.generated.h"

		UCLASS()
		class FPSPROJECT_API AFPSCharacter : public ACharacter
		{
			GENERATED_BODY()

		public:
			// Sets default values for this character's properties (このキャラクターのプロパティのデフォルト値を設定)
			AFPSCharacter();
			// Called when the game starts or when spawned (ゲーム開始時またはスポーン時に呼ばれます)
			virtual void BeginPlay() override;

			// Called every frame (フレーム毎に呼ばれます)
			virtual void Tick( float DeltaSeconds ) override;
		// Called to bind functionality to input (機能と入力をバインドするために呼ばれます)
			virtual void SetupPlayerInputComponent(class UInputComponent* InputComponent) override;
		// handles moving forward and backward (前後方向の移動を処理します)
			UFUNCTION()
			void MoveForward(float Value);

		// handles moving right and left (左右の移動を処理します)

			UFUNCTION()
			void MoveRight(float Value);
		// sets jump flag when key is pressed (キー押下時のジャンプフラグを設定) 
			UFUNCTION()
			void OnStartJump();
		// clears jump flag when key is released (キー解放時のジャンプフラグをクリア)
			UFUNCTION()
			void OnStopJump();

		// Function that handles firing projectiles (発射物をアクティベートする関数)

			UFUNCTION()
			void OnFire();

		// FPS camera (FPS カメラ)

			UPROPERTY(VisibleAnywhere)
			UCameraComponent* FPSCameraComponent;

		// pawn mesh:FPS view (arms are only seen by self) (一人称視点 (自分からだけ見える腕))

			UPROPERTY(VisibleDefaultsOnly, Category = Mesh)
			USkeletalMeshComponent* FPSMesh;

		// Gun muzzle's offset from the camera location (カメラ位置から銃口のオフセット)

			UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Gameplay)
			FVector MuzzleOffset;

		// Projectile class to spawn (スポーンする Projectile クラス)

			UPROPERTY(EditDefaultsOnly, Category = Projectile)
			TSubclassOf<class AFPSProjectile> ProjectileClass;

		};

## コードのコンパイルとチェック

新規で実装した発射物のコードをコンパイルし、チェックします。

1.	Visual Studio にすべてのインターフェースと実装ファイルを保存します。

1.	**[Solution Explorer (ソリューション エクスプローラ)]** で **[FPSProject]** を探します。

1.	**[FPSProject]** 上で右クリックして、**[Build (ビルド)]** を選択してプロジェクトをコンパイルします。

	![](BuildFPSProject.png)

	[REGION:tip]
	このステップの目的は、次のステップに進む前にビルド エラーがあれば見つけることです。
	[/REGION]

%Steps%