// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.


#include "Common.usf"
#include "GammaCorrectionCommon.usf"

#if USE_MATERIALS
#include "Material.usf"
#endif

float4x4 ViewProjection;

float SwitchVerticalAxisMultiplier;

struct VertexOut
{
	float4 Position : SV_POSITION;
	float4 Color : COLOR0;
	float4 TextureCoordinates : TEXCOORD0;
	float4 ClipOriginAndPos : TEXCOORD1;
	float4 ClipExtents : TEXCOORD2;
	float2 MaterialTexCoords : TEXCOORD3;
};


VertexOut Main(
	in float4 InTextureCoordinates : ATTRIBUTE0,
	in float2 InMaterialTextureCoordinates : ATTRIBUTE1,
	in float2 InPosition : ATTRIBUTE2,
	in float2 InClipOrigin : ATTRIBUTE3,
	in float4 InClipExtents : ATTRIBUTE4,
	in float4 InColor : ATTRIBUTE5
	)
{
	VertexOut VOut;

	float4 WorldPosition = float4(InPosition.xy,0,1);
#if USE_MATERIALS
	FMaterialVertexParameters VertexParameters;
	VertexParameters.WorldPosition = WorldPosition.xyz;
#if USE_INSTANCING
	VertexParameters.PerInstanceParams = float4(0,0,0,0);
#endif
	VertexParameters.VertexColor = InColor;
	WorldPosition.xyz += GetMaterialWorldPositionOffset(VertexParameters);
#endif

	VOut.Position = mul(WorldPosition, ViewProjection);

#if ES2_PROFILE && COMPILER_GLSL_ES2
	// @todo-mobile: Fix this in the projection matrix
	VOut.Position.y *= SwitchVerticalAxisMultiplier;
#endif

	// TextureCoordinates contains both the first and second texture coordinates in xy and zw respectively.
	VOut.TextureCoordinates = InTextureCoordinates;
	VOut.MaterialTexCoords = InMaterialTextureCoordinates;
	VOut.ClipOriginAndPos = float4(InClipOrigin, InPosition.xy);
	VOut.ClipExtents = InClipExtents;

	InColor.rgb = sRGBToLinear(InColor.rgb);
	VOut.Color = InColor FCOLOR_COMPONENT_SWIZZLE;

	return VOut;
}
