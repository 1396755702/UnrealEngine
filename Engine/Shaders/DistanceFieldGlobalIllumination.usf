// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	DistanceFieldGlobalIllumination.usf
=============================================================================*/

#include "Common.usf"
#include "DeferredShadingCommon.usf"
#include "DistanceFieldLightingShared.usf"
#include "DistanceFieldAOShared.usf"
#include "DynamicLightingCommon.usf"

#define USE_SHADOW_CULLING_FOR_VPL_PLACEMENT 0

void RayTraceThroughLightTileCulledObjects(
	float3 RayStartPosition, 
	float3 RayDirection, 
	float RayLength, 
	uint NumIntersectingObjects, 
	uint CulledDataStart, 
	out float OutMinRayTime, 
	out float OutMinRayVisibility,
	out uint OutObjectIndex)
{
	float MinSphereRadius = .1f;
	float MaxSphereRadius = .1f;

	float3 WorldRayStart = RayStartPosition;
	float3 WorldRayEnd = RayStartPosition + RayDirection * RayLength;
	float MaxRayTime = RayLength;
	float TanLightAngle = 0;

	float MinRayTime = MaxRayTime;
	float MinVisibility = 1;

	LOOP
	for (uint ListObjectIndex = 0; ListObjectIndex < NumIntersectingObjects; ListObjectIndex++)
	{
		#if USE_SHADOW_CULLING_FOR_VPL_PLACEMENT
			uint ObjectIndex = ShadowTileArrayData.Load(ListObjectIndex * ShadowTileListGroupSize.x * ShadowTileListGroupSize.y + CulledDataStart);
		#else
			uint ObjectIndex = ListObjectIndex;
		#endif

		float3 LocalPositionExtent = LoadObjectLocalPositionExtent(ObjectIndex);
		float4x4 WorldToVolume = LoadObjectWorldToVolume(ObjectIndex);
		float4 UVScaleAndVolumeScale = LoadObjectUVScale(ObjectIndex);
		float3 UVAdd = LoadObjectUVAdd(ObjectIndex);

		float3 VolumeRayStart = mul(float4(WorldRayStart, 1), WorldToVolume).xyz;
		float3 VolumeRayEnd = mul(float4(WorldRayEnd, 1), WorldToVolume).xyz;
		float3 VolumeRayDirection = VolumeRayEnd - VolumeRayStart;
		float VolumeRayLength = length(VolumeRayDirection);
		VolumeRayDirection /= VolumeRayLength;
		float VolumeMinSphereRadius = MinSphereRadius / UVScaleAndVolumeScale.w;
		float VolumeMaxSphereRadius = MaxSphereRadius / UVScaleAndVolumeScale.w;

		float4 SphereCenterAndRadius = LoadObjectPositionAndRadius(ObjectIndex);
		float ObjectCenterDistanceAlongRay = max(dot(SphereCenterAndRadius.xyz - WorldRayStart, WorldRayEnd - WorldRayStart), 0);
		// Expand the intersection box by the radius of the cone at the distance of the object along the cone
		float LocalConeRadiusAtObject = min(TanLightAngle * ObjectCenterDistanceAlongRay / UVScaleAndVolumeScale.w, VolumeMaxSphereRadius);

		float2 IntersectionTimes = LineBoxIntersect(VolumeRayStart, VolumeRayEnd, -LocalPositionExtent - LocalConeRadiusAtObject, LocalPositionExtent + LocalConeRadiusAtObject);

		BRANCH
		if (IntersectionTimes.x < IntersectionTimes.y && IntersectionTimes.x < 1)
		{
			float SampleRayTime = IntersectionTimes.x * VolumeRayLength;
			uint MaxSteps = 64;
			float MinStepSize = 1.0f / (4 * MaxSteps);

			float MinDistance = 1000000;
			float3 IntersectionPosition = float3(0, 0, 0);

			uint StepIndex = 0;

			LOOP
			for (; StepIndex < MaxSteps; StepIndex++)
			{
				float3 SampleVolumePosition = VolumeRayStart + VolumeRayDirection * SampleRayTime;
				float3 ClampedSamplePosition = clamp(SampleVolumePosition, -LocalPositionExtent, LocalPositionExtent);
				float DistanceToClamped = length(ClampedSamplePosition - SampleVolumePosition);
				float3 VolumeUV = DistanceFieldVolumePositionToUV(ClampedSamplePosition, UVScaleAndVolumeScale.xyz, UVAdd);
				float DistanceField = Texture3DSampleLevel(DistanceFieldTexture, DistanceFieldSampler, VolumeUV, 0).x + DistanceToClamped;

				MinDistance = min(MinDistance, DistanceField);
				float SphereRadius = clamp(TanLightAngle * SampleRayTime, VolumeMinSphereRadius, VolumeMaxSphereRadius);

				MinVisibility = min(MinVisibility, saturate(DistanceField / SphereRadius));
				IntersectionPosition = SampleVolumePosition;

				float StepDistance = max(DistanceField, MinStepSize);
				
				// Terminate the trace if we reached a negative area or went past the end of the ray
				if (DistanceField <= 0 
					|| SampleRayTime + StepDistance > IntersectionTimes.y * VolumeRayLength)
				{
					// Step back to the intersection point if we went inside
					SampleRayTime += min(DistanceField, 0);
					break;
				}

				SampleRayTime += StepDistance;
			}

			if (MinDistance < 0 || StepIndex == MaxSteps)
			{
				MinVisibility = 0;
				//MinRayTime = min(MinRayTime, SampleRayTime * UVScaleAndVolumeScale.w);

				if (SampleRayTime * UVScaleAndVolumeScale.w < MinRayTime)
				{
					MinRayTime = UVScaleAndVolumeScale.w * SampleRayTime;
					OutObjectIndex = ObjectIndex;
				}
			}
		}
	}

	OutMinRayVisibility = MinVisibility;
	OutMinRayTime = MinRayTime;
}

float3 ComputeDistanceFieldNormal(float3 WorldPosition, uint ObjectIndex)
{
	float4x4 WorldToVolume = LoadObjectWorldToVolume(ObjectIndex);
	float4 UVScaleAndVolumeScale = LoadObjectUVScale(ObjectIndex);
	float3 UVAdd = LoadObjectUVAdd(ObjectIndex);

	float3x3 VolumeToWorld = LoadObjectVolumeToWorld(ObjectIndex);

	float3 LocalPositionExtent = LoadObjectLocalPositionExtent(ObjectIndex);

	float3 VolumeShadingPosition = mul(float4(WorldPosition, 1), WorldToVolume).xyz;
	float3 ClampedSamplePosition = clamp(VolumeShadingPosition, -LocalPositionExtent, LocalPositionExtent);
	float3 LocalShadingUV = DistanceFieldVolumePositionToUV(ClampedSamplePosition, UVScaleAndVolumeScale.xyz, UVAdd);

	// Used to clamp UVs inside valid space of this object's distance field
	float3 UVMin = DistanceFieldVolumePositionToUV(-LocalPositionExtent, UVScaleAndVolumeScale.xyz, UVAdd);
	float3 UVMax = DistanceFieldVolumePositionToUV(LocalPositionExtent, UVScaleAndVolumeScale.xyz, UVAdd);
		
	float R = Texture3DSampleLevel(DistanceFieldTexture, DistanceFieldSampler, float3(min(LocalShadingUV.x + DistanceFieldAtlasTexelSize.x, UVMax.x), LocalShadingUV.y, LocalShadingUV.z), 0).x;
	float L = Texture3DSampleLevel(DistanceFieldTexture, DistanceFieldSampler, float3(max(LocalShadingUV.x - DistanceFieldAtlasTexelSize.x, UVMin.x), LocalShadingUV.y, LocalShadingUV.z), 0).x;
	float F = Texture3DSampleLevel(DistanceFieldTexture, DistanceFieldSampler, float3(LocalShadingUV.x, min(LocalShadingUV.y + DistanceFieldAtlasTexelSize.y, UVMax.y), LocalShadingUV.z), 0).x;
	float B = Texture3DSampleLevel(DistanceFieldTexture, DistanceFieldSampler, float3(LocalShadingUV.x, max(LocalShadingUV.y - DistanceFieldAtlasTexelSize.y, UVMin.y), LocalShadingUV.z), 0).x;
	float U = Texture3DSampleLevel(DistanceFieldTexture, DistanceFieldSampler, float3(LocalShadingUV.x, LocalShadingUV.y, min(LocalShadingUV.z + DistanceFieldAtlasTexelSize.z, UVMax.z)), 0).x;
	float D = Texture3DSampleLevel(DistanceFieldTexture, DistanceFieldSampler, float3(LocalShadingUV.x, LocalShadingUV.y, max(LocalShadingUV.z - DistanceFieldAtlasTexelSize.z, UVMin.z)), 0).x;
		
	float3 Gradient = .5f * float3(R - L, F - B, U - D);
	
	if (dot(Gradient, Gradient) == 0)
	{
		Gradient = float3(0, 0, 1);
	}

	float3 LocalNormal = normalize(Gradient);
	float3 WorldNormal = mul(LocalNormal, VolumeToWorld);
	return normalize(WorldNormal);
}

/** From light source, into world. */
float4 LightDirectionAndTraceDistance;
float4 LightColor;
float4x4 WorldToShadow;
float4x4 ShadowToWorld;
float2 InvPlacementGridSize;
float VPLPlacementCameraRadius;

// Must match C++
#define VPL_CLUSTER_SIZE_ONE_DIM 4
#define VPL_CLUSTER_SIZE (VPL_CLUSTER_SIZE_ONE_DIM * VPL_CLUSTER_SIZE_ONE_DIM)

// In float4's, must match C++
RWBuffer<uint> RWVPLParameterBuffer;
RWBuffer<float4> RWVPLClusterData;
RWBuffer<float4> RWVPLData;

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void VPLPlacementCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
	{
		// Distance for directional lights to trace
		float TraceDistance = LightDirectionAndTraceDistance.w;
		float3 LightDirection = LightDirectionAndTraceDistance.xyz;
		
// Note: have to change the dispatch dimensions in C++ to enable this
#define GENERATE_VPL_CLUSTERS 0
#if GENERATE_VPL_CLUSTERS
		uint NextVPLIndex = 0;
		float3 IntersectionPositions[VPL_CLUSTER_SIZE];
		float3 IntersectionNormals[VPL_CLUSTER_SIZE];
		float3 AveragePosition = 0;
		float3 AverageNormal = 0;

		for (uint ChildY = 0; ChildY < VPL_CLUSTER_SIZE_ONE_DIM; ChildY++)
		{
			for (uint ChildX = 0; ChildX < VPL_CLUSTER_SIZE_ONE_DIM; ChildX++)
			{
				uint2 ChildCoordinate = DispatchThreadId.xy * VPL_CLUSTER_SIZE_ONE_DIM + uint2(ChildX, ChildY);

				if (all(ChildCoordinate * InvPlacementGridSize < 1))
				{
					float2 NormalizedCellPosition = ChildCoordinate * InvPlacementGridSize * 2 - 1;
					float3 CellStartWorldPosition = mul(float4(NormalizedCellPosition.x, NormalizedCellPosition.y, 0, 1), ShadowToWorld).xyz;

					uint NumIntersectingObjects = GetCulledNumObjects();
					uint CulledDataStart = 0;

				#if USE_SHADOW_CULLING_FOR_VPL_PLACEMENT

					// Transform into shadow space
					float4 HomogeneousShadowPosition = mul(float4(CellStartWorldPosition, 1), WorldToShadow);
					float2 NormalizedShadowPosition = HomogeneousShadowPosition.xy * .5f + .5f;
					NormalizedShadowPosition.y = 1 - NormalizedShadowPosition.y;
					// Quantize the shadow position to get our tile position
					uint2 TilePosition = (uint2)(NormalizedShadowPosition * ShadowTileListGroupSize);
					// Fetch the tile head information
					uint2 TileHead = GetShadowTileHead(TilePosition);
					NumIntersectingObjects = TileHead.y;
					CulledDataStart = TileHead.x;

				#endif

					float MinRayTime = 0;
					float MinRayVisibility = 1;
					uint ObjectIndex = 0;
					RayTraceThroughLightTileCulledObjects(CellStartWorldPosition, LightDirection, TraceDistance, NumIntersectingObjects, CulledDataStart, MinRayTime, MinRayVisibility, ObjectIndex);

					if (MinRayVisibility < 1)
					{
						float3 IntersectionPosition = CellStartWorldPosition + LightDirection * MinRayTime;
						float3 IntersectionNormal = ComputeDistanceFieldNormal(IntersectionPosition, ObjectIndex);
						AveragePosition += IntersectionPosition;
						AverageNormal += IntersectionNormal;
						IntersectionPositions[NextVPLIndex] = IntersectionPosition;
						IntersectionNormals[NextVPLIndex] = IntersectionNormal;
						NextVPLIndex++;
					}
				}
			}
		}

		uint NumVPLs = NextVPLIndex;

		if (NumVPLs > 0)
		{
			uint VPLArrayStartIndex;
			InterlockedAdd(RWVPLParameterBuffer[1], NumVPLs, VPLArrayStartIndex);

			float3 DiffuseColor = .5f;
			float CellExtent = VPLPlacementCameraRadius * InvPlacementGridSize.x;
			float CellRadius = sqrt(2) * CellExtent;

			float3 TotalFlux = 0;

			for (uint ChildIndex = 0; ChildIndex < NumVPLs; ChildIndex++)
			{
				float3 Position = IntersectionPositions[ChildIndex];
				float3 Normal = IntersectionNormals[ChildIndex];
				float3 Flux = DiffuseColor * LightColor.rgb * max(dot(Normal, -LightDirection), 0) * PI * CellRadius * CellRadius;

				uint VPLBaseIndex = (VPLArrayStartIndex + ChildIndex) * VPL_DATA_STRIDE;
				RWVPLData[VPLBaseIndex + 0] = float4(Position, CellRadius);
				RWVPLData[VPLBaseIndex + 1] = float4(Normal, 0);
				RWVPLData[VPLBaseIndex + 2] = float4(Flux, 0);

				TotalFlux += Flux;
			}

			AveragePosition /= NumVPLs;
			float AverageNormalLength = length(AverageNormal);
			AverageNormal = AverageNormal / max(AverageNormalLength, .000001f);

			float TotalChildDiskArea = NumVPLs * PI * CellRadius * CellRadius;
			float CombinedRadius = sqrt(TotalChildDiskArea / PI);

			uint ClusterArrayStartIndex;
			InterlockedAdd(RWVPLParameterBuffer[0], 1, ClusterArrayStartIndex);
			RWVPLClusterData[ClusterArrayStartIndex * VPL_DATA_STRIDE + 0] = float4(AveragePosition, CombinedRadius);
			RWVPLClusterData[ClusterArrayStartIndex * VPL_DATA_STRIDE + 1] = float4(AverageNormal, NumVPLs);
			RWVPLClusterData[ClusterArrayStartIndex * VPL_DATA_STRIDE + 2] = float4(TotalFlux, VPLArrayStartIndex);
		}
#else
		uint2 ChildCoordinate = DispatchThreadId.xy;

		if (all(ChildCoordinate * InvPlacementGridSize < 1))
		{
			float2 NormalizedCellPosition = ChildCoordinate * InvPlacementGridSize * 2 - 1;
			float3 CellStartWorldPosition = mul(float4(NormalizedCellPosition.x, NormalizedCellPosition.y, 0, 1), ShadowToWorld).xyz;

			uint NumIntersectingObjects = GetCulledNumObjects();
			uint CulledDataStart = 0;

		#if USE_SHADOW_CULLING_FOR_VPL_PLACEMENT

			// Transform into shadow space
			float4 HomogeneousShadowPosition = mul(float4(CellStartWorldPosition, 1), WorldToShadow);
			float2 NormalizedShadowPosition = HomogeneousShadowPosition.xy * .5f + .5f;
			NormalizedShadowPosition.y = 1 - NormalizedShadowPosition.y;
			// Quantize the shadow position to get our tile position
			uint2 TilePosition = (uint2)(NormalizedShadowPosition * ShadowTileListGroupSize);
			// Fetch the tile head information
			uint2 TileHead = GetShadowTileHead(TilePosition);
			NumIntersectingObjects = TileHead.y;
			CulledDataStart = TileHead.x;

		#endif

			float MinRayTime = 0;
			float MinRayVisibility = 1;
			uint ObjectIndex = 0;
			RayTraceThroughLightTileCulledObjects(CellStartWorldPosition, LightDirection, TraceDistance, NumIntersectingObjects, CulledDataStart, MinRayTime, MinRayVisibility, ObjectIndex);

			if (MinRayVisibility < 1)
			{
				float3 IntersectionPosition = CellStartWorldPosition + LightDirection * MinRayTime;
				float3 IntersectionNormal = ComputeDistanceFieldNormal(IntersectionPosition, ObjectIndex);

				uint VPLArrayStartIndex;
				InterlockedAdd(RWVPLParameterBuffer[1], 1, VPLArrayStartIndex);

				float3 DiffuseColor = .5f;
				float CellExtent = VPLPlacementCameraRadius * InvPlacementGridSize.x;
				float CellRadius = sqrt(2) * CellExtent;

				float3 Flux = DiffuseColor * LightColor.rgb * max(dot(IntersectionNormal, -LightDirection), 0) * PI * CellRadius * CellRadius;

				uint VPLBaseIndex = (VPLArrayStartIndex + 0) * VPL_DATA_STRIDE;
				RWVPLData[VPLBaseIndex + 0] = float4(IntersectionPosition, CellRadius);
				RWVPLData[VPLBaseIndex + 1] = float4(IntersectionNormal, 0);
				RWVPLData[VPLBaseIndex + 2] = float4(Flux, 0);
			}
		}
#endif
	}
}

Buffer<uint> VPLParameterBuffer;
RWBuffer<uint> RWDispatchParameters;

[numthreads(1, 1, 1)]
void SetupVPLCullndirectArgumentsCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
#if GENERATE_VPL_CLUSTERS
	uint NumClusterVPLs = VPLParameterBuffer[0];
#else
	uint NumClusterVPLs = VPLParameterBuffer[1];
#endif

	// One thread per record, divide and round up
	RWDispatchParameters[0] = (NumClusterVPLs + THREADGROUP_TOTALSIZE - 1) / THREADGROUP_TOTALSIZE;
	RWDispatchParameters[1] = 1;
	RWDispatchParameters[2] = 1;
}

Buffer<float4> VPLClusterData;
Buffer<float4> VPLData;

RWBuffer<uint> RWCulledVPLParameterBuffer;
RWBuffer<float4> RWCulledVPLClusterData;
RWBuffer<float4> RWCulledVPLData;

[numthreads(THREADGROUP_TOTALSIZE, 1, 1)]
void CullVPLsForViewCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
#if GENERATE_VPL_CLUSTERS
	uint VPLClusterIndex = DispatchThreadId.x;
	uint NumClusterVPLs = VPLParameterBuffer[0];

	if (VPLClusterIndex < NumClusterVPLs)
	{
		float4 BoundingSphere = VPLClusterData[VPLClusterIndex * VPL_DATA_STRIDE + 0];
		float DistanceToViewSq = dot(View.ViewOrigin.xyz - BoundingSphere.xyz, View.ViewOrigin.xyz - BoundingSphere.xyz);

		if (DistanceToViewSq < Square(AOMaxViewDistance + BoundingSphere.w)
			&& ViewFrustumIntersectSphere(BoundingSphere.xyz, BoundingSphere.w + AOMaxDistance))
		{
			float4 ClusterNormalAndNumVPLs = VPLClusterData[VPLClusterIndex * VPL_DATA_STRIDE + 1];
			float4 ClusterFluxAndVPLStartIndex = VPLClusterData[VPLClusterIndex * VPL_DATA_STRIDE + 2];

			uint DestStartVPLIndex;
			InterlockedAdd(RWCulledVPLParameterBuffer[1], (uint)ClusterNormalAndNumVPLs.w, DestStartVPLIndex);
			uint SourceVPLIndex = ClusterFluxAndVPLStartIndex.w;
			uint NumChildVPLs = ClusterNormalAndNumVPLs.w;

			for (uint ChildIndex = 0; ChildIndex < NumChildVPLs; ChildIndex++)
			{
				uint SourceIndex = (SourceVPLIndex + ChildIndex) * VPL_DATA_STRIDE;
				uint DestIndex = (DestStartVPLIndex + ChildIndex) * VPL_DATA_STRIDE;
				RWCulledVPLData[DestIndex + 0] = VPLData[SourceIndex + 0];
				RWCulledVPLData[DestIndex + 1] = VPLData[SourceIndex + 1];
				RWCulledVPLData[DestIndex + 2] = VPLData[SourceIndex + 2];
			}

			uint DestClusterIndex;
			InterlockedAdd(RWCulledVPLParameterBuffer[0], 1, DestClusterIndex);
			
			RWCulledVPLClusterData[DestClusterIndex * VPL_DATA_STRIDE + 0] = BoundingSphere;
			RWCulledVPLClusterData[DestClusterIndex * VPL_DATA_STRIDE + 1] = ClusterNormalAndNumVPLs;
			RWCulledVPLClusterData[DestClusterIndex * VPL_DATA_STRIDE + 2] = float4(ClusterFluxAndVPLStartIndex.xyz, DestStartVPLIndex);
		}
	}

#else

	uint VPLIndex = DispatchThreadId.x;
	uint NumVPLs = VPLParameterBuffer[1];

	if (VPLIndex < NumVPLs)
	{
		uint SourceIndex = VPLIndex * VPL_DATA_STRIDE;
		float4 BoundingSphere = VPLData[SourceIndex + 0];
		float DistanceToViewSq = dot(View.ViewOrigin.xyz - BoundingSphere.xyz, View.ViewOrigin.xyz - BoundingSphere.xyz);

		if (DistanceToViewSq < Square(AOMaxViewDistance + BoundingSphere.w)
			&& ViewFrustumIntersectSphere(BoundingSphere.xyz, BoundingSphere.w + AOMaxDistance))
		{
			uint DestStartVPLIndex;
			InterlockedAdd(RWCulledVPLParameterBuffer[1], 1, DestStartVPLIndex);

			uint DestIndex = DestStartVPLIndex * VPL_DATA_STRIDE;
			RWCulledVPLData[DestIndex + 0] = BoundingSphere;
			RWCulledVPLData[DestIndex + 1] = VPLData[SourceIndex + 1];
			RWCulledVPLData[DestIndex + 2] = VPLData[SourceIndex + 2];
		}
	}

#endif
}

RWBuffer<uint> RWTileArrayData;
RWBuffer<uint> RWTileHeadDataUnpacked;

Buffer<float4> TileConeAxisAndCos;
Buffer<float4> TileConeDepthRanges;
uint2 NumGroups;

// Must match C++
#define MAX_VPLS_PER_TILE 1024

[numthreads(THREADGROUP_TOTALSIZE, 1, 1)]
void VPLTileCullCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
    uint ThreadIndex = GroupThreadId.x;
	uint NumClusterVPLs = VPLParameterBuffer[0];
	uint TileIndex = GroupId.y * NumGroups.x + GroupId.x;

	float4 ConeAxisAndCos = TileConeAxisAndCos.Load(TileIndex);
	float4 ConeAxisDepthRanges = TileConeDepthRanges.Load(TileIndex);
	float3 TileConeVertex = 0;
	float3 TileConeAxis = ConeAxisAndCos.xyz;
	float TileConeAngleCos = ConeAxisAndCos.w;
	float TileConeAngleSin = sqrt(1 - TileConeAngleCos * TileConeAngleCos);

	LOOP
	for (uint VPLClusterIndex = ThreadIndex; VPLClusterIndex < NumClusterVPLs; VPLClusterIndex += THREADGROUP_TOTALSIZE)
	{
		float4 BoundingSphere = VPLClusterData[VPLClusterIndex * VPL_DATA_STRIDE + 0];
		float3 ViewSpaceSphereCenter = mul(float4(BoundingSphere.xyz + View.PreViewTranslation.xyz, 1), View.TranslatedWorldToView).xyz;
		
		BRANCH
		if (SphereIntersectConeWithDepthRanges(float4(ViewSpaceSphereCenter, AOMaxDistance), TileConeVertex, TileConeAxis, TileConeAngleCos, TileConeAngleSin, ConeAxisDepthRanges))
		{
			uint CulledVPLClusterIndex;
			InterlockedAdd(RWTileHeadDataUnpacked[TileIndex * 2 + 1], 1, CulledVPLClusterIndex);

			if (CulledVPLClusterIndex < MAX_VPLS_PER_TILE)
			{
				RWTileArrayData[TileIndex * MAX_VPLS_PER_TILE + CulledVPLClusterIndex] = VPLClusterIndex;
			}
		}
	}
}

float RayTraceThroughGlobalObjects(
	float3 RayStartPosition, 
	float3 RayDirection, 
	float RayLength,
	float TanConeAngle,
	float ConeEndRayTime)
{
	float MaxSphereRadius = 100;

	float3 WorldRayStart = RayStartPosition;
	float3 WorldRayEnd = RayStartPosition + RayDirection * RayLength;
	float MaxRayTime = RayLength;

	float MinRayTime = MaxRayTime;
	float MinVisibility = 1;

	LOOP
	for (uint ObjectIndex = 0; ObjectIndex < NumSceneObjects && MinVisibility > 0; ObjectIndex++)
	{
		float3 LocalPositionExtent = LoadGlobalObjectLocalPositionExtent(ObjectIndex);
		float4x4 WorldToVolume = LoadGlobalObjectWorldToVolume(ObjectIndex);
		float4 UVScaleAndVolumeScale = LoadGlobalObjectUVScale(ObjectIndex);
		float3 UVAdd = LoadGlobalObjectUVAdd(ObjectIndex);

		float3 VolumeRayStart = mul(float4(WorldRayStart, 1), WorldToVolume).xyz;
		float3 VolumeRayEnd = mul(float4(WorldRayEnd, 1), WorldToVolume).xyz;
		float3 VolumeRayDirection = VolumeRayEnd - VolumeRayStart;
		float VolumeRayLength = length(VolumeRayDirection);
		VolumeRayDirection /= VolumeRayLength;
		float VolumeMaxSphereRadius = MaxSphereRadius / UVScaleAndVolumeScale.w;
		float VolumeConeEndRayTime = ConeEndRayTime / UVScaleAndVolumeScale.w;
		float ConeEndNormalization = 1.0f / (VolumeRayLength - VolumeConeEndRayTime);

		float4 SphereCenterAndRadius = LoadGlobalObjectPositionAndRadius(ObjectIndex);
		float ObjectCenterDistanceAlongRay = max(dot(SphereCenterAndRadius.xyz - WorldRayStart, WorldRayEnd - WorldRayStart), 0);
		// Expand the intersection box by the radius of the cone at the distance of the object along the cone
		float LocalConeRadiusAtObject = min(TanConeAngle * ObjectCenterDistanceAlongRay / UVScaleAndVolumeScale.w, VolumeMaxSphereRadius);

		float2 IntersectionTimes = LineBoxIntersect(VolumeRayStart, VolumeRayEnd, -LocalPositionExtent - LocalConeRadiusAtObject, LocalPositionExtent + LocalConeRadiusAtObject);

		BRANCH
		if (IntersectionTimes.x < IntersectionTimes.y && IntersectionTimes.x < 1)
		{
			float SampleRayTime = IntersectionTimes.x * VolumeRayLength;
			uint MaxSteps = 32;
			float MinStepSize = 1.0f / (4 * MaxSteps);

			uint StepIndex = 0;

			LOOP
			for (; StepIndex < MaxSteps; StepIndex++)
			{
				float3 SampleVolumePosition = VolumeRayStart + VolumeRayDirection * SampleRayTime;
				float3 ClampedSamplePosition = clamp(SampleVolumePosition, -LocalPositionExtent, LocalPositionExtent);
				float DistanceToClamped = length(ClampedSamplePosition - SampleVolumePosition);
				float3 VolumeUV = DistanceFieldVolumePositionToUV(ClampedSamplePosition, UVScaleAndVolumeScale.xyz, UVAdd);
				float DistanceField = Texture3DSampleLevel(DistanceFieldTexture, DistanceFieldSampler, VolumeUV, 0).x + DistanceToClamped;

				float SphereRadius = clamp(TanConeAngle * SampleRayTime, 0, VolumeMaxSphereRadius);

				if (SampleRayTime > VolumeConeEndRayTime)
				{
					// 0 at VolumeRayLength, 1 at VolumeConeEndRayTime
					float ConeEndAlpha = saturate((VolumeRayLength - SampleRayTime) * ConeEndNormalization);
					// Reduce the intersection sphere radius to 0 at the end of the cone
					SphereRadius = ConeEndAlpha * TanConeAngle * VolumeConeEndRayTime;
				}

				//SphereRadius = 0;

				MinVisibility = min(MinVisibility, saturate(DistanceField / SphereRadius));

				float StepDistance = max(DistanceField, MinStepSize);
				SampleRayTime += StepDistance;

				// Terminate the trace if we reached a negative area or went past the end of the ray
				if (DistanceField <= 0 
					|| SampleRayTime > IntersectionTimes.y * VolumeRayLength)
				{
					break;
				}
			}

			if (StepIndex == MaxSteps)
			{
				MinVisibility = 0;
			}
		}
	}

	return MinVisibility;
}

float ApproximateConeConeIntersection(float ArcLength0, float ArcLength1, float AngleBetweenCones)
{
	float AngleDifference = abs(ArcLength0 - ArcLength1);

	float Intersection = smoothstep(
		0,
		1.0,
		1.0 - saturate((AngleBetweenCones - AngleDifference) / (ArcLength0 + ArcLength1 - AngleDifference)));

	return Intersection;
}

float GetVPLOcclusion(float3 BentNormalAO, float3 NormalizedVectorToVPL)
{
	float BentNormalLength = length(BentNormalAO);
	float VPLConeAngle = .5f;
	float VPLOcclusionStrength = 1;
	float UnoccludedAngle = BentNormalLength * PI / VPLOcclusionStrength;
	float AngleBetween = acos(dot(BentNormalAO, NormalizedVectorToVPL) / max(BentNormalLength, .0001f));
	float Visibility = ApproximateConeConeIntersection(VPLConeAngle, UnoccludedAngle, AngleBetween);

	// Can't rely on the direction of the bent normal when close to fully occluded, lerp to shadowed
	Visibility = lerp(0, Visibility, saturate((UnoccludedAngle - .1f) / .2f));

	return Visibility;
}

Buffer<float> RecordConeData;

float VPLGatherRadius;
float ConeHalfAngle;
float BentNormalNormalizeFactor;

static float3 StepBentNormal[NUM_VISIBILITY_STEPS];

float3 ComputeVirtualPointLighting(uniform bool bCluster, uint VPLIndex, float3 WorldPosition, float3 WorldNormal)
{
	float3 Irradiance = 0;

	float VisibilityStepSize = NUM_VISIBILITY_STEPS / AOMaxDistance;
	float MaxGatherDistanceSq = VPLGatherRadius * VPLGatherRadius;
	float4 VPLPositionAndRadius = bCluster ? VPLClusterData[VPLIndex * VPL_DATA_STRIDE + 0] : VPLData[VPLIndex * VPL_DATA_STRIDE + 0];
	float3 VPLToGatherPoint = WorldPosition - VPLPositionAndRadius.xyz;
	float DistanceSq = dot(VPLToGatherPoint, VPLToGatherPoint);
	float DirectionDot = dot(-VPLToGatherPoint, WorldNormal);

	// Hack
	//VPLPositionAndRadius.w = 100;

#define VISUALIZE_VPL_PLACEMENT 0
#if VISUALIZE_VPL_PLACEMENT
	Irradiance.r += 3 * (DistanceSq < VPLPositionAndRadius.w * VPLPositionAndRadius.w);
#endif

	BRANCH
	if (DistanceSq < MaxGatherDistanceSq && DirectionDot > 0)
	{
		float3 VPLNormal = bCluster ? VPLClusterData[VPLIndex * VPL_DATA_STRIDE + 1].xyz : VPLData[VPLIndex * VPL_DATA_STRIDE + 1].xyz;
		float VPLNormalDot = dot(VPLNormal, VPLToGatherPoint);

		BRANCH
		if (VPLNormalDot > 0)
		{
			float Distance = sqrt(DistanceSq);
			float3 VPLDirection = -VPLToGatherPoint / Distance;

			#define USE_INVERSE_SQUARED_DISK_APPROX 1
			#define USE_PROJECTED_ANGLE_ATTENUATION 0

			#if USE_INVERSE_SQUARED_DISK_APPROX
				float EffectiveDiskRadius = VPLPositionAndRadius.w * 1;
				float DistanceAttenuation = 1.0f / (PI * DistanceSq + PI * EffectiveDiskRadius * EffectiveDiskRadius);
				//@todo - this is scale dependent
				DistanceAttenuation = min(DistanceAttenuation, .0001f * RadialAttenuation(VPLToGatherPoint / VPLGatherRadius, 4));
			#elif USE_PROJECTED_ANGLE_ATTENUATION
				float TangentProjectedAngle = VPLPositionAndRadius.w / Distance;
				float CosProjectedAngle = 1 / sqrt(1 + TangentProjectedAngle * TangentProjectedAngle);
				float ProjectedSolidAngle = 2 * PI * (1 - CosProjectedAngle);
				float DistanceAttenuation = ProjectedSolidAngle / (2 * PI);
				DistanceAttenuation = min(DistanceAttenuation, RadialAttenuation(VPLToGatherPoint / VPLGatherRadius, 4));
				DistanceAttenuation *= .0001f;
			#else
				float DistanceAttenuation = RadialAttenuation(VPLToGatherPoint / VPLGatherRadius, 8);
				DistanceAttenuation *= .0001f;
			#endif

			float CosTheta = DirectionDot / Distance;
			float SinTheta = sqrt(1 - CosTheta * CosTheta);
			
			#if IRRADIANCE_FROM_AO_CONES

				float ShadowDepthBias = 0;
				float ShadowingDistance = Distance + ShadowDepthBias;
				float NormalizedDistance = saturate(ShadowingDistance / AOMaxDistance);
				uint LowerStepIndex = (uint)min(NormalizedDistance * NUM_VISIBILITY_STEPS, NUM_VISIBILITY_STEPS - 1);
				float LerpAlpha = ShadowingDistance - LowerStepIndex * VisibilityStepSize;
				float3 InterpolatedBentNormal = lerp(StepBentNormal[LowerStepIndex], StepBentNormal[LowerStepIndex + 1], saturate(LerpAlpha));

				float Shadow = GetVPLOcclusion(InterpolatedBentNormal, VPLDirection);

			#else

				float StartOffset = 1;
				float EndOffset = 10;
				float RayLength = max(Distance - StartOffset - EndOffset, 0);
				float ConeEndDistance = max(RayLength - SinTheta * VPLPositionAndRadius.w, 0);
				float RadiusAtConeEnd = CosTheta * VPLPositionAndRadius.w;
				// Clamp the cone angle so that it doesn't intersect the gather point surface
				float TanConeAngle = min(RadiusAtConeEnd / ConeEndDistance, SinTheta / CosTheta);
				float Shadow = RayTraceThroughGlobalObjects(WorldPosition + StartOffset * VPLDirection, VPLDirection, RayLength, TanConeAngle, ConeEndDistance);

				if (ConeEndDistance == 0)
				{
					//Shadow = 10;
				}

			#endif

			float VPLCosineLobe = saturate(VPLNormalDot / Distance);
			float3 VPLFlux = bCluster ? VPLClusterData[VPLIndex * VPL_DATA_STRIDE + 2].xyz : VPLData[VPLIndex * VPL_DATA_STRIDE + 2].xyz;

			Irradiance += (saturate(CosTheta) * VPLCosineLobe * DistanceAttenuation * Shadow) * VPLFlux;
		}
	}

	return Irradiance;
}

float3 GatherIrradianceFromVPLs(float3 WorldPosition, float3 WorldNormal, uint RelativeRecordIndex, uint RecordIndex, uint ThreadIndex)
{
	float3 TangentX;
	float3 TangentY;
	FindBestAxisVectors2(WorldNormal, TangentX, TangentY);

	for (uint StepIndex = 0; StepIndex < NUM_VISIBILITY_STEPS; StepIndex++)
	{
		float3 UnoccludedDirection = 0;

		for (uint ConeIndex = 0; ConeIndex < NUM_CONE_DIRECTIONS; ConeIndex++)
		{
			float3 ConeDirection = AOSamples2.SampleDirections[ConeIndex].xyz;
			float3 RotatedConeDirection = ConeDirection.x * TangentX + ConeDirection.y * TangentY + ConeDirection.z * WorldNormal;

			uint RecordConeDataIndex = (RelativeRecordIndex * NUM_CONE_DIRECTIONS + ConeIndex) * RECORD_CONE_DATA_STRIDE;
			float ConeVisibility = RecordConeData[RecordConeDataIndex + StepIndex];
			UnoccludedDirection += ConeVisibility * RotatedConeDirection;
		}

		float InvNumSamples = 1.0f / (float)NUM_CONE_DIRECTIONS;
		UnoccludedDirection = UnoccludedDirection * (BentNormalNormalizeFactor * InvNumSamples);
		StepBentNormal[StepIndex] = UnoccludedDirection;
	}

	float3 Irradiance = 0;

#define USE_VPL_CLUSTERS 0
#if USE_VPL_CLUSTERS

	#define USE_TILE_CULLING 0
	#if USE_TILE_CULLING

		//@todo - won't be correct across frames
		uint2 TileCoordinate = IrradianceCacheTileCoordinate[RecordIndex];
		uint TileIndex = TileCoordinate.y * TileListGroupSize.x + TileCoordinate.x;
		uint NumClusterVPLs = min(TileHeadDataUnpacked[TileIndex * 2 + 1], MAX_VPLS_PER_TILE);

		LOOP
		for (uint VPLListIndex = ThreadIndex; VPLListIndex < NumClusterVPLs; VPLListIndex += FINAL_GATHER_THREADGROUP_SIZE)
		{
			uint VPLClusterIndex = TileArrayData[TileIndex * MAX_VPLS_PER_TILE + VPLListIndex];
	#else

		uint NumClusterVPLs = VPLParameterBuffer[0];

		LOOP
		for (uint VPLClusterIndex = ThreadIndex; VPLClusterIndex < NumClusterVPLs; VPLClusterIndex += FINAL_GATHER_THREADGROUP_SIZE)
		{

	#endif
			float4 ClusterPositionAndRadius = VPLClusterData[VPLClusterIndex * VPL_DATA_STRIDE + 0];
			float4 ClusterNormalAndNumVPLs = VPLClusterData[VPLClusterIndex * VPL_DATA_STRIDE + 1];
			float4 ClusterFluxAndVPLStartIndex = VPLClusterData[VPLClusterIndex * VPL_DATA_STRIDE + 2];

			Irradiance += ComputeVirtualPointLighting(true, VPLClusterIndex, WorldPosition, WorldNormal);
		/*
			uint NumChildVPLs = ClusterNormalAndNumVPLs.w;

			LOOP
			for (uint ChildIndex = 0; ChildIndex < NumChildVPLs; ChildIndex++)
			{
				Irradiance += ComputeVirtualPointLighting(false, (uint)ClusterFluxAndVPLStartIndex.w + ChildIndex, WorldPosition, WorldNormal);
			}*/
		}

#else
	uint NumVPLs = VPLParameterBuffer[1];

	LOOP
	for (uint VPLIndex = ThreadIndex; VPLIndex < NumVPLs; VPLIndex += FINAL_GATHER_THREADGROUP_SIZE)
	{
		Irradiance += ComputeVirtualPointLighting(false, VPLIndex, WorldPosition, WorldNormal);
	}
#endif

	//Irradiance = NumClusterVPLs / (float)MAX_VPLS_PER_TILE;

	return Irradiance;
}

RWBuffer<float4> RWIrradianceCacheIrradiance;

groupshared float3 SharedThreadIrradiance[FINAL_GATHER_THREADGROUP_SIZE];

/**  */
[numthreads(FINAL_GATHER_THREADGROUP_SIZE, 1, 1)]
void ComputeIrradianceCS(
	uint3 GroupId : SV_GroupID,
	uint3 DispatchThreadId : SV_DispatchThreadID,
    uint3 GroupThreadId : SV_GroupThreadID) 
{
	uint StartIndex = SavedStartIndex[0];
	uint NumRecords = ScatterDrawParameters[1];

	uint RecordIndex = StartIndex + GroupId.x;

	if (RecordIndex < NumRecords)
	{
		float3 RecordWorldNormal = IrradianceCacheNormal[RecordIndex].xyz;

		float3 DiffuseColor = .5f;

		float4 PositionAndRadius = IrradianceCachePositionRadius[RecordIndex];
		float3 RecordWorldPosition = PositionAndRadius.xyz;
		float3 Irradiance = GatherIrradianceFromVPLs(RecordWorldPosition, RecordWorldNormal, GroupId.x, RecordIndex, GroupThreadId.x) * DiffuseColor;

		SharedThreadIrradiance[GroupThreadId.x] = Irradiance;
	}

	GroupMemoryBarrierWithGroupSync();

	if (GroupThreadId.x == 0)
	{
		float3 Irradiance = 0;

		for (uint i = 0; i < FINAL_GATHER_THREADGROUP_SIZE; i++)
		{
			Irradiance += SharedThreadIrradiance[i];
		}

		RWIrradianceCacheIrradiance[RecordIndex] = float4(Irradiance, 0);
	}
}
