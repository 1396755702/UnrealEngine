// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.

using UnrealBuildTool;
using System.Collections.Generic;

public class {GAME_NAME}Target : TargetRules
{
    public {GAME_NAME}Target(TargetInfo Target)
	{
		Type = TargetType.Game;
	}

	//
	// TargetRules interface.
	//

	public override void SetupBinaries(
		TargetInfo Target,
		ref List<UEBuildBinaryConfiguration> OutBuildBinaryConfigurations,
		ref List<string> OutExtraModuleNames
		)
	{
        OutExtraModuleNames.Add("UE4Game");
		// this is important - for some reason achievements etc intertwined with the onlinesubsystem and they saved without using a fake OSS. :/
		if (Target.Platform == UnrealTargetPlatform.HTML5)
		{
			OutExtraModuleNames.Add("OnlineSubsystemNull");
		}


		if (UnrealBuildTool.UnrealBuildTool.BuildingRocket())
		{
			OutExtraModuleNames.Add("GameMenuBuilder");

			if (Target.Platform == UnrealTargetPlatform.Win32 || Target.Platform == UnrealTargetPlatform.Win64)
			{
				OutExtraModuleNames.Add("OnlineSubsystemNull");
				OutExtraModuleNames.Add("OnlineSubsystemAmazon");
				if (UEBuildConfiguration.bCompileSteamOSS == true)
				{
					OutExtraModuleNames.Add("OnlineSubsystemSteam");
				}
				OutExtraModuleNames.Add("OnlineSubsystemFacebook");
			}
			else if (Target.Platform == UnrealTargetPlatform.Mac || Target.Platform == UnrealTargetPlatform.Linux)
			{
				OutExtraModuleNames.Add("OnlineSubsystemNull");
				if (UEBuildConfiguration.bCompileSteamOSS == true)
				{
					OutExtraModuleNames.Add("OnlineSubsystemSteam");
				}
			}
			else if (Target.Platform == UnrealTargetPlatform.IOS)
			{
				OutExtraModuleNames.Add("OnlineSubsystemFacebook");
				OutExtraModuleNames.Add("OnlineSubsystemIOS");
				OutExtraModuleNames.Add("IOSAdvertising");
			}
			else if (Target.Platform == UnrealTargetPlatform.Android)
			{
				// @todo android: Add Android online subsystem
				OutExtraModuleNames.Add("AndroidAdvertising");
			}
			else if (Target.Platform == UnrealTargetPlatform.HTML5)
			{
				OutExtraModuleNames.Add("OnlineSubsystemNull");
			}
		}
	}

	public override void SetupGlobalEnvironment(
		TargetInfo Target,
		ref LinkEnvironmentConfiguration OutLinkEnvironmentConfiguration,
		ref CPPEnvironmentConfiguration OutCPPEnvironmentConfiguration
		)
	{
		if (UnrealBuildTool.UnrealBuildTool.BuildingRocket())
		{
			UEBuildConfiguration.bCompileLeanAndMeanUE = true;

			// Don't need editor or editor only data
			UEBuildConfiguration.bBuildEditor = false;
			UEBuildConfiguration.bBuildWithEditorOnlyData = false;

			UEBuildConfiguration.bCompileAgainstEngine = true;

			// no exports, so no need to verify that a .lib and .exp file was emitted by the linker.
			OutLinkEnvironmentConfiguration.bHasExports = false;
		}
		else
		{
			// Tag it as a UE4Game build
			OutCPPEnvironmentConfiguration.Definitions.Add("UE4GAME=1");
		}
	}
	public override GUBPProjectOptions GUBP_IncludeProjectInPromotedBuild_EditorTypeOnly(UnrealTargetPlatform HostPlatform)
    {
        var Result = new GUBPProjectOptions();
        Result.bTestWithShared = true;
		Result.bIsNonCode = true;
        return Result;
    }

	public override List<UnrealTargetPlatform> GUBP_GetPlatforms_MonolithicOnly(UnrealTargetPlatform HostPlatform)
	{
		List<UnrealTargetPlatform> Platforms = null;

		switch (HostPlatform)
		{
			case UnrealTargetPlatform.Mac:
				Platforms = new List<UnrealTargetPlatform> { UnrealTargetPlatform.IOS };
				break;

			case UnrealTargetPlatform.Linux:
				Platforms = new List<UnrealTargetPlatform>();
				break;

			case UnrealTargetPlatform.Win64:
				Platforms = new List<UnrealTargetPlatform>();
				break;

			default:
				Platforms = new List<UnrealTargetPlatform>();
				break;
		}

		return Platforms;
	}

	public override List<UnrealTargetConfiguration> GUBP_GetConfigs_MonolithicOnly(UnrealTargetPlatform HostPlatform, UnrealTargetPlatform Platform)
	{
		return new List<UnrealTargetConfiguration> { UnrealTargetConfiguration.Development, UnrealTargetConfiguration.Shipping, UnrealTargetConfiguration.Test };
	}
	public override List<GUBPFormalBuild> GUBP_GetConfigsForFormalBuilds_MonolithicOnly(UnrealTargetPlatform HostPlatform)
    {
		if (HostPlatform == UnrealTargetPlatform.Win64)
		{
			return new List<GUBPFormalBuild>();			
		}
		else
		{
			return new List<GUBPFormalBuild> 
            { 
                new GUBPFormalBuild(UnrealTargetPlatform.IOS, UnrealTargetConfiguration.Development),
				new GUBPFormalBuild(UnrealTargetPlatform.IOS, UnrealTargetConfiguration.Shipping),
				new GUBPFormalBuild(UnrealTargetPlatform.IOS, UnrealTargetConfiguration.Test, false, true),
            };
		}
	}

}
